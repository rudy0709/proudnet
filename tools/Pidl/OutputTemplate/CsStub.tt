<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="CSHelper.ttinclude"#>

// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

<#
    WriteUsings();
    foreach(var gi in App.g_parsed.m_globalInterfaces)
    {
        StubClassDef(gi);
    }
#>

<#+
    void StubClassDef(Parsed_GlobalInterface gi)
    {
#>
namespace <#=gi.m_name#>
{
    <#=gi.m_accessibility #> class Stub:Nettention.Proud.RmiStub
    {
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

<#+
        foreach(var mt in gi.m_methods)
        {
#>
        public delegate bool <#+ DelegateDecl(mt); #>
        public <#=mt.m_name#>Delegate <#=mt.m_name#> = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext<#+ParamDefs(mt,true);#>)
        {
            return false;
        };
<#+
        }
        ProcessReceivedMessage(gi);
#>
        #if USE_RMI_NAME_STRING
<#+
        DefRmiNames_all("public const string", gi, false);
#>
        #else
<#+
        DefRmiNames_all("public const string", gi, true);
#>
        #endif

        public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }

    }
}
<#+
    }
#>

<#+ void DelegateDecl(Parsed_Method mt)  //////////////////////////// method declaration statement을 생성하는 subprogram.
    {
#>
<#=mt.m_name#>Delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext<#+ParamDefs(mt,true);#>);
<#+
    }
#>

<#+
    void ProcessReceivedMessage(Parsed_GlobalInterface gi)
    {
#>
    public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag)
    {
        Nettention.Proud.HostID remote=pa.RemoteHostID;
        if(remote==Nettention.Proud.HostID.HostID_None)
        {
            ShowUnknownHostIDWarning(remote);
        }

        Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
        int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;

        switch(__rmiID)
        {
<#+
        foreach(var mt in gi.m_methods)
        {
            DoCasePerMethod(mt);
        }
#>
        default:
             goto __fail;
        }
        return true;
__fail:
      {
            __msg.ReadOffset = orgReadOffset;
            return false;
      }
    }
<#+
    foreach(var mt in gi.m_methods)
    {
#>
    void ProcessReceivedMessage_<#=mt.m_name#>(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        <#+ DeserializeParams("__msg",gi,mt); #>
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        <#+ MakeParameterText("parameterString", mt); #>
        NotifyCallFromStub(Common.<#=mt.m_name#>, RmiName_<#=mt.m_name#>,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.<#=mt.m_name#>;
        summary.rmiName = RmiName_<#=mt.m_name#>;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =<#=mt.m_name#> (remote,ctx <#+Paramcalls(mt,true);#> );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called.
        core.ShowNotImplementedRmiWarning(RmiName_<#=mt.m_name#>);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.<#=mt.m_name#>;
        summary.rmiName = RmiName_<#=mt.m_name#>;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
<#+
    }
}
#>


<#+
    void DoCasePerMethod(Parsed_Method mt)
    {
#>
        case Common.<#=mt.m_name#>:
            ProcessReceivedMessage_<#=mt.m_name#>(__msg, pa, hostTag, remote);
            break;
<#+
    }
#>

<#+
    void DeserializeParams(string msg, Parsed_GlobalInterface gi, Parsed_Method mt)
    {
        foreach(Parsed_Param p in mt.m_params)
        {
#>
<#=p.m_type#> <#=p.m_name#>; <#=gi.m_marshaler#>.Read(<#=msg#>,out <#=p.m_name#>);
<#+
        }
#>
core.PostCheckReadMessage(<#=msg#>, RmiName_<#=mt.m_name#>);
<#+
    }
#>

<#+
    void MakeParameterText(string parameterString, Parsed_Method mt)
    {
        foreach(var p in mt.m_params)
        {
#>
parameterString+=<#=p.m_name#>.ToString()+",";
<#+
        }
    }
#>
