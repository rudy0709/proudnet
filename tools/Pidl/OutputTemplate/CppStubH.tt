<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="CppHelper.ttinclude"#>

// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once

<#
foreach(var inc in App.g_parsed.m_includes)
{
#>
#include <#=inc.m_name#>
<#
}#>

#include "<#=App.m_CommonHFileName#>"

<#
foreach(var gi in App.g_parsed.m_globalInterfaces)
{
#>

<#=gi.GetCppNestedNamespaceDefinition()#>

    class Stub : public ::Proud::IRmiStub
    {
    public:
<#
    foreach(var method in gi.m_methods)
    {
#>
        virtual bool <#MethodDecl(method, false);#>
        {
            return false;
        }

#define DECRMI_<#=gi.GetUnderbarizedName()#>_<#=method.m_name#> bool <#MethodDecl(method, true);#> PN_OVERRIDE

#define DEFRMI_<#=gi.GetUnderbarizedName()#>_<#=method.m_name#>(DerivedClass) bool DerivedClass::<#MethodDecl(method, true);#>

#define CALL_<#=gi.GetUnderbarizedName()#>_<#=method.m_name#> <#MethodDecl(method, true);#>

#define PARAM_<#=gi.GetUnderbarizedName()#>_<#=method.m_name#> <#MethodParam(method, true);#>

<#
    } // for each method
#>

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
<#
        PushIndent("\t\t"); // 줄 첫글자부터 나오게 해서 format 안 예쁜 것 해결. https://msdn.microsoft.com/en-us/library/bb126474.aspx
        DeclRmiNames("",gi);
        PopIndent();
#>
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
<#
    foreach(var method in gi.m_methods)
    {
#>
        std::function< bool <#MethodParam(method, false);#> > <#=method.m_name#>_Function;
        virtual bool <#MethodDecl(method, true);#>
        {
            if (<#=method.m_name#>_Function==nullptr)
                return true;
            return <#=method.m_name#>_Function(remote,rmiContext<#Paramcalls(method,true);#>);
        }

<#
    } // for each method
#>
    };
#endif

<#=gi.GetCppNestedNamespaceDefinitionEnd()#>

<#
} // for each `global`

#>
