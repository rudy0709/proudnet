




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Simple_proxy.h"

namespace Simple {


        
	bool Proxy::Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & a, const int & b, const float & c)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}

	bool Proxy::Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & a, const int & b, const float & c)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}
        
	bool Proxy::ShowChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & a, const int & b, const float & c)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}

	bool Proxy::ShowChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & a, const int & b, const float & c)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}
        
	bool Proxy::SystemChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & txt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SystemChat;
__msg.Write(__msgid); 
	
__msg << txt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SystemChat, (::Proud::RmiID)Rmi_SystemChat);
	}

	bool Proxy::SystemChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & txt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SystemChat;
__msg.Write(__msgid); 
	
__msg << txt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SystemChat, (::Proud::RmiID)Rmi_SystemChat);
	}
        
	bool Proxy::P2PChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & a, const int & b, const float & c)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2PChat, (::Proud::RmiID)Rmi_P2PChat);
	}

	bool Proxy::P2PChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & a, const int & b, const float & c)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PChat;
__msg.Write(__msgid); 
	
__msg << a;
__msg << b;
__msg << c;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2PChat, (::Proud::RmiID)Rmi_P2PChat);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Chat =_PNT("Chat");
#else
const PNTCHAR* Proxy::RmiName_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("ShowChat");
#else
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SystemChat =_PNT("SystemChat");
#else
const PNTCHAR* Proxy::RmiName_SystemChat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2PChat =_PNT("P2PChat");
#else
const PNTCHAR* Proxy::RmiName_P2PChat =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Chat;

}



