  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "SynchWorldS2C_common.h"

     
namespace SynchWorldS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_SynchWorldS2C_NotifyLocalHeroViewersGroupID bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID) PN_OVERRIDE

#define DEFRMI_SynchWorldS2C_NotifyLocalHeroViewersGroupID(DerivedClass) bool DerivedClass::NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
#define CALL_SynchWorldS2C_NotifyLocalHeroViewersGroupID NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
#define PARAM_SynchWorldS2C_NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
               
		virtual bool RemoteHero_Appear ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const String & , const Vector3 & , const Vector3 & , const float & )		{ 
			return false;
		} 

#define DECRMI_SynchWorldS2C_RemoteHero_Appear bool RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const String & heroName, const Vector3 & position, const Vector3 & velocity, const float & direction) PN_OVERRIDE

#define DEFRMI_SynchWorldS2C_RemoteHero_Appear(DerivedClass) bool DerivedClass::RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const String & heroName, const Vector3 & position, const Vector3 & velocity, const float & direction)
#define CALL_SynchWorldS2C_RemoteHero_Appear RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const String & heroName, const Vector3 & position, const Vector3 & velocity, const float & direction)
#define PARAM_SynchWorldS2C_RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const String & heroName, const Vector3 & position, const Vector3 & velocity, const float & direction)
               
		virtual bool RemoteHero_Disappear ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_SynchWorldS2C_RemoteHero_Disappear bool RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID) PN_OVERRIDE

#define DEFRMI_SynchWorldS2C_RemoteHero_Disappear(DerivedClass) bool DerivedClass::RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
#define CALL_SynchWorldS2C_RemoteHero_Disappear RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
#define PARAM_SynchWorldS2C_RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_NotifyLocalHeroViewersGroupID;
		static const PNTCHAR* RmiName_RemoteHero_Appear;
		static const PNTCHAR* RmiName_RemoteHero_Disappear;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > NotifyLocalHeroViewersGroupID_Function;
		virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID) 
		{ 
			if (NotifyLocalHeroViewersGroupID_Function==nullptr) 
				return true; 
			return NotifyLocalHeroViewersGroupID_Function(remote,rmiContext, localHeroViewersGroupID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const String & , const Vector3 & , const Vector3 & , const float & ) > RemoteHero_Appear_Function;
		virtual bool RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const String & heroName, const Vector3 & position, const Vector3 & velocity, const float & direction) 
		{ 
			if (RemoteHero_Appear_Function==nullptr) 
				return true; 
			return RemoteHero_Appear_Function(remote,rmiContext, heroOwnerID, heroName, position, velocity, direction); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > RemoteHero_Disappear_Function;
		virtual bool RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID) 
		{ 
			if (RemoteHero_Disappear_Function==nullptr) 
				return true; 
			return RemoteHero_Disappear_Function(remote,rmiContext, heroOwnerID); 
		}

	};
#endif

}


