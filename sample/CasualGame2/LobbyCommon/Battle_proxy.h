



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Battle_common.h"

namespace BattleC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential) PN_SEALED; 
	virtual bool RequestNextLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid, const Guid & credential)   PN_SEALED;  
	virtual bool RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestToggleBattleReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestStartPlayMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyLoadFinished ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool LeaveBattleRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw) PN_SEALED; 
	virtual bool RequestLocalHeroSpawn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)   PN_SEALED;  
	virtual bool RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestBulletSpawn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_SEALED; 
	virtual bool LocalHero_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)   PN_SEALED;  
	virtual bool NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyGotoLobbyServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_RequestNextLogon;
static const PNTCHAR* RmiName_RequestToggleBattleReady;
static const PNTCHAR* RmiName_RequestStartPlayMode;
static const PNTCHAR* RmiName_NotifyLoadFinished;
static const PNTCHAR* RmiName_LeaveBattleRoom;
static const PNTCHAR* RmiName_RequestLocalHeroSpawn;
static const PNTCHAR* RmiName_RequestBulletSpawn;
static const PNTCHAR* RmiName_LocalHero_Move;
static const PNTCHAR* RmiName_NotifyGotoLobbyServer;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace BattleS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt) PN_SEALED; 
	virtual bool ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)   PN_SEALED;  
	virtual bool NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason) PN_SEALED; 
	virtual bool NotifyNextLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason, const CasualResult & moreReason)   PN_SEALED;  
	virtual bool NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo) PN_SEALED; 
	virtual bool NotifyNextLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)   PN_SEALED;  
	virtual bool HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID) PN_SEALED; 
	virtual bool HeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & heroInfo, const HostID & clientHostID)   PN_SEALED;  
	virtual bool HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_SEALED; 
	virtual bool HeroSlot_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)   PN_SEALED;  
	virtual bool HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo) PN_SEALED; 
	virtual bool HeroSlot_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & heroInfo)   PN_SEALED;  
	virtual bool NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_SEALED; 
	virtual bool NotifyGameRoomInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)   PN_SEALED;  
	virtual bool NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyStartPlayModeFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GotoWaitingMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GotoLoadingMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GotoPlayMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID) PN_SEALED; 
	virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & localHeroViewersGroupID)   PN_SEALED;  
	virtual bool RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_SEALED; 
	virtual bool RemoteHero_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)   PN_SEALED;  
	virtual bool RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID) PN_SEALED; 
	virtual bool RemoteHero_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & heroOwnerID)   PN_SEALED;  
	virtual bool NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) PN_SEALED; 
	virtual bool NotifyBullet_Create ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)   PN_SEALED;  
	virtual bool NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) PN_SEALED; 
	virtual bool NotifyBullet_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)   PN_SEALED;  
	virtual bool NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) PN_SEALED; 
	virtual bool NotifyBullet_Delete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id)   PN_SEALED;  
	virtual bool NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score) PN_SEALED; 
	virtual bool NotifyHeroScore ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const LONGLONG & score)   PN_SEALED;  
	virtual bool NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotyfyGotoLobby ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type) PN_SEALED; 
	virtual bool NotifyItem_Create ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const D3DXVECTOR3 & position, const ItemType & type)   PN_SEALED;  
	virtual bool NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) PN_SEALED; 
	virtual bool NotifyItem_Delete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id)   PN_SEALED;  
	virtual bool NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyBullet_Clear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_NotifyUnauthedAccess;
static const PNTCHAR* RmiName_ShowError;
static const PNTCHAR* RmiName_NotifyNextLogonFailed;
static const PNTCHAR* RmiName_NotifyNextLogonSuccess;
static const PNTCHAR* RmiName_HeroSlot_Appear;
static const PNTCHAR* RmiName_HeroSlot_Disappear;
static const PNTCHAR* RmiName_HeroSlot_ShowState;
static const PNTCHAR* RmiName_NotifyGameRoomInfo;
static const PNTCHAR* RmiName_NotifyStartPlayModeFailed;
static const PNTCHAR* RmiName_GotoWaitingMode;
static const PNTCHAR* RmiName_GotoLoadingMode;
static const PNTCHAR* RmiName_GotoPlayMode;
static const PNTCHAR* RmiName_NotifyLocalHeroViewersGroupID;
static const PNTCHAR* RmiName_RemoteHero_Appear;
static const PNTCHAR* RmiName_RemoteHero_Disappear;
static const PNTCHAR* RmiName_NotifyBullet_Create;
static const PNTCHAR* RmiName_NotifyBullet_Move;
static const PNTCHAR* RmiName_NotifyBullet_Delete;
static const PNTCHAR* RmiName_NotifyHeroScore;
static const PNTCHAR* RmiName_NotyfyGotoLobby;
static const PNTCHAR* RmiName_NotifyItem_Create;
static const PNTCHAR* RmiName_NotifyItem_Delete;
static const PNTCHAR* RmiName_NotifyBullet_Clear;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace BattleC2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText) PN_SEALED; 
	virtual bool P2P_Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & chatText)   PN_SEALED;  
	virtual bool P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_SEALED; 
	virtual bool P2P_LocalHero_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)   PN_SEALED;  
static const PNTCHAR* RmiName_P2P_Chat;
static const PNTCHAR* RmiName_P2P_LocalHero_Move;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



