




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Farm_proxy.h"

namespace FarmC2S {


        
	bool Proxy::RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFarmLogon;
__msg.Write(__msgid); 
	
__msg << FarmName;
__msg << FarmClientName;
__msg << FarmClientType;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestFarmLogon, (::Proud::RmiID)Rmi_RequestFarmLogon);
	}

	bool Proxy::RequestFarmLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & FarmName, const String & FarmClientName, const int & FarmClientType)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFarmLogon;
__msg.Write(__msgid); 
	
__msg << FarmName;
__msg << FarmClientName;
__msg << FarmClientType;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestFarmLogon, (::Proud::RmiID)Rmi_RequestFarmLogon);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestFarmLogon =_PNT("RequestFarmLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestFarmLogon =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestFarmLogon;

}


namespace FarmS2C {


        
	bool Proxy::NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyFarmLogonFailed, (::Proud::RmiID)Rmi_NotifyFarmLogonFailed);
	}

	bool Proxy::NotifyFarmLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyFarmLogonFailed, (::Proud::RmiID)Rmi_NotifyFarmLogonFailed);
	}
        
	bool Proxy::NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmLogonSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyFarmLogonSuccess, (::Proud::RmiID)Rmi_NotifyFarmLogonSuccess);
	}

	bool Proxy::NotifyFarmLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmLogonSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyFarmLogonSuccess, (::Proud::RmiID)Rmi_NotifyFarmLogonSuccess);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyFarmLogonFailed =_PNT("NotifyFarmLogonFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyFarmLogonFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyFarmLogonSuccess =_PNT("NotifyFarmLogonSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyFarmLogonSuccess =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyFarmLogonFailed;

}


namespace FarmC2C {


        
	bool Proxy::NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmClientInfo;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyFarmClientInfo, (::Proud::RmiID)Rmi_NotifyFarmClientInfo);
	}

	bool Proxy::NotifyFarmClientInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CFarmClientInfo & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFarmClientInfo;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyFarmClientInfo, (::Proud::RmiID)Rmi_NotifyFarmClientInfo);
	}
        
	bool Proxy::RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateGameRoom;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << gameRoomParam;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestCreateGameRoom, (::Proud::RmiID)Rmi_RequestCreateGameRoom);
	}

	bool Proxy::RequestCreateGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateGameRoom;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << gameRoomParam;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestCreateGameRoom, (::Proud::RmiID)Rmi_RequestCreateGameRoom);
	}
        
	bool Proxy::NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateGameRoomResult;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << result;
__msg << createdGameRoomParam;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateGameRoomResult, (::Proud::RmiID)Rmi_NotifyCreateGameRoomResult);
	}

	bool Proxy::NotifyCreateGameRoomResult ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateGameRoomResult;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << result;
__msg << createdGameRoomParam;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateGameRoomResult, (::Proud::RmiID)Rmi_NotifyCreateGameRoomResult);
	}
        
	bool Proxy::GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Appear;
__msg.Write(__msgid); 
	
__msg << roomInfo;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_Appear, (::Proud::RmiID)Rmi_GameRoom_Appear);
	}

	bool Proxy::GameRoom_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & roomInfo)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Appear;
__msg.Write(__msgid); 
	
__msg << roomInfo;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_Appear, (::Proud::RmiID)Rmi_GameRoom_Appear);
	}
        
	bool Proxy::GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_ShowState;
__msg.Write(__msgid); 
	
__msg << roomInfo;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_ShowState, (::Proud::RmiID)Rmi_GameRoom_ShowState);
	}

	bool Proxy::GameRoom_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & roomInfo)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_ShowState;
__msg.Write(__msgid); 
	
__msg << roomInfo;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_ShowState, (::Proud::RmiID)Rmi_GameRoom_ShowState);
	}
        
	bool Proxy::GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Disappear;
__msg.Write(__msgid); 
	
__msg << roomGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_Disappear, (::Proud::RmiID)Rmi_GameRoom_Disappear);
	}

	bool Proxy::GameRoom_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Disappear;
__msg.Write(__msgid); 
	
__msg << roomGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_Disappear, (::Proud::RmiID)Rmi_GameRoom_Disappear);
	}
        
	bool Proxy::RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestJoinGameRoom;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << param;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestJoinGameRoom, (::Proud::RmiID)Rmi_RequestJoinGameRoom);
	}

	bool Proxy::RequestJoinGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestJoinGameRoom;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << param;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestJoinGameRoom, (::Proud::RmiID)Rmi_RequestJoinGameRoom);
	}
        
	bool Proxy::NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinGameRoomResult;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << result;
__msg << createdGameRoomParam;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyJoinGameRoomResult, (::Proud::RmiID)Rmi_NotifyJoinGameRoomResult);
	}

	bool Proxy::NotifyJoinGameRoomResult ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinGameRoomResult;
__msg.Write(__msgid); 
	
__msg << requestedLobbyClientID;
__msg << result;
__msg << createdGameRoomParam;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyJoinGameRoomResult, (::Proud::RmiID)Rmi_NotifyJoinGameRoomResult);
	}
        
	bool Proxy::NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStatusServer;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyStatusServer, (::Proud::RmiID)Rmi_NotifyStatusServer);
	}

	bool Proxy::NotifyStatusServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStatusServer;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyStatusServer, (::Proud::RmiID)Rmi_NotifyStatusServer);
	}
        
	bool Proxy::RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateCredential;
__msg.Write(__msgid); 
	
__msg << gamerUUID;
__msg << UserHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestCreateCredential, (::Proud::RmiID)Rmi_RequestCreateCredential);
	}

	bool Proxy::RequestCreateCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerUUID, const HostID & UserHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateCredential;
__msg.Write(__msgid); 
	
__msg << gamerUUID;
__msg << UserHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestCreateCredential, (::Proud::RmiID)Rmi_RequestCreateCredential);
	}
        
	bool Proxy::NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreatedCredential;
__msg.Write(__msgid); 
	
__msg << credential;
__msg << UserHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreatedCredential, (::Proud::RmiID)Rmi_NotifyCreatedCredential);
	}

	bool Proxy::NotifyCreatedCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential, const HostID & UserHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreatedCredential;
__msg.Write(__msgid); 
	
__msg << credential;
__msg << UserHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreatedCredential, (::Proud::RmiID)Rmi_NotifyCreatedCredential);
	}
        
	bool Proxy::RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCheckCredential;
__msg.Write(__msgid); 
	
__msg << credential;
__msg << userHostID;
__msg << ServerName;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestCheckCredential, (::Proud::RmiID)Rmi_RequestCheckCredential);
	}

	bool Proxy::RequestCheckCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCheckCredential;
__msg.Write(__msgid); 
	
__msg << credential;
__msg << userHostID;
__msg << ServerName;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestCheckCredential, (::Proud::RmiID)Rmi_RequestCheckCredential);
	}
        
	bool Proxy::NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCheckCredentialSuccess;
__msg.Write(__msgid); 
	
__msg << gamerGuid;
__msg << userHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCheckCredentialSuccess, (::Proud::RmiID)Rmi_NotifyCheckCredentialSuccess);
	}

	bool Proxy::NotifyCheckCredentialSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerGuid, const HostID & userHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCheckCredentialSuccess;
__msg.Write(__msgid); 
	
__msg << gamerGuid;
__msg << userHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCheckCredentialSuccess, (::Proud::RmiID)Rmi_NotifyCheckCredentialSuccess);
	}
        
	bool Proxy::NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCheckCredentialFail;
__msg.Write(__msgid); 
	
__msg << userHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCheckCredentialFail, (::Proud::RmiID)Rmi_NotifyCheckCredentialFail);
	}

	bool Proxy::NotifyCheckCredentialFail ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & userHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCheckCredentialFail;
__msg.Write(__msgid); 
	
__msg << userHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCheckCredentialFail, (::Proud::RmiID)Rmi_NotifyCheckCredentialFail);
	}
        
	bool Proxy::UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UserLogOut;
__msg.Write(__msgid); 
	
__msg << gamerUUID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_UserLogOut, (::Proud::RmiID)Rmi_UserLogOut);
	}

	bool Proxy::UserLogOut ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerUUID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UserLogOut;
__msg.Write(__msgid); 
	
__msg << gamerUUID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_UserLogOut, (::Proud::RmiID)Rmi_UserLogOut);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyFarmClientInfo =_PNT("NotifyFarmClientInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyFarmClientInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestCreateGameRoom =_PNT("RequestCreateGameRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestCreateGameRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateGameRoomResult =_PNT("NotifyCreateGameRoomResult");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateGameRoomResult =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_Appear =_PNT("GameRoom_Appear");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_ShowState =_PNT("GameRoom_ShowState");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_ShowState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_Disappear =_PNT("GameRoom_Disappear");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_Disappear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestJoinGameRoom =_PNT("RequestJoinGameRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestJoinGameRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyJoinGameRoomResult =_PNT("NotifyJoinGameRoomResult");
#else
const PNTCHAR* Proxy::RmiName_NotifyJoinGameRoomResult =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyStatusServer =_PNT("NotifyStatusServer");
#else
const PNTCHAR* Proxy::RmiName_NotifyStatusServer =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestCreateCredential =_PNT("RequestCreateCredential");
#else
const PNTCHAR* Proxy::RmiName_RequestCreateCredential =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreatedCredential =_PNT("NotifyCreatedCredential");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreatedCredential =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestCheckCredential =_PNT("RequestCheckCredential");
#else
const PNTCHAR* Proxy::RmiName_RequestCheckCredential =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCheckCredentialSuccess =_PNT("NotifyCheckCredentialSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyCheckCredentialSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCheckCredentialFail =_PNT("NotifyCheckCredentialFail");
#else
const PNTCHAR* Proxy::RmiName_NotifyCheckCredentialFail =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_UserLogOut =_PNT("UserLogOut");
#else
const PNTCHAR* Proxy::RmiName_UserLogOut =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyFarmClientInfo;

}



