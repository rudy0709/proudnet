  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "Farm_common.h"

     
namespace FarmC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestFarmLogon ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const String & , const int & )		{ 
			return false;
		} 

#define DECRMI_FarmC2S_RequestFarmLogon bool RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType) PN_OVERRIDE

#define DEFRMI_FarmC2S_RequestFarmLogon(DerivedClass) bool DerivedClass::RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType)
#define CALL_FarmC2S_RequestFarmLogon RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType)
#define PARAM_FarmC2S_RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestFarmLogon;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const String & , const int & ) > RequestFarmLogon_Function;
		virtual bool RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType) 
		{ 
			if (RequestFarmLogon_Function==nullptr) 
				return true; 
			return RequestFarmLogon_Function(remote,rmiContext, FarmName, FarmClientName, FarmClientType); 
		}

	};
#endif

}


     
namespace FarmS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool NotifyFarmLogonFailed ( ::Proud::HostID, ::Proud::RmiContext& , const ErrorType & )		{ 
			return false;
		} 

#define DECRMI_FarmS2C_NotifyFarmLogonFailed bool NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason) PN_OVERRIDE

#define DEFRMI_FarmS2C_NotifyFarmLogonFailed(DerivedClass) bool DerivedClass::NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason)
#define CALL_FarmS2C_NotifyFarmLogonFailed NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason)
#define PARAM_FarmS2C_NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason)
               
		virtual bool NotifyFarmLogonSuccess ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_FarmS2C_NotifyFarmLogonSuccess bool NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_FarmS2C_NotifyFarmLogonSuccess(DerivedClass) bool DerivedClass::NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_FarmS2C_NotifyFarmLogonSuccess NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_FarmS2C_NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_NotifyFarmLogonFailed;
		static const PNTCHAR* RmiName_NotifyFarmLogonSuccess;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const ErrorType & ) > NotifyFarmLogonFailed_Function;
		virtual bool NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason) 
		{ 
			if (NotifyFarmLogonFailed_Function==nullptr) 
				return true; 
			return NotifyFarmLogonFailed_Function(remote,rmiContext, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyFarmLogonSuccess_Function;
		virtual bool NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyFarmLogonSuccess_Function==nullptr) 
				return true; 
			return NotifyFarmLogonSuccess_Function(remote,rmiContext); 
		}

	};
#endif

}


     
namespace FarmC2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool NotifyFarmClientInfo ( ::Proud::HostID, ::Proud::RmiContext& , const CFarmClientInfo & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyFarmClientInfo bool NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyFarmClientInfo(DerivedClass) bool DerivedClass::NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info)
#define CALL_FarmC2C_NotifyFarmClientInfo NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info)
#define PARAM_FarmC2C_NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info)
               
		virtual bool RequestCreateGameRoom ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_RequestCreateGameRoom bool RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam) PN_OVERRIDE

#define DEFRMI_FarmC2C_RequestCreateGameRoom(DerivedClass) bool DerivedClass::RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)
#define CALL_FarmC2C_RequestCreateGameRoom RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)
#define PARAM_FarmC2C_RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)
               
		virtual bool NotifyCreateGameRoomResult ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CasualResult & , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyCreateGameRoomResult bool NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyCreateGameRoomResult(DerivedClass) bool DerivedClass::NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
#define CALL_FarmC2C_NotifyCreateGameRoomResult NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
#define PARAM_FarmC2C_NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
               
		virtual bool GameRoom_Appear ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_GameRoom_Appear bool GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) PN_OVERRIDE

#define DEFRMI_FarmC2C_GameRoom_Appear(DerivedClass) bool DerivedClass::GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
#define CALL_FarmC2C_GameRoom_Appear GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
#define PARAM_FarmC2C_GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
               
		virtual bool GameRoom_ShowState ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_GameRoom_ShowState bool GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) PN_OVERRIDE

#define DEFRMI_FarmC2C_GameRoom_ShowState(DerivedClass) bool DerivedClass::GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
#define CALL_FarmC2C_GameRoom_ShowState GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
#define PARAM_FarmC2C_GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo)
               
		virtual bool GameRoom_Disappear ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_GameRoom_Disappear bool GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid) PN_OVERRIDE

#define DEFRMI_FarmC2C_GameRoom_Disappear(DerivedClass) bool DerivedClass::GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid)
#define CALL_FarmC2C_GameRoom_Disappear GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid)
#define PARAM_FarmC2C_GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid)
               
		virtual bool RequestJoinGameRoom ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CJoinGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_RequestJoinGameRoom bool RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param) PN_OVERRIDE

#define DEFRMI_FarmC2C_RequestJoinGameRoom(DerivedClass) bool DerivedClass::RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)
#define CALL_FarmC2C_RequestJoinGameRoom RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)
#define PARAM_FarmC2C_RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)
               
		virtual bool NotifyJoinGameRoomResult ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CasualResult & , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyJoinGameRoomResult bool NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyJoinGameRoomResult(DerivedClass) bool DerivedClass::NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
#define CALL_FarmC2C_NotifyJoinGameRoomResult NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
#define PARAM_FarmC2C_NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)
               
		virtual bool NotifyStatusServer ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyStatusServer bool NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyStatusServer(DerivedClass) bool DerivedClass::NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_FarmC2C_NotifyStatusServer NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_FarmC2C_NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool RequestCreateCredential ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_RequestCreateCredential bool RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID) PN_OVERRIDE

#define DEFRMI_FarmC2C_RequestCreateCredential(DerivedClass) bool DerivedClass::RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID)
#define CALL_FarmC2C_RequestCreateCredential RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID)
#define PARAM_FarmC2C_RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID)
               
		virtual bool NotifyCreatedCredential ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyCreatedCredential bool NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyCreatedCredential(DerivedClass) bool DerivedClass::NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID)
#define CALL_FarmC2C_NotifyCreatedCredential NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID)
#define PARAM_FarmC2C_NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID)
               
		virtual bool RequestCheckCredential ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::Guid & , const HostID & , const String & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_RequestCheckCredential bool RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName) PN_OVERRIDE

#define DEFRMI_FarmC2C_RequestCheckCredential(DerivedClass) bool DerivedClass::RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)
#define CALL_FarmC2C_RequestCheckCredential RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)
#define PARAM_FarmC2C_RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)
               
		virtual bool NotifyCheckCredentialSuccess ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyCheckCredentialSuccess bool NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyCheckCredentialSuccess(DerivedClass) bool DerivedClass::NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID)
#define CALL_FarmC2C_NotifyCheckCredentialSuccess NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID)
#define PARAM_FarmC2C_NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID)
               
		virtual bool NotifyCheckCredentialFail ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_NotifyCheckCredentialFail bool NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID) PN_OVERRIDE

#define DEFRMI_FarmC2C_NotifyCheckCredentialFail(DerivedClass) bool DerivedClass::NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID)
#define CALL_FarmC2C_NotifyCheckCredentialFail NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID)
#define PARAM_FarmC2C_NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID)
               
		virtual bool UserLogOut ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & )		{ 
			return false;
		} 

#define DECRMI_FarmC2C_UserLogOut bool UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID) PN_OVERRIDE

#define DEFRMI_FarmC2C_UserLogOut(DerivedClass) bool DerivedClass::UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID)
#define CALL_FarmC2C_UserLogOut UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID)
#define PARAM_FarmC2C_UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_NotifyFarmClientInfo;
		static const PNTCHAR* RmiName_RequestCreateGameRoom;
		static const PNTCHAR* RmiName_NotifyCreateGameRoomResult;
		static const PNTCHAR* RmiName_GameRoom_Appear;
		static const PNTCHAR* RmiName_GameRoom_ShowState;
		static const PNTCHAR* RmiName_GameRoom_Disappear;
		static const PNTCHAR* RmiName_RequestJoinGameRoom;
		static const PNTCHAR* RmiName_NotifyJoinGameRoomResult;
		static const PNTCHAR* RmiName_NotifyStatusServer;
		static const PNTCHAR* RmiName_RequestCreateCredential;
		static const PNTCHAR* RmiName_NotifyCreatedCredential;
		static const PNTCHAR* RmiName_RequestCheckCredential;
		static const PNTCHAR* RmiName_NotifyCheckCredentialSuccess;
		static const PNTCHAR* RmiName_NotifyCheckCredentialFail;
		static const PNTCHAR* RmiName_UserLogOut;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CFarmClientInfo & ) > NotifyFarmClientInfo_Function;
		virtual bool NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info) 
		{ 
			if (NotifyFarmClientInfo_Function==nullptr) 
				return true; 
			return NotifyFarmClientInfo_Function(remote,rmiContext, info); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CGameRoomParameter & ) > RequestCreateGameRoom_Function;
		virtual bool RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam) 
		{ 
			if (RequestCreateGameRoom_Function==nullptr) 
				return true; 
			return RequestCreateGameRoom_Function(remote,rmiContext, requestedLobbyClientID, gameRoomParam); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CasualResult & , const CGameRoomParameter & ) > NotifyCreateGameRoomResult_Function;
		virtual bool NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) 
		{ 
			if (NotifyCreateGameRoomResult_Function==nullptr) 
				return true; 
			return NotifyCreateGameRoomResult_Function(remote,rmiContext, requestedLobbyClientID, result, createdGameRoomParam); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & ) > GameRoom_Appear_Function;
		virtual bool GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) 
		{ 
			if (GameRoom_Appear_Function==nullptr) 
				return true; 
			return GameRoom_Appear_Function(remote,rmiContext, roomInfo); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & ) > GameRoom_ShowState_Function;
		virtual bool GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) 
		{ 
			if (GameRoom_ShowState_Function==nullptr) 
				return true; 
			return GameRoom_ShowState_Function(remote,rmiContext, roomInfo); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & ) > GameRoom_Disappear_Function;
		virtual bool GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid) 
		{ 
			if (GameRoom_Disappear_Function==nullptr) 
				return true; 
			return GameRoom_Disappear_Function(remote,rmiContext, roomGuid); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CJoinGameRoomParameter & ) > RequestJoinGameRoom_Function;
		virtual bool RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param) 
		{ 
			if (RequestJoinGameRoom_Function==nullptr) 
				return true; 
			return RequestJoinGameRoom_Function(remote,rmiContext, requestedLobbyClientID, param); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CasualResult & , const CGameRoomParameter & ) > NotifyJoinGameRoomResult_Function;
		virtual bool NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) 
		{ 
			if (NotifyJoinGameRoomResult_Function==nullptr) 
				return true; 
			return NotifyJoinGameRoomResult_Function(remote,rmiContext, requestedLobbyClientID, result, createdGameRoomParam); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyStatusServer_Function;
		virtual bool NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyStatusServer_Function==nullptr) 
				return true; 
			return NotifyStatusServer_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & ) > RequestCreateCredential_Function;
		virtual bool RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID) 
		{ 
			if (RequestCreateCredential_Function==nullptr) 
				return true; 
			return RequestCreateCredential_Function(remote,rmiContext, gamerUUID, UserHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & ) > NotifyCreatedCredential_Function;
		virtual bool NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID) 
		{ 
			if (NotifyCreatedCredential_Function==nullptr) 
				return true; 
			return NotifyCreatedCredential_Function(remote,rmiContext, credential, UserHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::Guid & , const HostID & , const String & ) > RequestCheckCredential_Function;
		virtual bool RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName) 
		{ 
			if (RequestCheckCredential_Function==nullptr) 
				return true; 
			return RequestCheckCredential_Function(remote,rmiContext, credential, userHostID, ServerName); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const HostID & ) > NotifyCheckCredentialSuccess_Function;
		virtual bool NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID) 
		{ 
			if (NotifyCheckCredentialSuccess_Function==nullptr) 
				return true; 
			return NotifyCheckCredentialSuccess_Function(remote,rmiContext, gamerGuid, userHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > NotifyCheckCredentialFail_Function;
		virtual bool NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID) 
		{ 
			if (NotifyCheckCredentialFail_Function==nullptr) 
				return true; 
			return NotifyCheckCredentialFail_Function(remote,rmiContext, userHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & ) > UserLogOut_Function;
		virtual bool UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID) 
		{ 
			if (UserLogOut_Function==nullptr) 
				return true; 
			return UserLogOut_Function(remote,rmiContext, gamerUUID); 
		}

	};
#endif

}


