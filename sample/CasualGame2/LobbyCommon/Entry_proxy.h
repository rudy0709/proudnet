



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Entry_common.h"

namespace EntryC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool RequestReturnToEntry ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential) PN_SEALED; 
	virtual bool RequestReturnToEntry ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential)   PN_SEALED;  
	virtual bool RequestCreateNewGamer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & gamerID, const String & Password) PN_SEALED; 
	virtual bool RequestCreateNewGamer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & gamerID, const String & Password)   PN_SEALED;  
	virtual bool RequestFirstLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & gamerID, const String & gamerPassword) PN_SEALED; 
	virtual bool RequestFirstLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & gamerID, const String & gamerPassword)   PN_SEALED;  
	virtual bool RequestHeroSlots ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestHeroSlots ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RequestSelectHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_SEALED; 
	virtual bool RequestSelectHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)   PN_SEALED;  
	virtual bool RequestAddHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const int & heroType) PN_SEALED; 
	virtual bool RequestAddHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const int & heroType)   PN_SEALED;  
	virtual bool RequestRemoveHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_SEALED; 
	virtual bool RequestRemoveHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)   PN_SEALED;  
	virtual bool RequestLobbyList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestLobbyList ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_RequestReturnToEntry;
static const PNTCHAR* RmiName_RequestCreateNewGamer;
static const PNTCHAR* RmiName_RequestFirstLogon;
static const PNTCHAR* RmiName_RequestHeroSlots;
static const PNTCHAR* RmiName_RequestSelectHero;
static const PNTCHAR* RmiName_RequestAddHero;
static const PNTCHAR* RmiName_RequestRemoveHero;
static const PNTCHAR* RmiName_RequestLobbyList;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace EntryS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool NotifyCreateNewGamerSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid) PN_SEALED; 
	virtual bool NotifyCreateNewGamerSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid)   PN_SEALED;  
	virtual bool NotifyCreateNewGamerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason) PN_SEALED; 
	virtual bool NotifyCreateNewGamerFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)   PN_SEALED;  
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt) PN_SEALED; 
	virtual bool ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)   PN_SEALED;  
	virtual bool NotifyFirstLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason) PN_SEALED; 
	virtual bool NotifyFirstLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)   PN_SEALED;  
	virtual bool NotifyReturnToEntryFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason) PN_SEALED; 
	virtual bool NotifyReturnToEntryFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)   PN_SEALED;  
	virtual bool NotifyFirstLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const Guid & credential) PN_SEALED; 
	virtual bool NotifyFirstLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const Guid & credential)   PN_SEALED;  
	virtual bool NotifySelectHeroFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason) PN_SEALED; 
	virtual bool NotifySelectHeroFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)   PN_SEALED;  
	virtual bool NotifySelectHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroname) PN_SEALED; 
	virtual bool NotifySelectHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroname)   PN_SEALED;  
	virtual bool HeroList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool HeroList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool HeroList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const Guid & heroGuid, const int & heroType, const LONGLONG & heroScore) PN_SEALED; 
	virtual bool HeroList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const Guid & heroGuid, const int & heroType, const LONGLONG & heroScore)   PN_SEALED;  
	virtual bool HeroList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool HeroList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RemovedHeroList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RemovedHeroList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RemovedHeroList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const Guid & heroGuid) PN_SEALED; 
	virtual bool RemovedHeroList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const Guid & heroGuid)   PN_SEALED;  
	virtual bool RemovedHeroList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RemovedHeroList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifySelectedHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_SEALED; 
	virtual bool NotifySelectedHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)   PN_SEALED;  
	virtual bool NotifyAddHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyAddHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifyAddHeroFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason) PN_SEALED; 
	virtual bool NotifyAddHeroFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)   PN_SEALED;  
	virtual bool NotifyRemoveHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyRemoveHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool LobbyList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool LobbyList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool LobbyList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & lobbyName, const NamedAddrPort & serverAddr, const int & gamerCount) PN_SEALED; 
	virtual bool LobbyList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & lobbyName, const NamedAddrPort & serverAddr, const int & gamerCount)   PN_SEALED;  
	virtual bool LobbyList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool LobbyList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_NotifyCreateNewGamerSuccess;
static const PNTCHAR* RmiName_NotifyCreateNewGamerFailed;
static const PNTCHAR* RmiName_NotifyUnauthedAccess;
static const PNTCHAR* RmiName_ShowError;
static const PNTCHAR* RmiName_NotifyFirstLogonFailed;
static const PNTCHAR* RmiName_NotifyReturnToEntryFailed;
static const PNTCHAR* RmiName_NotifyFirstLogonSuccess;
static const PNTCHAR* RmiName_NotifySelectHeroFailed;
static const PNTCHAR* RmiName_NotifySelectHeroSuccess;
static const PNTCHAR* RmiName_HeroList_Begin;
static const PNTCHAR* RmiName_HeroList_Add;
static const PNTCHAR* RmiName_HeroList_End;
static const PNTCHAR* RmiName_RemovedHeroList_Begin;
static const PNTCHAR* RmiName_RemovedHeroList_Add;
static const PNTCHAR* RmiName_RemovedHeroList_End;
static const PNTCHAR* RmiName_NotifySelectedHero;
static const PNTCHAR* RmiName_NotifyAddHeroSuccess;
static const PNTCHAR* RmiName_NotifyAddHeroFailed;
static const PNTCHAR* RmiName_NotifyRemoveHeroSuccess;
static const PNTCHAR* RmiName_LobbyList_Begin;
static const PNTCHAR* RmiName_LobbyList_Add;
static const PNTCHAR* RmiName_LobbyList_End;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



