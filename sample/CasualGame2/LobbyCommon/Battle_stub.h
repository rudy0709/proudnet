  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "Battle_common.h"

     
namespace BattleC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestNextLogon ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const Guid & )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_RequestNextLogon bool RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential) PN_OVERRIDE

#define DEFRMI_BattleC2S_RequestNextLogon(DerivedClass) bool DerivedClass::RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential)
#define CALL_BattleC2S_RequestNextLogon RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential)
#define PARAM_BattleC2S_RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential)
               
		virtual bool RequestToggleBattleReady ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_RequestToggleBattleReady bool RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_RequestToggleBattleReady(DerivedClass) bool DerivedClass::RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_RequestToggleBattleReady RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool RequestStartPlayMode ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_RequestStartPlayMode bool RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_RequestStartPlayMode(DerivedClass) bool DerivedClass::RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_RequestStartPlayMode RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool NotifyLoadFinished ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_NotifyLoadFinished bool NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_NotifyLoadFinished(DerivedClass) bool DerivedClass::NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_NotifyLoadFinished NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool LeaveBattleRoom ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_LeaveBattleRoom bool LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_LeaveBattleRoom(DerivedClass) bool DerivedClass::LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_LeaveBattleRoom LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool RequestLocalHeroSpawn ( ::Proud::HostID, ::Proud::RmiContext& , const CStringW & , const D3DXVECTOR3 & , const float & )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_RequestLocalHeroSpawn bool RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw) PN_OVERRIDE

#define DEFRMI_BattleC2S_RequestLocalHeroSpawn(DerivedClass) bool DerivedClass::RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)
#define CALL_BattleC2S_RequestLocalHeroSpawn RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)
#define PARAM_BattleC2S_RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)
               
		virtual bool RequestBulletSpawn ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_RequestBulletSpawn bool RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_RequestBulletSpawn(DerivedClass) bool DerivedClass::RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_RequestBulletSpawn RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool LocalHero_Move ( ::Proud::HostID, ::Proud::RmiContext& , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_LocalHero_Move bool LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_OVERRIDE

#define DEFRMI_BattleC2S_LocalHero_Move(DerivedClass) bool DerivedClass::LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define CALL_BattleC2S_LocalHero_Move LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define PARAM_BattleC2S_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
               
		virtual bool NotifyGotoLobbyServer ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleC2S_NotifyGotoLobbyServer bool NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleC2S_NotifyGotoLobbyServer(DerivedClass) bool DerivedClass::NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleC2S_NotifyGotoLobbyServer NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleC2S_NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestNextLogon;
		static const PNTCHAR* RmiName_RequestToggleBattleReady;
		static const PNTCHAR* RmiName_RequestStartPlayMode;
		static const PNTCHAR* RmiName_NotifyLoadFinished;
		static const PNTCHAR* RmiName_LeaveBattleRoom;
		static const PNTCHAR* RmiName_RequestLocalHeroSpawn;
		static const PNTCHAR* RmiName_RequestBulletSpawn;
		static const PNTCHAR* RmiName_LocalHero_Move;
		static const PNTCHAR* RmiName_NotifyGotoLobbyServer;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const Guid & ) > RequestNextLogon_Function;
		virtual bool RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential) 
		{ 
			if (RequestNextLogon_Function==nullptr) 
				return true; 
			return RequestNextLogon_Function(remote,rmiContext, roomGuid, credential); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > RequestToggleBattleReady_Function;
		virtual bool RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (RequestToggleBattleReady_Function==nullptr) 
				return true; 
			return RequestToggleBattleReady_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > RequestStartPlayMode_Function;
		virtual bool RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (RequestStartPlayMode_Function==nullptr) 
				return true; 
			return RequestStartPlayMode_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyLoadFinished_Function;
		virtual bool NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyLoadFinished_Function==nullptr) 
				return true; 
			return NotifyLoadFinished_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > LeaveBattleRoom_Function;
		virtual bool LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (LeaveBattleRoom_Function==nullptr) 
				return true; 
			return LeaveBattleRoom_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CStringW & , const D3DXVECTOR3 & , const float & ) > RequestLocalHeroSpawn_Function;
		virtual bool RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw) 
		{ 
			if (RequestLocalHeroSpawn_Function==nullptr) 
				return true; 
			return RequestLocalHeroSpawn_Function(remote,rmiContext, heroName, position, yaw); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > RequestBulletSpawn_Function;
		virtual bool RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (RequestBulletSpawn_Function==nullptr) 
				return true; 
			return RequestBulletSpawn_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & ) > LocalHero_Move_Function;
		virtual bool LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) 
		{ 
			if (LocalHero_Move_Function==nullptr) 
				return true; 
			return LocalHero_Move_Function(remote,rmiContext, position, velocity, yaw); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyGotoLobbyServer_Function;
		virtual bool NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyGotoLobbyServer_Function==nullptr) 
				return true; 
			return NotifyGotoLobbyServer_Function(remote,rmiContext); 
		}

	};
#endif

}


     
namespace BattleS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool NotifyUnauthedAccess ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyUnauthedAccess bool NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyUnauthedAccess(DerivedClass) bool DerivedClass::NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_NotifyUnauthedAccess NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool ShowError ( ::Proud::HostID, ::Proud::RmiContext& , const String & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_ShowError bool ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt) PN_OVERRIDE

#define DEFRMI_BattleS2C_ShowError(DerivedClass) bool DerivedClass::ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)
#define CALL_BattleS2C_ShowError ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)
#define PARAM_BattleS2C_ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)
               
		virtual bool NotifyNextLogonFailed ( ::Proud::HostID, ::Proud::RmiContext& , const ErrorType & , const CasualResult & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyNextLogonFailed bool NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyNextLogonFailed(DerivedClass) bool DerivedClass::NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason)
#define CALL_BattleS2C_NotifyNextLogonFailed NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason)
#define PARAM_BattleS2C_NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason)
               
		virtual bool NotifyNextLogonSuccess ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const CHeroPublishInfo & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyNextLogonSuccess bool NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyNextLogonSuccess(DerivedClass) bool DerivedClass::NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)
#define CALL_BattleS2C_NotifyNextLogonSuccess NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)
#define PARAM_BattleS2C_NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)
               
		virtual bool HeroSlot_Appear ( ::Proud::HostID, ::Proud::RmiContext& , const CHeroPublishInfo & , const HostID & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_HeroSlot_Appear bool HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID) PN_OVERRIDE

#define DEFRMI_BattleS2C_HeroSlot_Appear(DerivedClass) bool DerivedClass::HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID)
#define CALL_BattleS2C_HeroSlot_Appear HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID)
#define PARAM_BattleS2C_HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID)
               
		virtual bool HeroSlot_Disappear ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_HeroSlot_Disappear bool HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_OVERRIDE

#define DEFRMI_BattleS2C_HeroSlot_Disappear(DerivedClass) bool DerivedClass::HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)
#define CALL_BattleS2C_HeroSlot_Disappear HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)
#define PARAM_BattleS2C_HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)
               
		virtual bool HeroSlot_ShowState ( ::Proud::HostID, ::Proud::RmiContext& , const CHeroPublishInfo & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_HeroSlot_ShowState bool HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo) PN_OVERRIDE

#define DEFRMI_BattleS2C_HeroSlot_ShowState(DerivedClass) bool DerivedClass::HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo)
#define CALL_BattleS2C_HeroSlot_ShowState HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo)
#define PARAM_BattleS2C_HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo)
               
		virtual bool NotifyGameRoomInfo ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyGameRoomInfo bool NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyGameRoomInfo(DerivedClass) bool DerivedClass::NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)
#define CALL_BattleS2C_NotifyGameRoomInfo NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)
#define PARAM_BattleS2C_NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)
               
		virtual bool NotifyStartPlayModeFailed ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyStartPlayModeFailed bool NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyStartPlayModeFailed(DerivedClass) bool DerivedClass::NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_NotifyStartPlayModeFailed NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool GotoWaitingMode ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_GotoWaitingMode bool GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_GotoWaitingMode(DerivedClass) bool DerivedClass::GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_GotoWaitingMode GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool GotoLoadingMode ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_GotoLoadingMode bool GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_GotoLoadingMode(DerivedClass) bool DerivedClass::GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_GotoLoadingMode GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool GotoPlayMode ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_GotoPlayMode bool GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_GotoPlayMode(DerivedClass) bool DerivedClass::GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_GotoPlayMode GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyLocalHeroViewersGroupID bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyLocalHeroViewersGroupID(DerivedClass) bool DerivedClass::NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
#define CALL_BattleS2C_NotifyLocalHeroViewersGroupID NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
#define PARAM_BattleS2C_NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)
               
		virtual bool RemoteHero_Appear ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CStringW & , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_RemoteHero_Appear bool RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_OVERRIDE

#define DEFRMI_BattleS2C_RemoteHero_Appear(DerivedClass) bool DerivedClass::RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define CALL_BattleS2C_RemoteHero_Appear RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define PARAM_BattleS2C_RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
               
		virtual bool RemoteHero_Disappear ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_RemoteHero_Disappear bool RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID) PN_OVERRIDE

#define DEFRMI_BattleS2C_RemoteHero_Disappear(DerivedClass) bool DerivedClass::RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
#define CALL_BattleS2C_RemoteHero_Disappear RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
#define PARAM_BattleS2C_RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)
               
		virtual bool NotifyBullet_Create ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const DirectionState & , const float & , const D3DXVECTOR3 & , const D3DXVECTOR3 & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyBullet_Create bool NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyBullet_Create(DerivedClass) bool DerivedClass::NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
#define CALL_BattleS2C_NotifyBullet_Create NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
#define PARAM_BattleS2C_NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
               
		virtual bool NotifyBullet_Move ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const D3DXVECTOR3 & , const D3DXVECTOR3 & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyBullet_Move bool NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyBullet_Move(DerivedClass) bool DerivedClass::NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
#define CALL_BattleS2C_NotifyBullet_Move NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
#define PARAM_BattleS2C_NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)
               
		virtual bool NotifyBullet_Delete ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyBullet_Delete bool NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyBullet_Delete(DerivedClass) bool DerivedClass::NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
#define CALL_BattleS2C_NotifyBullet_Delete NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
#define PARAM_BattleS2C_NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
               
		virtual bool NotifyHeroScore ( ::Proud::HostID, ::Proud::RmiContext& , const LONGLONG & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyHeroScore bool NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyHeroScore(DerivedClass) bool DerivedClass::NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score)
#define CALL_BattleS2C_NotifyHeroScore NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score)
#define PARAM_BattleS2C_NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score)
               
		virtual bool NotyfyGotoLobby ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotyfyGotoLobby bool NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotyfyGotoLobby(DerivedClass) bool DerivedClass::NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_NotyfyGotoLobby NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool NotifyItem_Create ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const D3DXVECTOR3 & , const ItemType & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyItem_Create bool NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyItem_Create(DerivedClass) bool DerivedClass::NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type)
#define CALL_BattleS2C_NotifyItem_Create NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type)
#define PARAM_BattleS2C_NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type)
               
		virtual bool NotifyItem_Delete ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyItem_Delete bool NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyItem_Delete(DerivedClass) bool DerivedClass::NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
#define CALL_BattleS2C_NotifyItem_Delete NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
#define PARAM_BattleS2C_NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)
               
		virtual bool NotifyBullet_Clear ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_BattleS2C_NotifyBullet_Clear bool NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_BattleS2C_NotifyBullet_Clear(DerivedClass) bool DerivedClass::NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_BattleS2C_NotifyBullet_Clear NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_BattleS2C_NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_NotifyUnauthedAccess;
		static const PNTCHAR* RmiName_ShowError;
		static const PNTCHAR* RmiName_NotifyNextLogonFailed;
		static const PNTCHAR* RmiName_NotifyNextLogonSuccess;
		static const PNTCHAR* RmiName_HeroSlot_Appear;
		static const PNTCHAR* RmiName_HeroSlot_Disappear;
		static const PNTCHAR* RmiName_HeroSlot_ShowState;
		static const PNTCHAR* RmiName_NotifyGameRoomInfo;
		static const PNTCHAR* RmiName_NotifyStartPlayModeFailed;
		static const PNTCHAR* RmiName_GotoWaitingMode;
		static const PNTCHAR* RmiName_GotoLoadingMode;
		static const PNTCHAR* RmiName_GotoPlayMode;
		static const PNTCHAR* RmiName_NotifyLocalHeroViewersGroupID;
		static const PNTCHAR* RmiName_RemoteHero_Appear;
		static const PNTCHAR* RmiName_RemoteHero_Disappear;
		static const PNTCHAR* RmiName_NotifyBullet_Create;
		static const PNTCHAR* RmiName_NotifyBullet_Move;
		static const PNTCHAR* RmiName_NotifyBullet_Delete;
		static const PNTCHAR* RmiName_NotifyHeroScore;
		static const PNTCHAR* RmiName_NotyfyGotoLobby;
		static const PNTCHAR* RmiName_NotifyItem_Create;
		static const PNTCHAR* RmiName_NotifyItem_Delete;
		static const PNTCHAR* RmiName_NotifyBullet_Clear;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyUnauthedAccess_Function;
		virtual bool NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyUnauthedAccess_Function==nullptr) 
				return true; 
			return NotifyUnauthedAccess_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & ) > ShowError_Function;
		virtual bool ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt) 
		{ 
			if (ShowError_Function==nullptr) 
				return true; 
			return ShowError_Function(remote,rmiContext, errTxt); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const ErrorType & , const CasualResult & ) > NotifyNextLogonFailed_Function;
		virtual bool NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason) 
		{ 
			if (NotifyNextLogonFailed_Function==nullptr) 
				return true; 
			return NotifyNextLogonFailed_Function(remote,rmiContext, reason, moreReason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & , const CHeroPublishInfo & ) > NotifyNextLogonSuccess_Function;
		virtual bool NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo) 
		{ 
			if (NotifyNextLogonSuccess_Function==nullptr) 
				return true; 
			return NotifyNextLogonSuccess_Function(remote,rmiContext, Gamerguid, selectedHeroInfo); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CHeroPublishInfo & , const HostID & ) > HeroSlot_Appear_Function;
		virtual bool HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID) 
		{ 
			if (HeroSlot_Appear_Function==nullptr) 
				return true; 
			return HeroSlot_Appear_Function(remote,rmiContext, heroInfo, clientHostID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Guid & ) > HeroSlot_Disappear_Function;
		virtual bool HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) 
		{ 
			if (HeroSlot_Disappear_Function==nullptr) 
				return true; 
			return HeroSlot_Disappear_Function(remote,rmiContext, heroGuid); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CHeroPublishInfo & ) > HeroSlot_ShowState_Function;
		virtual bool HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo) 
		{ 
			if (HeroSlot_ShowState_Function==nullptr) 
				return true; 
			return HeroSlot_ShowState_Function(remote,rmiContext, heroInfo); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CGameRoomParameter & ) > NotifyGameRoomInfo_Function;
		virtual bool NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) 
		{ 
			if (NotifyGameRoomInfo_Function==nullptr) 
				return true; 
			return NotifyGameRoomInfo_Function(remote,rmiContext, info); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyStartPlayModeFailed_Function;
		virtual bool NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyStartPlayModeFailed_Function==nullptr) 
				return true; 
			return NotifyStartPlayModeFailed_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GotoWaitingMode_Function;
		virtual bool GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GotoWaitingMode_Function==nullptr) 
				return true; 
			return GotoWaitingMode_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GotoLoadingMode_Function;
		virtual bool GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GotoLoadingMode_Function==nullptr) 
				return true; 
			return GotoLoadingMode_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GotoPlayMode_Function;
		virtual bool GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GotoPlayMode_Function==nullptr) 
				return true; 
			return GotoPlayMode_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > NotifyLocalHeroViewersGroupID_Function;
		virtual bool NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID) 
		{ 
			if (NotifyLocalHeroViewersGroupID_Function==nullptr) 
				return true; 
			return NotifyLocalHeroViewersGroupID_Function(remote,rmiContext, localHeroViewersGroupID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CStringW & , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & ) > RemoteHero_Appear_Function;
		virtual bool RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) 
		{ 
			if (RemoteHero_Appear_Function==nullptr) 
				return true; 
			return RemoteHero_Appear_Function(remote,rmiContext, heroOwnerID, heroName, position, velocity, yaw); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > RemoteHero_Disappear_Function;
		virtual bool RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID) 
		{ 
			if (RemoteHero_Disappear_Function==nullptr) 
				return true; 
			return RemoteHero_Disappear_Function(remote,rmiContext, heroOwnerID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const DirectionState & , const float & , const D3DXVECTOR3 & , const D3DXVECTOR3 & ) > NotifyBullet_Create_Function;
		virtual bool NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) 
		{ 
			if (NotifyBullet_Create_Function==nullptr) 
				return true; 
			return NotifyBullet_Create_Function(remote,rmiContext, id, state, direction, position, velocity); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const D3DXVECTOR3 & , const D3DXVECTOR3 & ) > NotifyBullet_Move_Function;
		virtual bool NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity) 
		{ 
			if (NotifyBullet_Move_Function==nullptr) 
				return true; 
			return NotifyBullet_Move_Function(remote,rmiContext, id, speed, direction, position, velocity); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > NotifyBullet_Delete_Function;
		virtual bool NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) 
		{ 
			if (NotifyBullet_Delete_Function==nullptr) 
				return true; 
			return NotifyBullet_Delete_Function(remote,rmiContext, id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const LONGLONG & ) > NotifyHeroScore_Function;
		virtual bool NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score) 
		{ 
			if (NotifyHeroScore_Function==nullptr) 
				return true; 
			return NotifyHeroScore_Function(remote,rmiContext, score); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotyfyGotoLobby_Function;
		virtual bool NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotyfyGotoLobby_Function==nullptr) 
				return true; 
			return NotyfyGotoLobby_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const D3DXVECTOR3 & , const ItemType & ) > NotifyItem_Create_Function;
		virtual bool NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type) 
		{ 
			if (NotifyItem_Create_Function==nullptr) 
				return true; 
			return NotifyItem_Create_Function(remote,rmiContext, id, position, type); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > NotifyItem_Delete_Function;
		virtual bool NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id) 
		{ 
			if (NotifyItem_Delete_Function==nullptr) 
				return true; 
			return NotifyItem_Delete_Function(remote,rmiContext, id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyBullet_Clear_Function;
		virtual bool NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyBullet_Clear_Function==nullptr) 
				return true; 
			return NotifyBullet_Clear_Function(remote,rmiContext); 
		}

	};
#endif

}


     
namespace BattleC2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool P2P_Chat ( ::Proud::HostID, ::Proud::RmiContext& , const CStringW & )		{ 
			return false;
		} 

#define DECRMI_BattleC2C_P2P_Chat bool P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText) PN_OVERRIDE

#define DEFRMI_BattleC2C_P2P_Chat(DerivedClass) bool DerivedClass::P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText)
#define CALL_BattleC2C_P2P_Chat P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText)
#define PARAM_BattleC2C_P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText)
               
		virtual bool P2P_LocalHero_Move ( ::Proud::HostID, ::Proud::RmiContext& , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & )		{ 
			return false;
		} 

#define DECRMI_BattleC2C_P2P_LocalHero_Move bool P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) PN_OVERRIDE

#define DEFRMI_BattleC2C_P2P_LocalHero_Move(DerivedClass) bool DerivedClass::P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define CALL_BattleC2C_P2P_LocalHero_Move P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
#define PARAM_BattleC2C_P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_P2P_Chat;
		static const PNTCHAR* RmiName_P2P_LocalHero_Move;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CStringW & ) > P2P_Chat_Function;
		virtual bool P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText) 
		{ 
			if (P2P_Chat_Function==nullptr) 
				return true; 
			return P2P_Chat_Function(remote,rmiContext, chatText); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const D3DXVECTOR3 & , const D3DXVECTOR3 & , const float & ) > P2P_LocalHero_Move_Function;
		virtual bool P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw) 
		{ 
			if (P2P_LocalHero_Move_Function==nullptr) 
				return true; 
			return P2P_LocalHero_Move_Function(remote,rmiContext, position, velocity, yaw); 
		}

	};
#endif

}


