




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Lobby_proxy.h"

namespace LobbyC2S {


        
	bool Proxy::RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNextLogon;
__msg.Write(__msgid); 
	
__msg << credential;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNextLogon, (::Proud::RmiID)Rmi_RequestNextLogon);
	}

	bool Proxy::RequestNextLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNextLogon;
__msg.Write(__msgid); 
	
__msg << credential;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNextLogon, (::Proud::RmiID)Rmi_RequestNextLogon);
	}
        
	bool Proxy::NotifyChannelFormReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChannelFormReady;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyChannelFormReady, (::Proud::RmiID)Rmi_NotifyChannelFormReady);
	}

	bool Proxy::NotifyChannelFormReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChannelFormReady;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyChannelFormReady, (::Proud::RmiID)Rmi_NotifyChannelFormReady);
	}
        
	bool Proxy::Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << chatText;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}

	bool Proxy::Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & chatText)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Chat;
__msg.Write(__msgid); 
	
__msg << chatText;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Chat, (::Proud::RmiID)Rmi_Chat);
	}
        
	bool Proxy::RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & gameRoomParam)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateGameRoom;
__msg.Write(__msgid); 
	
__msg << gameRoomParam;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestCreateGameRoom, (::Proud::RmiID)Rmi_RequestCreateGameRoom);
	}

	bool Proxy::RequestCreateGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & gameRoomParam)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateGameRoom;
__msg.Write(__msgid); 
	
__msg << gameRoomParam;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestCreateGameRoom, (::Proud::RmiID)Rmi_RequestCreateGameRoom);
	}
        
	bool Proxy::RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CJoinGameRoomParameter & param)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestJoinGameRoom;
__msg.Write(__msgid); 
	
__msg << param;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestJoinGameRoom, (::Proud::RmiID)Rmi_RequestJoinGameRoom);
	}

	bool Proxy::RequestJoinGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CJoinGameRoomParameter & param)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestJoinGameRoom;
__msg.Write(__msgid); 
	
__msg << param;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestJoinGameRoom, (::Proud::RmiID)Rmi_RequestJoinGameRoom);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNextLogon =_PNT("RequestNextLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestNextLogon =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyChannelFormReady =_PNT("NotifyChannelFormReady");
#else
const PNTCHAR* Proxy::RmiName_NotifyChannelFormReady =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Chat =_PNT("Chat");
#else
const PNTCHAR* Proxy::RmiName_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestCreateGameRoom =_PNT("RequestCreateGameRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestCreateGameRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestJoinGameRoom =_PNT("RequestJoinGameRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestJoinGameRoom =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestNextLogon;

}


namespace LobbyS2C {


        
	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}

	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}
        
	bool Proxy::ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}

	bool Proxy::ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}
        
	bool Proxy::NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNextLogonFailed, (::Proud::RmiID)Rmi_NotifyNextLogonFailed);
	}

	bool Proxy::NotifyNextLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNextLogonFailed, (::Proud::RmiID)Rmi_NotifyNextLogonFailed);
	}
        
	bool Proxy::NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << selectedHeroInfo;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNextLogonSuccess, (::Proud::RmiID)Rmi_NotifyNextLogonSuccess);
	}

	bool Proxy::NotifyNextLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << selectedHeroInfo;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNextLogonSuccess, (::Proud::RmiID)Rmi_NotifyNextLogonSuccess);
	}
        
	bool Proxy::HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroSlot_Appear, (::Proud::RmiID)Rmi_HeroSlot_Appear);
	}

	bool Proxy::HeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroSlot_Appear, (::Proud::RmiID)Rmi_HeroSlot_Appear);
	}
        
	bool Proxy::HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Disappear;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroSlot_Disappear, (::Proud::RmiID)Rmi_HeroSlot_Disappear);
	}

	bool Proxy::HeroSlot_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Disappear;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroSlot_Disappear, (::Proud::RmiID)Rmi_HeroSlot_Disappear);
	}
        
	bool Proxy::GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_Appear, (::Proud::RmiID)Rmi_GameRoom_Appear);
	}

	bool Proxy::GameRoom_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_Appear, (::Proud::RmiID)Rmi_GameRoom_Appear);
	}
        
	bool Proxy::GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_ShowState;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_ShowState, (::Proud::RmiID)Rmi_GameRoom_ShowState);
	}

	bool Proxy::GameRoom_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_ShowState;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_ShowState, (::Proud::RmiID)Rmi_GameRoom_ShowState);
	}
        
	bool Proxy::GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Disappear;
__msg.Write(__msgid); 
	
__msg << roomGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GameRoom_Disappear, (::Proud::RmiID)Rmi_GameRoom_Disappear);
	}

	bool Proxy::GameRoom_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GameRoom_Disappear;
__msg.Write(__msgid); 
	
__msg << roomGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GameRoom_Disappear, (::Proud::RmiID)Rmi_GameRoom_Disappear);
	}
        
	bool Proxy::LocalHeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LocalHeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LocalHeroSlot_Appear, (::Proud::RmiID)Rmi_LocalHeroSlot_Appear);
	}

	bool Proxy::LocalHeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LocalHeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LocalHeroSlot_Appear, (::Proud::RmiID)Rmi_LocalHeroSlot_Appear);
	}
        
	bool Proxy::ShowChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid, const CStringW & chatText)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << heroGuid;
__msg << chatText;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}

	bool Proxy::ShowChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid, const CStringW & chatText)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowChat;
__msg.Write(__msgid); 
	
__msg << heroGuid;
__msg << chatText;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowChat, (::Proud::RmiID)Rmi_ShowChat);
	}
        
	bool Proxy::NotifyCreateRoomFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CasualResult & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateRoomFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateRoomFailed, (::Proud::RmiID)Rmi_NotifyCreateRoomFailed);
	}

	bool Proxy::NotifyCreateRoomFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CasualResult & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateRoomFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateRoomFailed, (::Proud::RmiID)Rmi_NotifyCreateRoomFailed);
	}
        
	bool Proxy::NotifyCreateRoomSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateRoomSuccess;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateRoomSuccess, (::Proud::RmiID)Rmi_NotifyCreateRoomSuccess);
	}

	bool Proxy::NotifyCreateRoomSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateRoomSuccess;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateRoomSuccess, (::Proud::RmiID)Rmi_NotifyCreateRoomSuccess);
	}
        
	bool Proxy::NotifyJoinRoomFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CasualResult & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinRoomFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyJoinRoomFailed, (::Proud::RmiID)Rmi_NotifyJoinRoomFailed);
	}

	bool Proxy::NotifyJoinRoomFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CasualResult & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinRoomFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyJoinRoomFailed, (::Proud::RmiID)Rmi_NotifyJoinRoomFailed);
	}
        
	bool Proxy::NotifyJoinRoomSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinRoomSuccess;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyJoinRoomSuccess, (::Proud::RmiID)Rmi_NotifyJoinRoomSuccess);
	}

	bool Proxy::NotifyJoinRoomSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJoinRoomSuccess;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyJoinRoomSuccess, (::Proud::RmiID)Rmi_NotifyJoinRoomSuccess);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("NotifyUnauthedAccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("ShowError");
#else
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNextLogonFailed =_PNT("NotifyNextLogonFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNextLogonFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNextLogonSuccess =_PNT("NotifyNextLogonSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNextLogonSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroSlot_Appear =_PNT("HeroSlot_Appear");
#else
const PNTCHAR* Proxy::RmiName_HeroSlot_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroSlot_Disappear =_PNT("HeroSlot_Disappear");
#else
const PNTCHAR* Proxy::RmiName_HeroSlot_Disappear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_Appear =_PNT("GameRoom_Appear");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_ShowState =_PNT("GameRoom_ShowState");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_ShowState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GameRoom_Disappear =_PNT("GameRoom_Disappear");
#else
const PNTCHAR* Proxy::RmiName_GameRoom_Disappear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LocalHeroSlot_Appear =_PNT("LocalHeroSlot_Appear");
#else
const PNTCHAR* Proxy::RmiName_LocalHeroSlot_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("ShowChat");
#else
const PNTCHAR* Proxy::RmiName_ShowChat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateRoomFailed =_PNT("NotifyCreateRoomFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateRoomFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateRoomSuccess =_PNT("NotifyCreateRoomSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateRoomSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyJoinRoomFailed =_PNT("NotifyJoinRoomFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyJoinRoomFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyJoinRoomSuccess =_PNT("NotifyJoinRoomSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyJoinRoomSuccess =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyUnauthedAccess;

}



