



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Lobby_common.h"

namespace LobbyC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential) PN_SEALED; 
	virtual bool RequestNextLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential)   PN_SEALED;  
	virtual bool NotifyChannelFormReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyChannelFormReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText) PN_SEALED; 
	virtual bool Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & chatText)   PN_SEALED;  
	virtual bool RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & gameRoomParam) PN_SEALED; 
	virtual bool RequestCreateGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & gameRoomParam)   PN_SEALED;  
	virtual bool RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CJoinGameRoomParameter & param) PN_SEALED; 
	virtual bool RequestJoinGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CJoinGameRoomParameter & param)   PN_SEALED;  
static const PNTCHAR* RmiName_RequestNextLogon;
static const PNTCHAR* RmiName_NotifyChannelFormReady;
static const PNTCHAR* RmiName_Chat;
static const PNTCHAR* RmiName_RequestCreateGameRoom;
static const PNTCHAR* RmiName_RequestJoinGameRoom;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace LobbyS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt) PN_SEALED; 
	virtual bool ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)   PN_SEALED;  
	virtual bool NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason) PN_SEALED; 
	virtual bool NotifyNextLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason)   PN_SEALED;  
	virtual bool NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo) PN_SEALED; 
	virtual bool NotifyNextLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)   PN_SEALED;  
	virtual bool HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & info) PN_SEALED; 
	virtual bool HeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & info)   PN_SEALED;  
	virtual bool HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid) PN_SEALED; 
	virtual bool HeroSlot_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)   PN_SEALED;  
	virtual bool GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_SEALED; 
	virtual bool GameRoom_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)   PN_SEALED;  
	virtual bool GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_SEALED; 
	virtual bool GameRoom_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)   PN_SEALED;  
	virtual bool GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid) PN_SEALED; 
	virtual bool GameRoom_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid)   PN_SEALED;  
	virtual bool LocalHeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & info) PN_SEALED; 
	virtual bool LocalHeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & info)   PN_SEALED;  
	virtual bool ShowChat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid, const CStringW & chatText) PN_SEALED; 
	virtual bool ShowChat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid, const CStringW & chatText)   PN_SEALED;  
	virtual bool NotifyCreateRoomFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CasualResult & reason) PN_SEALED; 
	virtual bool NotifyCreateRoomFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CasualResult & reason)   PN_SEALED;  
	virtual bool NotifyCreateRoomSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_SEALED; 
	virtual bool NotifyCreateRoomSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)   PN_SEALED;  
	virtual bool NotifyJoinRoomFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CasualResult & reason) PN_SEALED; 
	virtual bool NotifyJoinRoomFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CasualResult & reason)   PN_SEALED;  
	virtual bool NotifyJoinRoomSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info) PN_SEALED; 
	virtual bool NotifyJoinRoomSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)   PN_SEALED;  
static const PNTCHAR* RmiName_NotifyUnauthedAccess;
static const PNTCHAR* RmiName_ShowError;
static const PNTCHAR* RmiName_NotifyNextLogonFailed;
static const PNTCHAR* RmiName_NotifyNextLogonSuccess;
static const PNTCHAR* RmiName_HeroSlot_Appear;
static const PNTCHAR* RmiName_HeroSlot_Disappear;
static const PNTCHAR* RmiName_GameRoom_Appear;
static const PNTCHAR* RmiName_GameRoom_ShowState;
static const PNTCHAR* RmiName_GameRoom_Disappear;
static const PNTCHAR* RmiName_LocalHeroSlot_Appear;
static const PNTCHAR* RmiName_ShowChat;
static const PNTCHAR* RmiName_NotifyCreateRoomFailed;
static const PNTCHAR* RmiName_NotifyCreateRoomSuccess;
static const PNTCHAR* RmiName_NotifyJoinRoomFailed;
static const PNTCHAR* RmiName_NotifyJoinRoomSuccess;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



