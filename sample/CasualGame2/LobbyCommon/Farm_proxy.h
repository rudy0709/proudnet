



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Farm_common.h"

namespace FarmC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool RequestFarmLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & FarmName, const String & FarmClientName, const int & FarmClientType) PN_SEALED; 
	virtual bool RequestFarmLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & FarmName, const String & FarmClientName, const int & FarmClientType)   PN_SEALED;  
static const PNTCHAR* RmiName_RequestFarmLogon;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace FarmS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool NotifyFarmLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason) PN_SEALED; 
	virtual bool NotifyFarmLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason)   PN_SEALED;  
	virtual bool NotifyFarmLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyFarmLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
static const PNTCHAR* RmiName_NotifyFarmLogonFailed;
static const PNTCHAR* RmiName_NotifyFarmLogonSuccess;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace FarmC2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool NotifyFarmClientInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CFarmClientInfo & info) PN_SEALED; 
	virtual bool NotifyFarmClientInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CFarmClientInfo & info)   PN_SEALED;  
	virtual bool RequestCreateGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam) PN_SEALED; 
	virtual bool RequestCreateGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CGameRoomParameter & gameRoomParam)   PN_SEALED;  
	virtual bool NotifyCreateGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) PN_SEALED; 
	virtual bool NotifyCreateGameRoomResult ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)   PN_SEALED;  
	virtual bool GameRoom_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) PN_SEALED; 
	virtual bool GameRoom_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & roomInfo)   PN_SEALED;  
	virtual bool GameRoom_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & roomInfo) PN_SEALED; 
	virtual bool GameRoom_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & roomInfo)   PN_SEALED;  
	virtual bool GameRoom_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid) PN_SEALED; 
	virtual bool GameRoom_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid)   PN_SEALED;  
	virtual bool RequestJoinGameRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param) PN_SEALED; 
	virtual bool RequestJoinGameRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CJoinGameRoomParameter & param)   PN_SEALED;  
	virtual bool NotifyJoinGameRoomResult ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam) PN_SEALED; 
	virtual bool NotifyJoinGameRoomResult ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & requestedLobbyClientID, const CasualResult & result, const CGameRoomParameter & createdGameRoomParam)   PN_SEALED;  
	virtual bool NotifyStatusServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyStatusServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RequestCreateCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID, const HostID & UserHostID) PN_SEALED; 
	virtual bool RequestCreateCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerUUID, const HostID & UserHostID)   PN_SEALED;  
	virtual bool NotifyCreatedCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential, const HostID & UserHostID) PN_SEALED; 
	virtual bool NotifyCreatedCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential, const HostID & UserHostID)   PN_SEALED;  
	virtual bool RequestCheckCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & credential, const HostID & userHostID, const String & ServerName) PN_SEALED; 
	virtual bool RequestCheckCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & credential, const HostID & userHostID, const String & ServerName)   PN_SEALED;  
	virtual bool NotifyCheckCredentialSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerGuid, const HostID & userHostID) PN_SEALED; 
	virtual bool NotifyCheckCredentialSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerGuid, const HostID & userHostID)   PN_SEALED;  
	virtual bool NotifyCheckCredentialFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & userHostID) PN_SEALED; 
	virtual bool NotifyCheckCredentialFail ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & userHostID)   PN_SEALED;  
	virtual bool UserLogOut ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & gamerUUID) PN_SEALED; 
	virtual bool UserLogOut ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & gamerUUID)   PN_SEALED;  
static const PNTCHAR* RmiName_NotifyFarmClientInfo;
static const PNTCHAR* RmiName_RequestCreateGameRoom;
static const PNTCHAR* RmiName_NotifyCreateGameRoomResult;
static const PNTCHAR* RmiName_GameRoom_Appear;
static const PNTCHAR* RmiName_GameRoom_ShowState;
static const PNTCHAR* RmiName_GameRoom_Disappear;
static const PNTCHAR* RmiName_RequestJoinGameRoom;
static const PNTCHAR* RmiName_NotifyJoinGameRoomResult;
static const PNTCHAR* RmiName_NotifyStatusServer;
static const PNTCHAR* RmiName_RequestCreateCredential;
static const PNTCHAR* RmiName_NotifyCreatedCredential;
static const PNTCHAR* RmiName_RequestCheckCredential;
static const PNTCHAR* RmiName_NotifyCheckCredentialSuccess;
static const PNTCHAR* RmiName_NotifyCheckCredentialFail;
static const PNTCHAR* RmiName_UserLogOut;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



