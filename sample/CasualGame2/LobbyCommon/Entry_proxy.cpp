




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Entry_proxy.h"

namespace EntryC2S {


        
	bool Proxy::RequestReturnToEntry ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & credential)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestReturnToEntry;
__msg.Write(__msgid); 
	
__msg << credential;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestReturnToEntry, (::Proud::RmiID)Rmi_RequestReturnToEntry);
	}

	bool Proxy::RequestReturnToEntry ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & credential)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestReturnToEntry;
__msg.Write(__msgid); 
	
__msg << credential;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestReturnToEntry, (::Proud::RmiID)Rmi_RequestReturnToEntry);
	}
        
	bool Proxy::RequestCreateNewGamer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & gamerID, const String & Password)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateNewGamer;
__msg.Write(__msgid); 
	
__msg << gamerID;
__msg << Password;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestCreateNewGamer, (::Proud::RmiID)Rmi_RequestCreateNewGamer);
	}

	bool Proxy::RequestCreateNewGamer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & gamerID, const String & Password)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestCreateNewGamer;
__msg.Write(__msgid); 
	
__msg << gamerID;
__msg << Password;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestCreateNewGamer, (::Proud::RmiID)Rmi_RequestCreateNewGamer);
	}
        
	bool Proxy::RequestFirstLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & gamerID, const String & gamerPassword)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFirstLogon;
__msg.Write(__msgid); 
	
__msg << gamerID;
__msg << gamerPassword;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestFirstLogon, (::Proud::RmiID)Rmi_RequestFirstLogon);
	}

	bool Proxy::RequestFirstLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & gamerID, const String & gamerPassword)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFirstLogon;
__msg.Write(__msgid); 
	
__msg << gamerID;
__msg << gamerPassword;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestFirstLogon, (::Proud::RmiID)Rmi_RequestFirstLogon);
	}
        
	bool Proxy::RequestHeroSlots ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestHeroSlots;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestHeroSlots, (::Proud::RmiID)Rmi_RequestHeroSlots);
	}

	bool Proxy::RequestHeroSlots ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestHeroSlots;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestHeroSlots, (::Proud::RmiID)Rmi_RequestHeroSlots);
	}
        
	bool Proxy::RequestSelectHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSelectHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestSelectHero, (::Proud::RmiID)Rmi_RequestSelectHero);
	}

	bool Proxy::RequestSelectHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestSelectHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestSelectHero, (::Proud::RmiID)Rmi_RequestSelectHero);
	}
        
	bool Proxy::RequestAddHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const int & heroType)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddHero;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroType;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestAddHero, (::Proud::RmiID)Rmi_RequestAddHero);
	}

	bool Proxy::RequestAddHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const int & heroType)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddHero;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroType;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestAddHero, (::Proud::RmiID)Rmi_RequestAddHero);
	}
        
	bool Proxy::RequestRemoveHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestRemoveHero, (::Proud::RmiID)Rmi_RequestRemoveHero);
	}

	bool Proxy::RequestRemoveHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestRemoveHero, (::Proud::RmiID)Rmi_RequestRemoveHero);
	}
        
	bool Proxy::RequestLobbyList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLobbyList;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLobbyList, (::Proud::RmiID)Rmi_RequestLobbyList);
	}

	bool Proxy::RequestLobbyList ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLobbyList;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLobbyList, (::Proud::RmiID)Rmi_RequestLobbyList);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestReturnToEntry =_PNT("RequestReturnToEntry");
#else
const PNTCHAR* Proxy::RmiName_RequestReturnToEntry =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestCreateNewGamer =_PNT("RequestCreateNewGamer");
#else
const PNTCHAR* Proxy::RmiName_RequestCreateNewGamer =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestFirstLogon =_PNT("RequestFirstLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestFirstLogon =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestHeroSlots =_PNT("RequestHeroSlots");
#else
const PNTCHAR* Proxy::RmiName_RequestHeroSlots =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestSelectHero =_PNT("RequestSelectHero");
#else
const PNTCHAR* Proxy::RmiName_RequestSelectHero =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestAddHero =_PNT("RequestAddHero");
#else
const PNTCHAR* Proxy::RmiName_RequestAddHero =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestRemoveHero =_PNT("RequestRemoveHero");
#else
const PNTCHAR* Proxy::RmiName_RequestRemoveHero =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLobbyList =_PNT("RequestLobbyList");
#else
const PNTCHAR* Proxy::RmiName_RequestLobbyList =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestReturnToEntry;

}


namespace EntryS2C {


        
	bool Proxy::NotifyCreateNewGamerSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateNewGamerSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateNewGamerSuccess, (::Proud::RmiID)Rmi_NotifyCreateNewGamerSuccess);
	}

	bool Proxy::NotifyCreateNewGamerSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateNewGamerSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateNewGamerSuccess, (::Proud::RmiID)Rmi_NotifyCreateNewGamerSuccess);
	}
        
	bool Proxy::NotifyCreateNewGamerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateNewGamerFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCreateNewGamerFailed, (::Proud::RmiID)Rmi_NotifyCreateNewGamerFailed);
	}

	bool Proxy::NotifyCreateNewGamerFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCreateNewGamerFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCreateNewGamerFailed, (::Proud::RmiID)Rmi_NotifyCreateNewGamerFailed);
	}
        
	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}

	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}
        
	bool Proxy::ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}

	bool Proxy::ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}
        
	bool Proxy::NotifyFirstLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFirstLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyFirstLogonFailed, (::Proud::RmiID)Rmi_NotifyFirstLogonFailed);
	}

	bool Proxy::NotifyFirstLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFirstLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyFirstLogonFailed, (::Proud::RmiID)Rmi_NotifyFirstLogonFailed);
	}
        
	bool Proxy::NotifyReturnToEntryFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyReturnToEntryFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyReturnToEntryFailed, (::Proud::RmiID)Rmi_NotifyReturnToEntryFailed);
	}

	bool Proxy::NotifyReturnToEntryFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyReturnToEntryFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyReturnToEntryFailed, (::Proud::RmiID)Rmi_NotifyReturnToEntryFailed);
	}
        
	bool Proxy::NotifyFirstLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const Guid & credential)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFirstLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << credential;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyFirstLogonSuccess, (::Proud::RmiID)Rmi_NotifyFirstLogonSuccess);
	}

	bool Proxy::NotifyFirstLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const Guid & credential)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyFirstLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << credential;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyFirstLogonSuccess, (::Proud::RmiID)Rmi_NotifyFirstLogonSuccess);
	}
        
	bool Proxy::NotifySelectHeroFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectHeroFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySelectHeroFailed, (::Proud::RmiID)Rmi_NotifySelectHeroFailed);
	}

	bool Proxy::NotifySelectHeroFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectHeroFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySelectHeroFailed, (::Proud::RmiID)Rmi_NotifySelectHeroFailed);
	}
        
	bool Proxy::NotifySelectHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroname)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectHeroSuccess;
__msg.Write(__msgid); 
	
__msg << heroname;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySelectHeroSuccess, (::Proud::RmiID)Rmi_NotifySelectHeroSuccess);
	}

	bool Proxy::NotifySelectHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroname)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectHeroSuccess;
__msg.Write(__msgid); 
	
__msg << heroname;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySelectHeroSuccess, (::Proud::RmiID)Rmi_NotifySelectHeroSuccess);
	}
        
	bool Proxy::HeroList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroList_Begin, (::Proud::RmiID)Rmi_HeroList_Begin);
	}

	bool Proxy::HeroList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroList_Begin, (::Proud::RmiID)Rmi_HeroList_Begin);
	}
        
	bool Proxy::HeroList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const Guid & heroGuid, const int & heroType, const LONGLONG & heroScore)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_Add;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroGuid;
__msg << heroType;
__msg << heroScore;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroList_Add, (::Proud::RmiID)Rmi_HeroList_Add);
	}

	bool Proxy::HeroList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const Guid & heroGuid, const int & heroType, const LONGLONG & heroScore)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_Add;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroGuid;
__msg << heroType;
__msg << heroScore;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroList_Add, (::Proud::RmiID)Rmi_HeroList_Add);
	}
        
	bool Proxy::HeroList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroList_End, (::Proud::RmiID)Rmi_HeroList_End);
	}

	bool Proxy::HeroList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroList_End, (::Proud::RmiID)Rmi_HeroList_End);
	}
        
	bool Proxy::RemovedHeroList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemovedHeroList_Begin, (::Proud::RmiID)Rmi_RemovedHeroList_Begin);
	}

	bool Proxy::RemovedHeroList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemovedHeroList_Begin, (::Proud::RmiID)Rmi_RemovedHeroList_Begin);
	}
        
	bool Proxy::RemovedHeroList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_Add;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemovedHeroList_Add, (::Proud::RmiID)Rmi_RemovedHeroList_Add);
	}

	bool Proxy::RemovedHeroList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_Add;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemovedHeroList_Add, (::Proud::RmiID)Rmi_RemovedHeroList_Add);
	}
        
	bool Proxy::RemovedHeroList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemovedHeroList_End, (::Proud::RmiID)Rmi_RemovedHeroList_End);
	}

	bool Proxy::RemovedHeroList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemovedHeroList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemovedHeroList_End, (::Proud::RmiID)Rmi_RemovedHeroList_End);
	}
        
	bool Proxy::NotifySelectedHero ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectedHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySelectedHero, (::Proud::RmiID)Rmi_NotifySelectedHero);
	}

	bool Proxy::NotifySelectedHero ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySelectedHero;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySelectedHero, (::Proud::RmiID)Rmi_NotifySelectedHero);
	}
        
	bool Proxy::NotifyAddHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddHeroSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAddHeroSuccess, (::Proud::RmiID)Rmi_NotifyAddHeroSuccess);
	}

	bool Proxy::NotifyAddHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddHeroSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAddHeroSuccess, (::Proud::RmiID)Rmi_NotifyAddHeroSuccess);
	}
        
	bool Proxy::NotifyAddHeroFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddHeroFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAddHeroFailed, (::Proud::RmiID)Rmi_NotifyAddHeroFailed);
	}

	bool Proxy::NotifyAddHeroFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddHeroFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAddHeroFailed, (::Proud::RmiID)Rmi_NotifyAddHeroFailed);
	}
        
	bool Proxy::NotifyRemoveHeroSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveHeroSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyRemoveHeroSuccess, (::Proud::RmiID)Rmi_NotifyRemoveHeroSuccess);
	}

	bool Proxy::NotifyRemoveHeroSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveHeroSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyRemoveHeroSuccess, (::Proud::RmiID)Rmi_NotifyRemoveHeroSuccess);
	}
        
	bool Proxy::LobbyList_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LobbyList_Begin, (::Proud::RmiID)Rmi_LobbyList_Begin);
	}

	bool Proxy::LobbyList_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_Begin;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LobbyList_Begin, (::Proud::RmiID)Rmi_LobbyList_Begin);
	}
        
	bool Proxy::LobbyList_Add ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & lobbyName, const NamedAddrPort & serverAddr, const int & gamerCount)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_Add;
__msg.Write(__msgid); 
	
__msg << lobbyName;
__msg << serverAddr;
__msg << gamerCount;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LobbyList_Add, (::Proud::RmiID)Rmi_LobbyList_Add);
	}

	bool Proxy::LobbyList_Add ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & lobbyName, const NamedAddrPort & serverAddr, const int & gamerCount)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_Add;
__msg.Write(__msgid); 
	
__msg << lobbyName;
__msg << serverAddr;
__msg << gamerCount;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LobbyList_Add, (::Proud::RmiID)Rmi_LobbyList_Add);
	}
        
	bool Proxy::LobbyList_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LobbyList_End, (::Proud::RmiID)Rmi_LobbyList_End);
	}

	bool Proxy::LobbyList_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LobbyList_End;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LobbyList_End, (::Proud::RmiID)Rmi_LobbyList_End);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateNewGamerSuccess =_PNT("NotifyCreateNewGamerSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateNewGamerSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCreateNewGamerFailed =_PNT("NotifyCreateNewGamerFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyCreateNewGamerFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("NotifyUnauthedAccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("ShowError");
#else
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyFirstLogonFailed =_PNT("NotifyFirstLogonFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyFirstLogonFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyReturnToEntryFailed =_PNT("NotifyReturnToEntryFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyReturnToEntryFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyFirstLogonSuccess =_PNT("NotifyFirstLogonSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyFirstLogonSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySelectHeroFailed =_PNT("NotifySelectHeroFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifySelectHeroFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySelectHeroSuccess =_PNT("NotifySelectHeroSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifySelectHeroSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroList_Begin =_PNT("HeroList_Begin");
#else
const PNTCHAR* Proxy::RmiName_HeroList_Begin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroList_Add =_PNT("HeroList_Add");
#else
const PNTCHAR* Proxy::RmiName_HeroList_Add =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroList_End =_PNT("HeroList_End");
#else
const PNTCHAR* Proxy::RmiName_HeroList_End =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemovedHeroList_Begin =_PNT("RemovedHeroList_Begin");
#else
const PNTCHAR* Proxy::RmiName_RemovedHeroList_Begin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemovedHeroList_Add =_PNT("RemovedHeroList_Add");
#else
const PNTCHAR* Proxy::RmiName_RemovedHeroList_Add =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemovedHeroList_End =_PNT("RemovedHeroList_End");
#else
const PNTCHAR* Proxy::RmiName_RemovedHeroList_End =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySelectedHero =_PNT("NotifySelectedHero");
#else
const PNTCHAR* Proxy::RmiName_NotifySelectedHero =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAddHeroSuccess =_PNT("NotifyAddHeroSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyAddHeroSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAddHeroFailed =_PNT("NotifyAddHeroFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyAddHeroFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyRemoveHeroSuccess =_PNT("NotifyRemoveHeroSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyRemoveHeroSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LobbyList_Begin =_PNT("LobbyList_Begin");
#else
const PNTCHAR* Proxy::RmiName_LobbyList_Begin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LobbyList_Add =_PNT("LobbyList_Add");
#else
const PNTCHAR* Proxy::RmiName_LobbyList_Add =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LobbyList_End =_PNT("LobbyList_End");
#else
const PNTCHAR* Proxy::RmiName_LobbyList_End =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyCreateNewGamerSuccess;

}



