




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Battle_proxy.h"

namespace BattleC2S {


        
	bool Proxy::RequestNextLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & roomGuid, const Guid & credential)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNextLogon;
__msg.Write(__msgid); 
	
__msg << roomGuid;
__msg << credential;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNextLogon, (::Proud::RmiID)Rmi_RequestNextLogon);
	}

	bool Proxy::RequestNextLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & roomGuid, const Guid & credential)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNextLogon;
__msg.Write(__msgid); 
	
__msg << roomGuid;
__msg << credential;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNextLogon, (::Proud::RmiID)Rmi_RequestNextLogon);
	}
        
	bool Proxy::RequestToggleBattleReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestToggleBattleReady;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestToggleBattleReady, (::Proud::RmiID)Rmi_RequestToggleBattleReady);
	}

	bool Proxy::RequestToggleBattleReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestToggleBattleReady;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestToggleBattleReady, (::Proud::RmiID)Rmi_RequestToggleBattleReady);
	}
        
	bool Proxy::RequestStartPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestStartPlayMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestStartPlayMode, (::Proud::RmiID)Rmi_RequestStartPlayMode);
	}

	bool Proxy::RequestStartPlayMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestStartPlayMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestStartPlayMode, (::Proud::RmiID)Rmi_RequestStartPlayMode);
	}
        
	bool Proxy::NotifyLoadFinished ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoadFinished;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoadFinished, (::Proud::RmiID)Rmi_NotifyLoadFinished);
	}

	bool Proxy::NotifyLoadFinished ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoadFinished;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoadFinished, (::Proud::RmiID)Rmi_NotifyLoadFinished);
	}
        
	bool Proxy::LeaveBattleRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LeaveBattleRoom;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LeaveBattleRoom, (::Proud::RmiID)Rmi_LeaveBattleRoom);
	}

	bool Proxy::LeaveBattleRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LeaveBattleRoom;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LeaveBattleRoom, (::Proud::RmiID)Rmi_LeaveBattleRoom);
	}
        
	bool Proxy::RequestLocalHeroSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLocalHeroSpawn;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << position;
__msg << yaw;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLocalHeroSpawn, (::Proud::RmiID)Rmi_RequestLocalHeroSpawn);
	}

	bool Proxy::RequestLocalHeroSpawn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & heroName, const D3DXVECTOR3 & position, const float & yaw)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLocalHeroSpawn;
__msg.Write(__msgid); 
	
__msg << heroName;
__msg << position;
__msg << yaw;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLocalHeroSpawn, (::Proud::RmiID)Rmi_RequestLocalHeroSpawn);
	}
        
	bool Proxy::RequestBulletSpawn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestBulletSpawn;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestBulletSpawn, (::Proud::RmiID)Rmi_RequestBulletSpawn);
	}

	bool Proxy::RequestBulletSpawn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestBulletSpawn;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestBulletSpawn, (::Proud::RmiID)Rmi_RequestBulletSpawn);
	}
        
	bool Proxy::LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LocalHero_Move;
__msg.Write(__msgid); 
	
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_LocalHero_Move, (::Proud::RmiID)Rmi_LocalHero_Move);
	}

	bool Proxy::LocalHero_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_LocalHero_Move;
__msg.Write(__msgid); 
	
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_LocalHero_Move, (::Proud::RmiID)Rmi_LocalHero_Move);
	}
        
	bool Proxy::NotifyGotoLobbyServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGotoLobbyServer;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGotoLobbyServer, (::Proud::RmiID)Rmi_NotifyGotoLobbyServer);
	}

	bool Proxy::NotifyGotoLobbyServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGotoLobbyServer;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGotoLobbyServer, (::Proud::RmiID)Rmi_NotifyGotoLobbyServer);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNextLogon =_PNT("RequestNextLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestNextLogon =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestToggleBattleReady =_PNT("RequestToggleBattleReady");
#else
const PNTCHAR* Proxy::RmiName_RequestToggleBattleReady =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestStartPlayMode =_PNT("RequestStartPlayMode");
#else
const PNTCHAR* Proxy::RmiName_RequestStartPlayMode =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoadFinished =_PNT("NotifyLoadFinished");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoadFinished =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LeaveBattleRoom =_PNT("LeaveBattleRoom");
#else
const PNTCHAR* Proxy::RmiName_LeaveBattleRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLocalHeroSpawn =_PNT("RequestLocalHeroSpawn");
#else
const PNTCHAR* Proxy::RmiName_RequestLocalHeroSpawn =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestBulletSpawn =_PNT("RequestBulletSpawn");
#else
const PNTCHAR* Proxy::RmiName_RequestBulletSpawn =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_LocalHero_Move =_PNT("LocalHero_Move");
#else
const PNTCHAR* Proxy::RmiName_LocalHero_Move =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGotoLobbyServer =_PNT("NotifyGotoLobbyServer");
#else
const PNTCHAR* Proxy::RmiName_NotifyGotoLobbyServer =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestNextLogon;

}


namespace BattleS2C {


        
	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}

	bool Proxy::NotifyUnauthedAccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnauthedAccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUnauthedAccess, (::Proud::RmiID)Rmi_NotifyUnauthedAccess);
	}
        
	bool Proxy::ShowError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & errTxt)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}

	bool Proxy::ShowError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & errTxt)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShowError;
__msg.Write(__msgid); 
	
__msg << errTxt;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShowError, (::Proud::RmiID)Rmi_ShowError);
	}
        
	bool Proxy::NotifyNextLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const ErrorType & reason, const CasualResult & moreReason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
__msg << moreReason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNextLogonFailed, (::Proud::RmiID)Rmi_NotifyNextLogonFailed);
	}

	bool Proxy::NotifyNextLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const ErrorType & reason, const CasualResult & moreReason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
__msg << moreReason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNextLogonFailed, (::Proud::RmiID)Rmi_NotifyNextLogonFailed);
	}
        
	bool Proxy::NotifyNextLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << selectedHeroInfo;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNextLogonSuccess, (::Proud::RmiID)Rmi_NotifyNextLogonSuccess);
	}

	bool Proxy::NotifyNextLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & Gamerguid, const CHeroPublishInfo & selectedHeroInfo)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNextLogonSuccess;
__msg.Write(__msgid); 
	
__msg << Gamerguid;
__msg << selectedHeroInfo;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNextLogonSuccess, (::Proud::RmiID)Rmi_NotifyNextLogonSuccess);
	}
        
	bool Proxy::HeroSlot_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo, const HostID & clientHostID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << heroInfo;
__msg << clientHostID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroSlot_Appear, (::Proud::RmiID)Rmi_HeroSlot_Appear);
	}

	bool Proxy::HeroSlot_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & heroInfo, const HostID & clientHostID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Appear;
__msg.Write(__msgid); 
	
__msg << heroInfo;
__msg << clientHostID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroSlot_Appear, (::Proud::RmiID)Rmi_HeroSlot_Appear);
	}
        
	bool Proxy::HeroSlot_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Guid & heroGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Disappear;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroSlot_Disappear, (::Proud::RmiID)Rmi_HeroSlot_Disappear);
	}

	bool Proxy::HeroSlot_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Guid & heroGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_Disappear;
__msg.Write(__msgid); 
	
__msg << heroGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroSlot_Disappear, (::Proud::RmiID)Rmi_HeroSlot_Disappear);
	}
        
	bool Proxy::HeroSlot_ShowState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CHeroPublishInfo & heroInfo)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_ShowState;
__msg.Write(__msgid); 
	
__msg << heroInfo;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HeroSlot_ShowState, (::Proud::RmiID)Rmi_HeroSlot_ShowState);
	}

	bool Proxy::HeroSlot_ShowState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CHeroPublishInfo & heroInfo)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HeroSlot_ShowState;
__msg.Write(__msgid); 
	
__msg << heroInfo;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HeroSlot_ShowState, (::Proud::RmiID)Rmi_HeroSlot_ShowState);
	}
        
	bool Proxy::NotifyGameRoomInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CGameRoomParameter & info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameRoomInfo;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyGameRoomInfo, (::Proud::RmiID)Rmi_NotifyGameRoomInfo);
	}

	bool Proxy::NotifyGameRoomInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CGameRoomParameter & info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyGameRoomInfo;
__msg.Write(__msgid); 
	
__msg << info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyGameRoomInfo, (::Proud::RmiID)Rmi_NotifyGameRoomInfo);
	}
        
	bool Proxy::NotifyStartPlayModeFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartPlayModeFailed;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyStartPlayModeFailed, (::Proud::RmiID)Rmi_NotifyStartPlayModeFailed);
	}

	bool Proxy::NotifyStartPlayModeFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyStartPlayModeFailed;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyStartPlayModeFailed, (::Proud::RmiID)Rmi_NotifyStartPlayModeFailed);
	}
        
	bool Proxy::GotoWaitingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoWaitingMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GotoWaitingMode, (::Proud::RmiID)Rmi_GotoWaitingMode);
	}

	bool Proxy::GotoWaitingMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoWaitingMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GotoWaitingMode, (::Proud::RmiID)Rmi_GotoWaitingMode);
	}
        
	bool Proxy::GotoLoadingMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoLoadingMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GotoLoadingMode, (::Proud::RmiID)Rmi_GotoLoadingMode);
	}

	bool Proxy::GotoLoadingMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoLoadingMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GotoLoadingMode, (::Proud::RmiID)Rmi_GotoLoadingMode);
	}
        
	bool Proxy::GotoPlayMode ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoPlayMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_GotoPlayMode, (::Proud::RmiID)Rmi_GotoPlayMode);
	}

	bool Proxy::GotoPlayMode ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_GotoPlayMode;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_GotoPlayMode, (::Proud::RmiID)Rmi_GotoPlayMode);
	}
        
	bool Proxy::NotifyLocalHeroViewersGroupID ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & localHeroViewersGroupID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLocalHeroViewersGroupID;
__msg.Write(__msgid); 
	
__msg << localHeroViewersGroupID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLocalHeroViewersGroupID, (::Proud::RmiID)Rmi_NotifyLocalHeroViewersGroupID);
	}

	bool Proxy::NotifyLocalHeroViewersGroupID ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & localHeroViewersGroupID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLocalHeroViewersGroupID;
__msg.Write(__msgid); 
	
__msg << localHeroViewersGroupID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLocalHeroViewersGroupID, (::Proud::RmiID)Rmi_NotifyLocalHeroViewersGroupID);
	}
        
	bool Proxy::RemoteHero_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoteHero_Appear;
__msg.Write(__msgid); 
	
__msg << heroOwnerID;
__msg << heroName;
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemoteHero_Appear, (::Proud::RmiID)Rmi_RemoteHero_Appear);
	}

	bool Proxy::RemoteHero_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & heroOwnerID, const CStringW & heroName, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoteHero_Appear;
__msg.Write(__msgid); 
	
__msg << heroOwnerID;
__msg << heroName;
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemoteHero_Appear, (::Proud::RmiID)Rmi_RemoteHero_Appear);
	}
        
	bool Proxy::RemoteHero_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & heroOwnerID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoteHero_Disappear;
__msg.Write(__msgid); 
	
__msg << heroOwnerID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemoteHero_Disappear, (::Proud::RmiID)Rmi_RemoteHero_Disappear);
	}

	bool Proxy::RemoteHero_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & heroOwnerID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoteHero_Disappear;
__msg.Write(__msgid); 
	
__msg << heroOwnerID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemoteHero_Disappear, (::Proud::RmiID)Rmi_RemoteHero_Disappear);
	}
        
	bool Proxy::NotifyBullet_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Create;
__msg.Write(__msgid); 
	
__msg << id;
__msg << state;
__msg << direction;
__msg << position;
__msg << velocity;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyBullet_Create, (::Proud::RmiID)Rmi_NotifyBullet_Create);
	}

	bool Proxy::NotifyBullet_Create ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const DirectionState & state, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Create;
__msg.Write(__msgid); 
	
__msg << id;
__msg << state;
__msg << direction;
__msg << position;
__msg << velocity;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyBullet_Create, (::Proud::RmiID)Rmi_NotifyBullet_Create);
	}
        
	bool Proxy::NotifyBullet_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Move;
__msg.Write(__msgid); 
	
__msg << id;
__msg << speed;
__msg << direction;
__msg << position;
__msg << velocity;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyBullet_Move, (::Proud::RmiID)Rmi_NotifyBullet_Move);
	}

	bool Proxy::NotifyBullet_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const float & speed, const float & direction, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Move;
__msg.Write(__msgid); 
	
__msg << id;
__msg << speed;
__msg << direction;
__msg << position;
__msg << velocity;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyBullet_Move, (::Proud::RmiID)Rmi_NotifyBullet_Move);
	}
        
	bool Proxy::NotifyBullet_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Delete;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyBullet_Delete, (::Proud::RmiID)Rmi_NotifyBullet_Delete);
	}

	bool Proxy::NotifyBullet_Delete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Delete;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyBullet_Delete, (::Proud::RmiID)Rmi_NotifyBullet_Delete);
	}
        
	bool Proxy::NotifyHeroScore ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const LONGLONG & score)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyHeroScore;
__msg.Write(__msgid); 
	
__msg << score;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyHeroScore, (::Proud::RmiID)Rmi_NotifyHeroScore);
	}

	bool Proxy::NotifyHeroScore ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const LONGLONG & score)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyHeroScore;
__msg.Write(__msgid); 
	
__msg << score;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyHeroScore, (::Proud::RmiID)Rmi_NotifyHeroScore);
	}
        
	bool Proxy::NotyfyGotoLobby ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotyfyGotoLobby;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotyfyGotoLobby, (::Proud::RmiID)Rmi_NotyfyGotoLobby);
	}

	bool Proxy::NotyfyGotoLobby ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotyfyGotoLobby;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotyfyGotoLobby, (::Proud::RmiID)Rmi_NotyfyGotoLobby);
	}
        
	bool Proxy::NotifyItem_Create ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id, const D3DXVECTOR3 & position, const ItemType & type)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyItem_Create;
__msg.Write(__msgid); 
	
__msg << id;
__msg << position;
__msg << type;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyItem_Create, (::Proud::RmiID)Rmi_NotifyItem_Create);
	}

	bool Proxy::NotifyItem_Create ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id, const D3DXVECTOR3 & position, const ItemType & type)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyItem_Create;
__msg.Write(__msgid); 
	
__msg << id;
__msg << position;
__msg << type;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyItem_Create, (::Proud::RmiID)Rmi_NotifyItem_Create);
	}
        
	bool Proxy::NotifyItem_Delete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyItem_Delete;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyItem_Delete, (::Proud::RmiID)Rmi_NotifyItem_Delete);
	}

	bool Proxy::NotifyItem_Delete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyItem_Delete;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyItem_Delete, (::Proud::RmiID)Rmi_NotifyItem_Delete);
	}
        
	bool Proxy::NotifyBullet_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Clear;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyBullet_Clear, (::Proud::RmiID)Rmi_NotifyBullet_Clear);
	}

	bool Proxy::NotifyBullet_Clear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyBullet_Clear;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyBullet_Clear, (::Proud::RmiID)Rmi_NotifyBullet_Clear);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("NotifyUnauthedAccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyUnauthedAccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("ShowError");
#else
const PNTCHAR* Proxy::RmiName_ShowError =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNextLogonFailed =_PNT("NotifyNextLogonFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNextLogonFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNextLogonSuccess =_PNT("NotifyNextLogonSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNextLogonSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroSlot_Appear =_PNT("HeroSlot_Appear");
#else
const PNTCHAR* Proxy::RmiName_HeroSlot_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroSlot_Disappear =_PNT("HeroSlot_Disappear");
#else
const PNTCHAR* Proxy::RmiName_HeroSlot_Disappear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HeroSlot_ShowState =_PNT("HeroSlot_ShowState");
#else
const PNTCHAR* Proxy::RmiName_HeroSlot_ShowState =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyGameRoomInfo =_PNT("NotifyGameRoomInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyGameRoomInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyStartPlayModeFailed =_PNT("NotifyStartPlayModeFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyStartPlayModeFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GotoWaitingMode =_PNT("GotoWaitingMode");
#else
const PNTCHAR* Proxy::RmiName_GotoWaitingMode =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GotoLoadingMode =_PNT("GotoLoadingMode");
#else
const PNTCHAR* Proxy::RmiName_GotoLoadingMode =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_GotoPlayMode =_PNT("GotoPlayMode");
#else
const PNTCHAR* Proxy::RmiName_GotoPlayMode =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLocalHeroViewersGroupID =_PNT("NotifyLocalHeroViewersGroupID");
#else
const PNTCHAR* Proxy::RmiName_NotifyLocalHeroViewersGroupID =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemoteHero_Appear =_PNT("RemoteHero_Appear");
#else
const PNTCHAR* Proxy::RmiName_RemoteHero_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemoteHero_Disappear =_PNT("RemoteHero_Disappear");
#else
const PNTCHAR* Proxy::RmiName_RemoteHero_Disappear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyBullet_Create =_PNT("NotifyBullet_Create");
#else
const PNTCHAR* Proxy::RmiName_NotifyBullet_Create =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyBullet_Move =_PNT("NotifyBullet_Move");
#else
const PNTCHAR* Proxy::RmiName_NotifyBullet_Move =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyBullet_Delete =_PNT("NotifyBullet_Delete");
#else
const PNTCHAR* Proxy::RmiName_NotifyBullet_Delete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyHeroScore =_PNT("NotifyHeroScore");
#else
const PNTCHAR* Proxy::RmiName_NotifyHeroScore =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotyfyGotoLobby =_PNT("NotyfyGotoLobby");
#else
const PNTCHAR* Proxy::RmiName_NotyfyGotoLobby =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyItem_Create =_PNT("NotifyItem_Create");
#else
const PNTCHAR* Proxy::RmiName_NotifyItem_Create =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyItem_Delete =_PNT("NotifyItem_Delete");
#else
const PNTCHAR* Proxy::RmiName_NotifyItem_Delete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyBullet_Clear =_PNT("NotifyBullet_Clear");
#else
const PNTCHAR* Proxy::RmiName_NotifyBullet_Clear =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyUnauthedAccess;

}


namespace BattleC2C {


        
	bool Proxy::P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CStringW & chatText)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_Chat;
__msg.Write(__msgid); 
	
__msg << chatText;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_Chat, (::Proud::RmiID)Rmi_P2P_Chat);
	}

	bool Proxy::P2P_Chat ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CStringW & chatText)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_Chat;
__msg.Write(__msgid); 
	
__msg << chatText;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_Chat, (::Proud::RmiID)Rmi_P2P_Chat);
	}
        
	bool Proxy::P2P_LocalHero_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_LocalHero_Move;
__msg.Write(__msgid); 
	
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_LocalHero_Move, (::Proud::RmiID)Rmi_P2P_LocalHero_Move);
	}

	bool Proxy::P2P_LocalHero_Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const D3DXVECTOR3 & position, const D3DXVECTOR3 & velocity, const float & yaw)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_LocalHero_Move;
__msg.Write(__msgid); 
	
__msg << position;
__msg << velocity;
__msg << yaw;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_LocalHero_Move, (::Proud::RmiID)Rmi_P2P_LocalHero_Move);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_Chat =_PNT("P2P_Chat");
#else
const PNTCHAR* Proxy::RmiName_P2P_Chat =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_LocalHero_Move =_PNT("P2P_LocalHero_Move");
#else
const PNTCHAR* Proxy::RmiName_P2P_LocalHero_Move =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_P2P_Chat;

}



