  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "ChatC2C_common.h"

     
namespace ChatC2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool P2P_Chat ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_ChatC2C_P2P_Chat bool P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID, const Proud::String & text) PN_OVERRIDE

#define DEFRMI_ChatC2C_P2P_Chat(DerivedClass) bool DerivedClass::P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID, const Proud::String & text)
#define CALL_ChatC2C_P2P_Chat P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID, const Proud::String & text)
#define PARAM_ChatC2C_P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID, const Proud::String & text)
               
		virtual bool P2P_BigData ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & , const Proud::HostID & )		{ 
			return false;
		} 

#define DECRMI_ChatC2C_P2P_BigData bool P2P_BigData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & data, const Proud::HostID & p2pGroupID) PN_OVERRIDE

#define DEFRMI_ChatC2C_P2P_BigData(DerivedClass) bool DerivedClass::P2P_BigData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & data, const Proud::HostID & p2pGroupID)
#define CALL_ChatC2C_P2P_BigData P2P_BigData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & data, const Proud::HostID & p2pGroupID)
#define PARAM_ChatC2C_P2P_BigData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & data, const Proud::HostID & p2pGroupID)
               
		virtual bool P2P_BigDataAck ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & )		{ 
			return false;
		} 

#define DECRMI_ChatC2C_P2P_BigDataAck bool P2P_BigDataAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID) PN_OVERRIDE

#define DEFRMI_ChatC2C_P2P_BigDataAck(DerivedClass) bool DerivedClass::P2P_BigDataAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID)
#define CALL_ChatC2C_P2P_BigDataAck P2P_BigDataAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID)
#define PARAM_ChatC2C_P2P_BigDataAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_P2P_Chat;
		static const PNTCHAR* RmiName_P2P_BigData;
		static const PNTCHAR* RmiName_P2P_BigDataAck;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & , const Proud::String & ) > P2P_Chat_Function;
		virtual bool P2P_Chat ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID, const Proud::String & text) 
		{ 
			if (P2P_Chat_Function==nullptr) 
				return true; 
			return P2P_Chat_Function(remote,rmiContext, p2pGroupID, text); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & , const Proud::HostID & ) > P2P_BigData_Function;
		virtual bool P2P_BigData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & data, const Proud::HostID & p2pGroupID) 
		{ 
			if (P2P_BigData_Function==nullptr) 
				return true; 
			return P2P_BigData_Function(remote,rmiContext, data, p2pGroupID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & ) > P2P_BigDataAck_Function;
		virtual bool P2P_BigDataAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & p2pGroupID) 
		{ 
			if (P2P_BigDataAck_Function==nullptr) 
				return true; 
			return P2P_BigDataAck_Function(remote,rmiContext, p2pGroupID); 
		}

	};
#endif

}


