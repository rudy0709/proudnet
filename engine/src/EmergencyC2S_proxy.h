




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "EmergencyC2S_common.h"

namespace EmergencyC2S {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool EmergencyLogData_Begin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const timespec & loggingTime, const int32_t & connectCount, const uint32_t & remotePeerCount, const uint32_t & directP2PEnablePeerCount, const Proud::String & natDeviceName, const Proud::HostID & peerID, const int & iopendingcount, const uint64_t & totalTcpIssueSendBytes) PN_SEALED;
    virtual bool EmergencyLogData_Begin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const timespec & loggingTime, const int32_t & connectCount, const uint32_t & remotePeerCount, const uint32_t & directP2PEnablePeerCount, const Proud::String & natDeviceName, const Proud::HostID & peerID, const int & iopendingcount, const uint64_t & totalTcpIssueSendBytes)   PN_SEALED;
    virtual bool EmergencyLogData_Error ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & msgSizeErrorCount, const int32_t & netResetErrorCount, const int32_t & intrErrorCount, const int32_t & connResetErrorCount, const uint32_t & lastErrorCompletionLength) PN_SEALED;
    virtual bool EmergencyLogData_Error ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & msgSizeErrorCount, const int32_t & netResetErrorCount, const int32_t & intrErrorCount, const int32_t & connResetErrorCount, const uint32_t & lastErrorCompletionLength)   PN_SEALED;
    virtual bool EmergencyLogData_Stats ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const uint64_t & totalTcpReceiveBytes, const uint64_t & totalTcpSendBytes, const uint64_t & totalUdpSendCount, const uint64_t & totalUdpSendBytes, const uint64_t & totalUdpReceiveCount, const uint64_t & totalUdpReceiveBytes) PN_SEALED;
    virtual bool EmergencyLogData_Stats ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const uint64_t & totalTcpReceiveBytes, const uint64_t & totalTcpSendBytes, const uint64_t & totalUdpSendCount, const uint64_t & totalUdpSendBytes, const uint64_t & totalUdpReceiveCount, const uint64_t & totalUdpReceiveBytes)   PN_SEALED;
    virtual bool EmergencyLogData_OSVersion ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const uint32_t & osMajorVersion, const uint32_t & osMinorVersion, const uint8_t & productType, const uint16_t & processorArchitecture) PN_SEALED;
    virtual bool EmergencyLogData_OSVersion ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const uint32_t & osMajorVersion, const uint32_t & osMinorVersion, const uint8_t & productType, const uint16_t & processorArchitecture)   PN_SEALED;
    virtual bool EmergencyLogData_LogEvent ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const Proud::HostID & logHostID, const Proud::String & logMessage, const Proud::String & logFunction, const int & logLine) PN_SEALED;
    virtual bool EmergencyLogData_LogEvent ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & logLevel, const Proud::LogCategory & logCategory, const Proud::HostID & logHostID, const Proud::String & logMessage, const Proud::String & logFunction, const int & logLine)   PN_SEALED;
    virtual bool EmergencyLogData_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const uint32_t & serverUdpAddrCount, const uint32_t & remoteUdpAddrCount) PN_SEALED;
    virtual bool EmergencyLogData_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const uint32_t & serverUdpAddrCount, const uint32_t & remoteUdpAddrCount)   PN_SEALED;
static const PNTCHAR* RmiName_EmergencyLogData_Begin;
static const PNTCHAR* RmiName_EmergencyLogData_Error;
static const PNTCHAR* RmiName_EmergencyLogData_Stats;
static const PNTCHAR* RmiName_EmergencyLogData_OSVersion;
static const PNTCHAR* RmiName_EmergencyLogData_LogEvent;
static const PNTCHAR* RmiName_EmergencyLogData_End;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}



