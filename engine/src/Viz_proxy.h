




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Viz_common.h"

namespace VizC2S {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID) PN_SEALED;
    virtual bool RequestLogin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID)   PN_SEALED;
    virtual bool NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary) PN_SEALED;
    virtual bool NotifyCommon_SendRmi ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary)   PN_SEALED;
    virtual bool NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID) PN_SEALED;
    virtual bool NotifyCommon_ReceiveRmi ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID)   PN_SEALED;
    virtual bool NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState) PN_SEALED;
    virtual bool NotifyCli_ConnectionState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ConnectionState & connectionState)   PN_SEALED;
    virtual bool NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED;
    virtual bool NotifyCli_Peers_Clear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;
    virtual bool NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID) PN_SEALED;
    virtual bool NotifyCli_Peers_AddOrEdit ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & remotePeerID)   PN_SEALED;
    virtual bool NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED;
    virtual bool NotifySrv_ClientEmpty ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;
    virtual bool NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID) PN_SEALED;
    virtual bool NotifySrv_Clients_AddOrEdit ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & clientID)   PN_SEALED;
    virtual bool NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID) PN_SEALED;
    virtual bool NotifySrv_Clients_Remove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & clientID)   PN_SEALED;
static const PNTCHAR* RmiName_RequestLogin;
static const PNTCHAR* RmiName_NotifyCommon_SendRmi;
static const PNTCHAR* RmiName_NotifyCommon_ReceiveRmi;
static const PNTCHAR* RmiName_NotifyCli_ConnectionState;
static const PNTCHAR* RmiName_NotifyCli_Peers_Clear;
static const PNTCHAR* RmiName_NotifyCli_Peers_AddOrEdit;
static const PNTCHAR* RmiName_NotifySrv_ClientEmpty;
static const PNTCHAR* RmiName_NotifySrv_Clients_AddOrEdit;
static const PNTCHAR* RmiName_NotifySrv_Clients_Remove;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}


namespace VizS2C {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED;
    virtual bool NotifyLoginOk ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;
    virtual bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason) PN_SEALED;
    virtual bool NotifyLoginFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & reason)   PN_SEALED;
static const PNTCHAR* RmiName_NotifyLoginOk;
static const PNTCHAR* RmiName_NotifyLoginFailed;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}



