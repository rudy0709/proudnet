




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "AgentC2S_stub.h"


const unsigned char sz_AgentC2S_stub_hRmi[] =
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };


namespace AgentC2S {


    bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag)
    {
#ifndef __FreeBSD__
        {
            // unusable but required. you may ignore it, because it does not occur any worthless load.
            unsigned char x = sz_AgentC2S_stub_hRmi[0];
            x++;
        }
#endif
        ::Proud::HostID remote=pa.GetRemoteHostID();
        if(remote==::Proud::HostID_None)
        {
            ShowUnknownHostIDWarning(remote);
        }

        ::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
        int orgReadOffset = __msg.GetReadOffset();

        ::Proud::RmiID __rmiID;
        if(!__msg.Read(__rmiID))
            goto __fail;

        switch((int)__rmiID) // case is to prevent from clang compile error
        {
			case Rmi_RequestCredential:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        int cookie; __msg >> cookie;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestCredential);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            ::Proud::AppendTextOut(parameterString,cookie);
			
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestCredential,
			                RmiName_RequestCredential,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestCredential,
			                RmiName_RequestCredential, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestCredential,
			                RmiName_RequestCredential, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_RequestCredential;
			            summary.m_rmiName = RmiName_RequestCredential;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = RequestCredential (remote,ctx , cookie );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_RequestCredential);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_RequestCredential;
			            summary.m_rmiName = RmiName_RequestCredential;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
			case Rmi_ReportStatusBegin:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        byte type; __msg >> type;
					Proud::String statusText; __msg >> statusText;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportStatusBegin);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            ::Proud::AppendTextOut(parameterString,type);
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,statusText);
			
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportStatusBegin,
			                RmiName_ReportStatusBegin,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusBegin,
			                RmiName_ReportStatusBegin, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusBegin,
			                RmiName_ReportStatusBegin, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusBegin;
			            summary.m_rmiName = RmiName_ReportStatusBegin;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = ReportStatusBegin (remote,ctx , type, statusText );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_ReportStatusBegin);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusBegin;
			            summary.m_rmiName = RmiName_ReportStatusBegin;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
			case Rmi_ReportStatusValue:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        Proud::String key; __msg >> key;
					Proud::String value; __msg >> value;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportStatusValue);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            ::Proud::AppendTextOut(parameterString,key);
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,value);
			
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportStatusValue,
			                RmiName_ReportStatusValue,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusValue,
			                RmiName_ReportStatusValue, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusValue,
			                RmiName_ReportStatusValue, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusValue;
			            summary.m_rmiName = RmiName_ReportStatusValue;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = ReportStatusValue (remote,ctx , key, value );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_ReportStatusValue);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusValue;
			            summary.m_rmiName = RmiName_ReportStatusValue;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
			case Rmi_ReportStatusEnd:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        m_core->PostCheckReadMessage(__msg,RmiName_ReportStatusEnd);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportStatusEnd,
			                RmiName_ReportStatusEnd,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusEnd,
			                RmiName_ReportStatusEnd, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportStatusEnd,
			                RmiName_ReportStatusEnd, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusEnd;
			            summary.m_rmiName = RmiName_ReportStatusEnd;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = ReportStatusEnd (remote,ctx  );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_ReportStatusEnd);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportStatusEnd;
			            summary.m_rmiName = RmiName_ReportStatusEnd;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
			case Rmi_ReportServerAppState:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        float cpuUserTime; __msg >> cpuUserTime;
					float cpuKerenlTime; __msg >> cpuKerenlTime;
					uint32_t memorySize; __msg >> memorySize;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportServerAppState);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            ::Proud::AppendTextOut(parameterString,cpuUserTime);
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,cpuKerenlTime);
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,memorySize);
			
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportServerAppState,
			                RmiName_ReportServerAppState,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportServerAppState,
			                RmiName_ReportServerAppState, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportServerAppState,
			                RmiName_ReportServerAppState, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportServerAppState;
			            summary.m_rmiName = RmiName_ReportServerAppState;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = ReportServerAppState (remote,ctx , cpuUserTime, cpuKerenlTime, memorySize );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_ReportServerAppState);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_ReportServerAppState;
			            summary.m_rmiName = RmiName_ReportServerAppState;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
			case Rmi_EventLog:
			    {
			        ::Proud::RmiContext ctx;
			        ctx.m_rmiID = __rmiID;
			        ctx.m_sentFrom=pa.GetRemoteHostID();
			        ctx.m_relayed=pa.IsRelayed();
			        ctx.m_hostTag = hostTag;
			        ctx.m_encryptMode = pa.GetEncryptMode();
			        ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function.
			            // So, We fake that it has been already called.
			            __msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
			        int logType; __msg >> logType;
					Proud::String txt; __msg >> txt;
					m_core->PostCheckReadMessage(__msg,RmiName_EventLog);
			
			
			        if(m_enableNotifyCallFromStub && !m_internalUse)
			        {
			            ::Proud::String parameterString;
			
			            ::Proud::AppendTextOut(parameterString,logType);
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,txt);
			
			            NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_EventLog,
			                RmiName_EventLog,parameterString);
			
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_EventLog,
			                RmiName_EventLog, parameterString);
			#endif
			        }
			        else if(!m_internalUse)
			        {
			#ifdef VIZAGENT
			            m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_EventLog,
			                RmiName_EventLog, _PNT(""));
			#endif
			        }
			
			        int64_t __t0 = 0;
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::BeforeRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_EventLog;
			            summary.m_rmiName = RmiName_EventLog;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            BeforeRmiInvocation(summary);
			
			            __t0 = ::Proud::GetPreciseCurrentTimeMs();
			        }
			
			        // Call this method.
			        bool __ret = EventLog (remote,ctx , logType, txt );
			
			        if(__ret==false)
			        {
			            // Error: RMI function that a user did not create has been called.
			            m_core->ShowNotImplementedRmiWarning(RmiName_EventLog);
			        }
			
			        if(!m_internalUse && m_enableStubProfiling)
			        {
			            ::Proud::AfterRmiSummary summary;
			            summary.m_rmiID = (::Proud::RmiID)Rmi_EventLog;
			            summary.m_rmiName = RmiName_EventLog;
			            summary.m_hostID = remote;
			            summary.m_hostTag = hostTag;
			            int64_t __t1;
			
			            __t1 = ::Proud::GetPreciseCurrentTimeMs();
			
			            summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
			            AfterRmiInvocation(summary);
			        }
			    }
			    break;
        default:
            goto __fail;
        }
        return true;
__fail:
        {
            __msg.SetReadOffset(orgReadOffset);
            return false;
        }
    }
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestCredential =_PNT("RequestCredential");
	#else
	const PNTCHAR* Stub::RmiName_RequestCredential =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportStatusBegin =_PNT("ReportStatusBegin");
	#else
	const PNTCHAR* Stub::RmiName_ReportStatusBegin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportStatusValue =_PNT("ReportStatusValue");
	#else
	const PNTCHAR* Stub::RmiName_ReportStatusValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportStatusEnd =_PNT("ReportStatusEnd");
	#else
	const PNTCHAR* Stub::RmiName_ReportStatusEnd =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportServerAppState =_PNT("ReportServerAppState");
	#else
	const PNTCHAR* Stub::RmiName_ReportServerAppState =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_EventLog =_PNT("EventLog");
	#else
	const PNTCHAR* Stub::RmiName_EventLog =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestCredential;

}



