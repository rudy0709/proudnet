





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once

#include "CompactFieldMap.h"

#include "NetC2S_common.h"


namespace ProudC2S {


    class Stub : public ::Proud::IRmiStub
    {
    public:
        virtual bool ReliablePing ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const int & , const int & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_ReliablePing bool ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReliablePing(DerivedClass) bool DerivedClass::ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_ReliablePing ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap)
        virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const ErrorType & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_P2P_NotifyDirectP2PDisconnected bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_P2P_NotifyDirectP2PDisconnected(DerivedClass) bool DerivedClass::P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_P2P_NotifyDirectP2PDisconnected P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)
        virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyUdpToTcpFallbackByClient bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyUdpToTcpFallbackByClient(DerivedClass) bool DerivedClass::NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyUdpToTcpFallbackByClient NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
        virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_P2PGroup_MemberJoin_Ack bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_P2PGroup_MemberJoin_Ack(DerivedClass) bool DerivedClass::P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_P2PGroup_MemberJoin_Ack P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap)
        virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const AddrPort & , const AddrPort & , const AddrPort & , const AddrPort & , const int & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyP2PHolepunchSuccess bool NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyP2PHolepunchSuccess(DerivedClass) bool DerivedClass::NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyP2PHolepunchSuccess NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)
        virtual bool ShutdownTcp ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_ShutdownTcp bool ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_ShutdownTcp(DerivedClass) bool DerivedClass::ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_ShutdownTcp ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap)
        virtual bool NotifyLog ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::LogCategory & , const HostID & , const String & , const String & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyLog bool NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyLog(DerivedClass) bool DerivedClass::NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyLog NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap)
        virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const String & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyLogHolepunchFreqFail bool NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyLogHolepunchFreqFail(DerivedClass) bool DerivedClass::NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyLogHolepunchFreqFail NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap)
        virtual bool NotifyNatDeviceName ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyNatDeviceName bool NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyNatDeviceName(DerivedClass) bool DerivedClass::NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyNatDeviceName NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap)
        virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyJitDirectP2PTriggered bool NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyJitDirectP2PTriggered(DerivedClass) bool DerivedClass::NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyJitDirectP2PTriggered NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap)
        virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifyNatDeviceNameDetected bool NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyNatDeviceNameDetected(DerivedClass) bool DerivedClass::NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifyNatDeviceNameDetected NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap)
        virtual bool NotifySendSpeed ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_NotifySendSpeed bool NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifySendSpeed(DerivedClass) bool DerivedClass::NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_NotifySendSpeed NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap)
        virtual bool ReportP2PPeerPing ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_ReportP2PPeerPing bool ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportP2PPeerPing(DerivedClass) bool DerivedClass::ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_ReportP2PPeerPing ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap)
        virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_C2S_RequestCreateUdpSocket bool C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_C2S_RequestCreateUdpSocket(DerivedClass) bool DerivedClass::C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_C2S_RequestCreateUdpSocket C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
        virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID, ::Proud::RmiContext& , const bool & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_C2S_CreateUdpSocketAck bool C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_C2S_CreateUdpSocketAck(DerivedClass) bool DerivedClass::C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_C2S_CreateUdpSocketAck C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap)
        virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_ReportC2CUdpMessageCount bool ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportC2CUdpMessageCount(DerivedClass) bool DerivedClass::ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_ReportC2CUdpMessageCount ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap)
        virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const CompactFieldMap & )        {
            return false;
        }

#define DECRMI_ProudC2S_ReportC2SUdpMessageTrialCount bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportC2SUdpMessageTrialCount(DerivedClass) bool DerivedClass::ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap)
#define CALL_ProudC2S_ReportC2SUdpMessageTrialCount ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2S_ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap)
        virtual bool RoundTripLatencyPing ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & )        {
            return false;
        }

#define DECRMI_ProudC2S_RoundTripLatencyPing bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_OVERRIDE

#define DEFRMI_ProudC2S_RoundTripLatencyPing(DerivedClass) bool DerivedClass::RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define CALL_ProudC2S_RoundTripLatencyPing RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define PARAM_ProudC2S_RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_ReliablePing;
		static const PNTCHAR* RmiName_P2P_NotifyDirectP2PDisconnected;
		static const PNTCHAR* RmiName_NotifyUdpToTcpFallbackByClient;
		static const PNTCHAR* RmiName_P2PGroup_MemberJoin_Ack;
		static const PNTCHAR* RmiName_NotifyP2PHolepunchSuccess;
		static const PNTCHAR* RmiName_ShutdownTcp;
		static const PNTCHAR* RmiName_NotifyLog;
		static const PNTCHAR* RmiName_NotifyLogHolepunchFreqFail;
		static const PNTCHAR* RmiName_NotifyNatDeviceName;
		static const PNTCHAR* RmiName_NotifyJitDirectP2PTriggered;
		static const PNTCHAR* RmiName_NotifyNatDeviceNameDetected;
		static const PNTCHAR* RmiName_NotifySendSpeed;
		static const PNTCHAR* RmiName_ReportP2PPeerPing;
		static const PNTCHAR* RmiName_C2S_RequestCreateUdpSocket;
		static const PNTCHAR* RmiName_C2S_CreateUdpSocketAck;
		static const PNTCHAR* RmiName_ReportC2CUdpMessageCount;
		static const PNTCHAR* RmiName_ReportC2SUdpMessageTrialCount;
		static const PNTCHAR* RmiName_RoundTripLatencyPing;
		static const PNTCHAR* RmiName_First;
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const int & , const int & , const int & , const CompactFieldMap & ) > ReliablePing_Function;
        virtual bool ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap)        {
            if (ReliablePing_Function==nullptr)
                return true;
            return ReliablePing_Function(remote,rmiContext, recentFrameRate, localTimeMs, messageID, lastReliablePingMs, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const ErrorType & , const CompactFieldMap & ) > P2P_NotifyDirectP2PDisconnected_Function;
        virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)        {
            if (P2P_NotifyDirectP2PDisconnected_Function==nullptr)
                return true;
            return P2P_NotifyDirectP2PDisconnected_Function(remote,rmiContext, remotePeerHostID, reason, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & ) > NotifyUdpToTcpFallbackByClient_Function;
        virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)        {
            if (NotifyUdpToTcpFallbackByClient_Function==nullptr)
                return true;
            return NotifyUdpToTcpFallbackByClient_Function(remote,rmiContext, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const int & , const CompactFieldMap & ) > P2PGroup_MemberJoin_Ack_Function;
        virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap)        {
            if (P2PGroup_MemberJoin_Ack_Function==nullptr)
                return true;
            return P2PGroup_MemberJoin_Ack_Function(remote,rmiContext, groupHostID, addedMemberHostID, eventID, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const AddrPort & , const AddrPort & , const AddrPort & , const AddrPort & , const int & , const int & , const CompactFieldMap & ) > NotifyP2PHolepunchSuccess_Function;
        virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)        {
            if (NotifyP2PHolepunchSuccess_Function==nullptr)
                return true;
            return NotifyP2PHolepunchSuccess_Function(remote,rmiContext, A, B, ABSendAddr, ABRecvAddr, BASendAddr, BARecvAddr, reliableRTT, unreliableRTT, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & , const CompactFieldMap & ) > ShutdownTcp_Function;
        virtual bool ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap)        {
            if (ShutdownTcp_Function==nullptr)
                return true;
            return ShutdownTcp_Function(remote,rmiContext, comment, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::LogCategory & , const HostID & , const String & , const String & , const int & , const CompactFieldMap & ) > NotifyLog_Function;
        virtual bool NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap)        {
            if (NotifyLog_Function==nullptr)
                return true;
            return NotifyLog_Function(remote,rmiContext, logLevel, logCategory, logHostID, logMessage, logFunction, logLine, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const String & , const CompactFieldMap & ) > NotifyLogHolepunchFreqFail_Function;
        virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap)        {
            if (NotifyLogHolepunchFreqFail_Function==nullptr)
                return true;
            return NotifyLogHolepunchFreqFail_Function(remote,rmiContext, rank, text, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const CompactFieldMap & ) > NotifyNatDeviceName_Function;
        virtual bool NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap)        {
            if (NotifyNatDeviceName_Function==nullptr)
                return true;
            return NotifyNatDeviceName_Function(remote,rmiContext, deviceName, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const CompactFieldMap & ) > NotifyJitDirectP2PTriggered_Function;
        virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap)        {
            if (NotifyJitDirectP2PTriggered_Function==nullptr)
                return true;
            return NotifyJitDirectP2PTriggered_Function(remote,rmiContext, peerB_ID, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & , const CompactFieldMap & ) > NotifyNatDeviceNameDetected_Function;
        virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap)        {
            if (NotifyNatDeviceNameDetected_Function==nullptr)
                return true;
            return NotifyNatDeviceNameDetected_Function(remote,rmiContext, natDeviceName, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const CompactFieldMap & ) > NotifySendSpeed_Function;
        virtual bool NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap)        {
            if (NotifySendSpeed_Function==nullptr)
                return true;
            return NotifySendSpeed_Function(remote,rmiContext, speed, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const CompactFieldMap & ) > ReportP2PPeerPing_Function;
        virtual bool ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap)        {
            if (ReportP2PPeerPing_Function==nullptr)
                return true;
            return ReportP2PPeerPing_Function(remote,rmiContext, peerID, recentPing, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & ) > C2S_RequestCreateUdpSocket_Function;
        virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)        {
            if (C2S_RequestCreateUdpSocket_Function==nullptr)
                return true;
            return C2S_RequestCreateUdpSocket_Function(remote,rmiContext, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const bool & , const CompactFieldMap & ) > C2S_CreateUdpSocketAck_Function;
        virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap)        {
            if (C2S_CreateUdpSocketAck_Function==nullptr)
                return true;
            return C2S_CreateUdpSocketAck_Function(remote,rmiContext, succeed, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const int & , const CompactFieldMap & ) > ReportC2CUdpMessageCount_Function;
        virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap)        {
            if (ReportC2CUdpMessageCount_Function==nullptr)
                return true;
            return ReportC2CUdpMessageCount_Function(remote,rmiContext, peer, udpMessageTrialCount, udpMessageSuccessCount, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const CompactFieldMap & ) > ReportC2SUdpMessageTrialCount_Function;
        virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap)        {
            if (ReportC2SUdpMessageTrialCount_Function==nullptr)
                return true;
            return ReportC2SUdpMessageTrialCount_Function(remote,rmiContext, toServerUdpTrialCount, fieldMap);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & ) > RoundTripLatencyPing_Function;
        virtual bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)        {
            if (RoundTripLatencyPing_Function==nullptr)
                return true;
            return RoundTripLatencyPing_Function(remote,rmiContext, pingTime);
        }

    };
#endif

}


