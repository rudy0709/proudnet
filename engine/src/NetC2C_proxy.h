




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once

#include "CompactFieldMap.h"

#include "NetC2C_common.h"

namespace ProudC2C {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool HolsterP2PHolepunchTrial ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ReportUdpMessageCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & udpSuccessCount, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_SEALED;
    virtual bool RoundTripLatencyPing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)   PN_SEALED;
    virtual bool RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_SEALED;
    virtual bool RoundTripLatencyPong ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)   PN_SEALED;
static const PNTCHAR* RmiName_HolsterP2PHolepunchTrial;
static const PNTCHAR* RmiName_ReportUdpMessageCount;
static const PNTCHAR* RmiName_RoundTripLatencyPing;
static const PNTCHAR* RmiName_RoundTripLatencyPong;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}



