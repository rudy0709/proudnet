




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "AgentC2S_common.h"

namespace AgentC2S {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie) PN_SEALED;
    virtual bool RequestCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & cookie)   PN_SEALED;
    virtual bool ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText) PN_SEALED;
    virtual bool ReportStatusBegin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const byte & type, const Proud::String & statusText)   PN_SEALED;
    virtual bool ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value) PN_SEALED;
    virtual bool ReportStatusValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & key, const Proud::String & value)   PN_SEALED;
    virtual bool ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED;
    virtual bool ReportStatusEnd ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;
    virtual bool ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize) PN_SEALED;
    virtual bool ReportServerAppState ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize)   PN_SEALED;
    virtual bool EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt) PN_SEALED;
    virtual bool EventLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & logType, const Proud::String & txt)   PN_SEALED;
static const PNTCHAR* RmiName_RequestCredential;
static const PNTCHAR* RmiName_ReportStatusBegin;
static const PNTCHAR* RmiName_ReportStatusValue;
static const PNTCHAR* RmiName_ReportStatusEnd;
static const PNTCHAR* RmiName_ReportServerAppState;
static const PNTCHAR* RmiName_EventLog;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}



