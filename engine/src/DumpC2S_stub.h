





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "DumpC2S_common.h"


namespace DumpC2S {


    class Stub : public ::Proud::IRmiStub
    {
    public:
        virtual bool Dump_Start ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_DumpC2S_Dump_Start bool Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_DumpC2S_Dump_Start(DerivedClass) bool DerivedClass::Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_DumpC2S_Dump_Start Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_DumpC2S_Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
        virtual bool Dump_Chunk ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & )        {
            return false;
        }

#define DECRMI_DumpC2S_Dump_Chunk bool Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk) PN_OVERRIDE

#define DEFRMI_DumpC2S_Dump_Chunk(DerivedClass) bool DerivedClass::Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk)
#define CALL_DumpC2S_Dump_Chunk Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk)
#define PARAM_DumpC2S_Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk)
        virtual bool Dump_End ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_DumpC2S_Dump_End bool Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_DumpC2S_Dump_End(DerivedClass) bool DerivedClass::Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_DumpC2S_Dump_End Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_DumpC2S_Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Dump_Start;
		static const PNTCHAR* RmiName_Dump_Chunk;
		static const PNTCHAR* RmiName_Dump_End;
		static const PNTCHAR* RmiName_First;
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > Dump_Start_Function;
        virtual bool Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (Dump_Start_Function==nullptr)
                return true;
            return Dump_Start_Function(remote,rmiContext);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & ) > Dump_Chunk_Function;
        virtual bool Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk)        {
            if (Dump_Chunk_Function==nullptr)
                return true;
            return Dump_Chunk_Function(remote,rmiContext, chunk);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > Dump_End_Function;
        virtual bool Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (Dump_End_Function==nullptr)
                return true;
            return Dump_End_Function(remote,rmiContext);
        }

    };
#endif

}


