




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once

#include "CompactFieldMap.h"

#include "NetC2S_common.h"

namespace ProudC2S {


    class Proxy : public ::Proud::IRmiProxy
    {
    public:
    virtual bool ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ReliablePing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const double & recentFrameRate, const int & localTimeMs, const int & messageID, const int & lastReliablePingMs, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ShutdownTcp ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ByteArray & comment, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & rank, const String & text, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyNatDeviceName ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & deviceName, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peerB_ID, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & natDeviceName, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool NotifySendSpeed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const double & speed, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ReportP2PPeerPing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peerID, const int & recentPing, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & succeed, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap) PN_SEALED;
    virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & toServerUdpTrialCount, const CompactFieldMap & fieldMap)   PN_SEALED;
    virtual bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_SEALED;
    virtual bool RoundTripLatencyPing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)   PN_SEALED;
static const PNTCHAR* RmiName_ReliablePing;
static const PNTCHAR* RmiName_P2P_NotifyDirectP2PDisconnected;
static const PNTCHAR* RmiName_NotifyUdpToTcpFallbackByClient;
static const PNTCHAR* RmiName_P2PGroup_MemberJoin_Ack;
static const PNTCHAR* RmiName_NotifyP2PHolepunchSuccess;
static const PNTCHAR* RmiName_ShutdownTcp;
static const PNTCHAR* RmiName_NotifyLog;
static const PNTCHAR* RmiName_NotifyLogHolepunchFreqFail;
static const PNTCHAR* RmiName_NotifyNatDeviceName;
static const PNTCHAR* RmiName_NotifyJitDirectP2PTriggered;
static const PNTCHAR* RmiName_NotifyNatDeviceNameDetected;
static const PNTCHAR* RmiName_NotifySendSpeed;
static const PNTCHAR* RmiName_ReportP2PPeerPing;
static const PNTCHAR* RmiName_C2S_RequestCreateUdpSocket;
static const PNTCHAR* RmiName_C2S_CreateUdpSocketAck;
static const PNTCHAR* RmiName_ReportC2CUdpMessageCount;
static const PNTCHAR* RmiName_ReportC2SUdpMessageTrialCount;
static const PNTCHAR* RmiName_RoundTripLatencyPing;
static const PNTCHAR* RmiName_First;
        Proxy()
        {
            if(m_signature != 1)
                ::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
        }

        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

}



