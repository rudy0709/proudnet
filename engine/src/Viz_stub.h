





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Viz_common.h"


namespace VizC2S {


    class Stub : public ::Proud::IRmiStub
    {
    public:
        virtual bool RequestLogin ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::HostID & )        {
            return false;
        }

#define DECRMI_VizC2S_RequestLogin bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID) PN_OVERRIDE

#define DEFRMI_VizC2S_RequestLogin(DerivedClass) bool DerivedClass::RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID)
#define CALL_VizC2S_RequestLogin RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID)
#define PARAM_VizC2S_RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID)
        virtual bool NotifyCommon_SendRmi ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::CFastArray<Proud::HostID> & , const Proud::VizMessageSummary & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifyCommon_SendRmi bool NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifyCommon_SendRmi(DerivedClass) bool DerivedClass::NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary)
#define CALL_VizC2S_NotifyCommon_SendRmi NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary)
#define PARAM_VizC2S_NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary)
        virtual bool NotifyCommon_ReceiveRmi ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & , const Proud::String & , const int & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifyCommon_ReceiveRmi bool NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifyCommon_ReceiveRmi(DerivedClass) bool DerivedClass::NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID)
#define CALL_VizC2S_NotifyCommon_ReceiveRmi NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID)
#define PARAM_VizC2S_NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID)
        virtual bool NotifyCli_ConnectionState ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ConnectionState & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifyCli_ConnectionState bool NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifyCli_ConnectionState(DerivedClass) bool DerivedClass::NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState)
#define CALL_VizC2S_NotifyCli_ConnectionState NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState)
#define PARAM_VizC2S_NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState)
        virtual bool NotifyCli_Peers_Clear ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_VizC2S_NotifyCli_Peers_Clear bool NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifyCli_Peers_Clear(DerivedClass) bool DerivedClass::NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_VizC2S_NotifyCli_Peers_Clear NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_VizC2S_NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
        virtual bool NotifyCli_Peers_AddOrEdit ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifyCli_Peers_AddOrEdit bool NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifyCli_Peers_AddOrEdit(DerivedClass) bool DerivedClass::NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID)
#define CALL_VizC2S_NotifyCli_Peers_AddOrEdit NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID)
#define PARAM_VizC2S_NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID)
        virtual bool NotifySrv_ClientEmpty ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_VizC2S_NotifySrv_ClientEmpty bool NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifySrv_ClientEmpty(DerivedClass) bool DerivedClass::NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_VizC2S_NotifySrv_ClientEmpty NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_VizC2S_NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
        virtual bool NotifySrv_Clients_AddOrEdit ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifySrv_Clients_AddOrEdit bool NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifySrv_Clients_AddOrEdit(DerivedClass) bool DerivedClass::NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)
#define CALL_VizC2S_NotifySrv_Clients_AddOrEdit NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)
#define PARAM_VizC2S_NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)
        virtual bool NotifySrv_Clients_Remove ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & )        {
            return false;
        }

#define DECRMI_VizC2S_NotifySrv_Clients_Remove bool NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID) PN_OVERRIDE

#define DEFRMI_VizC2S_NotifySrv_Clients_Remove(DerivedClass) bool DerivedClass::NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)
#define CALL_VizC2S_NotifySrv_Clients_Remove NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)
#define PARAM_VizC2S_NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestLogin;
		static const PNTCHAR* RmiName_NotifyCommon_SendRmi;
		static const PNTCHAR* RmiName_NotifyCommon_ReceiveRmi;
		static const PNTCHAR* RmiName_NotifyCli_ConnectionState;
		static const PNTCHAR* RmiName_NotifyCli_Peers_Clear;
		static const PNTCHAR* RmiName_NotifyCli_Peers_AddOrEdit;
		static const PNTCHAR* RmiName_NotifySrv_ClientEmpty;
		static const PNTCHAR* RmiName_NotifySrv_Clients_AddOrEdit;
		static const PNTCHAR* RmiName_NotifySrv_Clients_Remove;
		static const PNTCHAR* RmiName_First;
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::HostID & ) > RequestLogin_Function;
        virtual bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & loginKey, const Proud::HostID & vizOwnerHostID)        {
            if (RequestLogin_Function==nullptr)
                return true;
            return RequestLogin_Function(remote,rmiContext, loginKey, vizOwnerHostID);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::CFastArray<Proud::HostID> & , const Proud::VizMessageSummary & ) > NotifyCommon_SendRmi_Function;
        virtual bool NotifyCommon_SendRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::HostID> & sendTo, const Proud::VizMessageSummary & summary)        {
            if (NotifyCommon_SendRmi_Function==nullptr)
                return true;
            return NotifyCommon_SendRmi_Function(remote,rmiContext, sendTo, summary);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & , const Proud::String & , const int & ) > NotifyCommon_ReceiveRmi_Function;
        virtual bool NotifyCommon_ReceiveRmi ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & recvFrom, const Proud::String & rmiName, const int & rmiID)        {
            if (NotifyCommon_ReceiveRmi_Function==nullptr)
                return true;
            return NotifyCommon_ReceiveRmi_Function(remote,rmiContext, recvFrom, rmiName, rmiID);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ConnectionState & ) > NotifyCli_ConnectionState_Function;
        virtual bool NotifyCli_ConnectionState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ConnectionState & connectionState)        {
            if (NotifyCli_ConnectionState_Function==nullptr)
                return true;
            return NotifyCli_ConnectionState_Function(remote,rmiContext, connectionState);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyCli_Peers_Clear_Function;
        virtual bool NotifyCli_Peers_Clear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (NotifyCli_Peers_Clear_Function==nullptr)
                return true;
            return NotifyCli_Peers_Clear_Function(remote,rmiContext);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & ) > NotifyCli_Peers_AddOrEdit_Function;
        virtual bool NotifyCli_Peers_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & remotePeerID)        {
            if (NotifyCli_Peers_AddOrEdit_Function==nullptr)
                return true;
            return NotifyCli_Peers_AddOrEdit_Function(remote,rmiContext, remotePeerID);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifySrv_ClientEmpty_Function;
        virtual bool NotifySrv_ClientEmpty ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (NotifySrv_ClientEmpty_Function==nullptr)
                return true;
            return NotifySrv_ClientEmpty_Function(remote,rmiContext);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & ) > NotifySrv_Clients_AddOrEdit_Function;
        virtual bool NotifySrv_Clients_AddOrEdit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)        {
            if (NotifySrv_Clients_AddOrEdit_Function==nullptr)
                return true;
            return NotifySrv_Clients_AddOrEdit_Function(remote,rmiContext, clientID);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::HostID & ) > NotifySrv_Clients_Remove_Function;
        virtual bool NotifySrv_Clients_Remove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & clientID)        {
            if (NotifySrv_Clients_Remove_Function==nullptr)
                return true;
            return NotifySrv_Clients_Remove_Function(remote,rmiContext, clientID);
        }

    };
#endif

}



namespace VizS2C {


    class Stub : public ::Proud::IRmiStub
    {
    public:
        virtual bool NotifyLoginOk ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_VizS2C_NotifyLoginOk bool NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_VizS2C_NotifyLoginOk(DerivedClass) bool DerivedClass::NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_VizS2C_NotifyLoginOk NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_VizS2C_NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
        virtual bool NotifyLoginFailed ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & )        {
            return false;
        }

#define DECRMI_VizS2C_NotifyLoginFailed bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason) PN_OVERRIDE

#define DEFRMI_VizS2C_NotifyLoginFailed(DerivedClass) bool DerivedClass::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason)
#define CALL_VizS2C_NotifyLoginFailed NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason)
#define PARAM_VizS2C_NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason)

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_NotifyLoginOk;
		static const PNTCHAR* RmiName_NotifyLoginFailed;
		static const PNTCHAR* RmiName_First;
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyLoginOk_Function;
        virtual bool NotifyLoginOk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (NotifyLoginOk_Function==nullptr)
                return true;
            return NotifyLoginOk_Function(remote,rmiContext);
        }

        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ErrorType & ) > NotifyLoginFailed_Function;
        virtual bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason)        {
            if (NotifyLoginFailed_Function==nullptr)
                return true;
            return NotifyLoginFailed_Function(remote,rmiContext, reason);
        }

    };
#endif

}


