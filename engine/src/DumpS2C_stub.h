





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "DumpS2C_common.h"


namespace DumpS2C {


    class Stub : public ::Proud::IRmiStub
    {
    public:
        virtual bool Dump_ChunkAck ( ::Proud::HostID, ::Proud::RmiContext& )        {
            return false;
        }

#define DECRMI_DumpS2C_Dump_ChunkAck bool Dump_ChunkAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_DumpS2C_Dump_ChunkAck(DerivedClass) bool DerivedClass::Dump_ChunkAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_DumpS2C_Dump_ChunkAck Dump_ChunkAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_DumpS2C_Dump_ChunkAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )

        virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_Dump_ChunkAck;
		static const PNTCHAR* RmiName_First;
        virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
        virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
    };

#ifdef SUPPORTS_CPP11

    class StubFunctional : public Stub
    {
    public:
        std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > Dump_ChunkAck_Function;
        virtual bool Dump_ChunkAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )        {
            if (Dump_ChunkAck_Function==nullptr)
                return true;
            return Dump_ChunkAck_Function(remote,rmiContext);
        }

    };
#endif

}


