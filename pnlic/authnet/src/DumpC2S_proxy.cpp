




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "DumpC2S_proxy.h"

namespace DumpC2S {


        
	bool Proxy::Dump_Start ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_Start;
__msg.Write(__msgid);
	

		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Dump_Start, (::Proud::RmiID)Rmi_Dump_Start);
	}

	bool Proxy::Dump_Start ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_Start;
__msg.Write(__msgid);
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Dump_Start, (::Proud::RmiID)Rmi_Dump_Start);
	}
        
	bool Proxy::Dump_Chunk ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & chunk)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_Chunk;
__msg.Write(__msgid);
	
__msg << chunk;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Dump_Chunk, (::Proud::RmiID)Rmi_Dump_Chunk);
	}

	bool Proxy::Dump_Chunk ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ByteArray & chunk)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_Chunk;
__msg.Write(__msgid);
	
__msg << chunk;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Dump_Chunk, (::Proud::RmiID)Rmi_Dump_Chunk);
	}
        
	bool Proxy::Dump_End ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_End;
__msg.Write(__msgid);
	

		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Dump_End, (::Proud::RmiID)Rmi_Dump_End);
	}

	bool Proxy::Dump_End ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Dump_End;
__msg.Write(__msgid);
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Dump_End, (::Proud::RmiID)Rmi_Dump_End);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Dump_Start =_PNT("Dump_Start");
#else
const PNTCHAR* Proxy::RmiName_Dump_Start =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Dump_Chunk =_PNT("Dump_Chunk");
#else
const PNTCHAR* Proxy::RmiName_Dump_Chunk =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Dump_End =_PNT("Dump_End");
#else
const PNTCHAR* Proxy::RmiName_Dump_End =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Dump_Start;

}



