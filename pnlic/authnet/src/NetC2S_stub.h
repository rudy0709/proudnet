  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "NetC2S_common.h"

     
namespace ProudC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool ReliablePing ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const int & , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_ReliablePing bool ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReliablePing(DerivedClass) bool DerivedClass::ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID)
#define CALL_ProudC2S_ReliablePing ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID)
#define PARAM_ProudC2S_ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID)
               
		virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const ErrorType & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_P2P_NotifyDirectP2PDisconnected bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason) PN_OVERRIDE

#define DEFRMI_ProudC2S_P2P_NotifyDirectP2PDisconnected(DerivedClass) bool DerivedClass::P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason)
#define CALL_ProudC2S_P2P_NotifyDirectP2PDisconnected P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason)
#define PARAM_ProudC2S_P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason)
               
		virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyUdpToTcpFallbackByClient bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyUdpToTcpFallbackByClient(DerivedClass) bool DerivedClass::NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_ProudC2S_NotifyUdpToTcpFallbackByClient NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_ProudC2S_NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_P2PGroup_MemberJoin_Ack bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID) PN_OVERRIDE

#define DEFRMI_ProudC2S_P2PGroup_MemberJoin_Ack(DerivedClass) bool DerivedClass::P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID)
#define CALL_ProudC2S_P2PGroup_MemberJoin_Ack P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID)
#define PARAM_ProudC2S_P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID)
               
		virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const AddrPort & , const AddrPort & , const AddrPort & , const AddrPort & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyP2PHolepunchSuccess bool NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyP2PHolepunchSuccess(DerivedClass) bool DerivedClass::NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr)
#define CALL_ProudC2S_NotifyP2PHolepunchSuccess NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr)
#define PARAM_ProudC2S_NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr)
               
		virtual bool ShutdownTcp ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_ShutdownTcp bool ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment) PN_OVERRIDE

#define DEFRMI_ProudC2S_ShutdownTcp(DerivedClass) bool DerivedClass::ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment)
#define CALL_ProudC2S_ShutdownTcp ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment)
#define PARAM_ProudC2S_ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment)
               
		virtual bool NotifyLog ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::LogCategory & , const HostID & , const String & , const String & , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyLog bool NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyLog(DerivedClass) bool DerivedClass::NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine)
#define CALL_ProudC2S_NotifyLog NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine)
#define PARAM_ProudC2S_NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine)
               
		virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const String & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyLogHolepunchFreqFail bool NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyLogHolepunchFreqFail(DerivedClass) bool DerivedClass::NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text)
#define CALL_ProudC2S_NotifyLogHolepunchFreqFail NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text)
#define PARAM_ProudC2S_NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text)
               
		virtual bool NotifyNatDeviceName ( ::Proud::HostID, ::Proud::RmiContext& , const String & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyNatDeviceName bool NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyNatDeviceName(DerivedClass) bool DerivedClass::NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName)
#define CALL_ProudC2S_NotifyNatDeviceName NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName)
#define PARAM_ProudC2S_NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName)
               
		virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyJitDirectP2PTriggered bool NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyJitDirectP2PTriggered(DerivedClass) bool DerivedClass::NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID)
#define CALL_ProudC2S_NotifyJitDirectP2PTriggered NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID)
#define PARAM_ProudC2S_NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID)
               
		virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID, ::Proud::RmiContext& , const String & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifyNatDeviceNameDetected bool NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifyNatDeviceNameDetected(DerivedClass) bool DerivedClass::NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName)
#define CALL_ProudC2S_NotifyNatDeviceNameDetected NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName)
#define PARAM_ProudC2S_NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName)
               
		virtual bool NotifySendSpeed ( ::Proud::HostID, ::Proud::RmiContext& , const double & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_NotifySendSpeed bool NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed) PN_OVERRIDE

#define DEFRMI_ProudC2S_NotifySendSpeed(DerivedClass) bool DerivedClass::NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed)
#define CALL_ProudC2S_NotifySendSpeed NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed)
#define PARAM_ProudC2S_NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed)
               
		virtual bool ReportP2PPeerPing ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_ReportP2PPeerPing bool ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportP2PPeerPing(DerivedClass) bool DerivedClass::ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing)
#define CALL_ProudC2S_ReportP2PPeerPing ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing)
#define PARAM_ProudC2S_ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing)
               
		virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_C2S_RequestCreateUdpSocket bool C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_ProudC2S_C2S_RequestCreateUdpSocket(DerivedClass) bool DerivedClass::C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_ProudC2S_C2S_RequestCreateUdpSocket C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_ProudC2S_C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID, ::Proud::RmiContext& , const bool & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_C2S_CreateUdpSocketAck bool C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed) PN_OVERRIDE

#define DEFRMI_ProudC2S_C2S_CreateUdpSocketAck(DerivedClass) bool DerivedClass::C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed)
#define CALL_ProudC2S_C2S_CreateUdpSocketAck C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed)
#define PARAM_ProudC2S_C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed)
               
		virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_ReportC2CUdpMessageCount bool ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportC2CUdpMessageCount(DerivedClass) bool DerivedClass::ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount)
#define CALL_ProudC2S_ReportC2CUdpMessageCount ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount)
#define PARAM_ProudC2S_ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount)
               
		virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_ProudC2S_ReportC2SUdpMessageTrialCount bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount) PN_OVERRIDE

#define DEFRMI_ProudC2S_ReportC2SUdpMessageTrialCount(DerivedClass) bool DerivedClass::ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount)
#define CALL_ProudC2S_ReportC2SUdpMessageTrialCount ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount)
#define PARAM_ProudC2S_ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_ReliablePing;
		static const PNTCHAR* RmiName_P2P_NotifyDirectP2PDisconnected;
		static const PNTCHAR* RmiName_NotifyUdpToTcpFallbackByClient;
		static const PNTCHAR* RmiName_P2PGroup_MemberJoin_Ack;
		static const PNTCHAR* RmiName_NotifyP2PHolepunchSuccess;
		static const PNTCHAR* RmiName_ShutdownTcp;
		static const PNTCHAR* RmiName_NotifyLog;
		static const PNTCHAR* RmiName_NotifyLogHolepunchFreqFail;
		static const PNTCHAR* RmiName_NotifyNatDeviceName;
		static const PNTCHAR* RmiName_NotifyJitDirectP2PTriggered;
		static const PNTCHAR* RmiName_NotifyNatDeviceNameDetected;
		static const PNTCHAR* RmiName_NotifySendSpeed;
		static const PNTCHAR* RmiName_ReportP2PPeerPing;
		static const PNTCHAR* RmiName_C2S_RequestCreateUdpSocket;
		static const PNTCHAR* RmiName_C2S_CreateUdpSocketAck;
		static const PNTCHAR* RmiName_ReportC2CUdpMessageCount;
		static const PNTCHAR* RmiName_ReportC2SUdpMessageTrialCount;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const double & , const int & , const int & ) > ReliablePing_Function;
		virtual bool ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID) 
		{ 
			if (ReliablePing_Function==nullptr) 
				return true; 
			return ReliablePing_Function(remote,rmiContext, recentFrameRate, localTimeMs, messageID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const ErrorType & ) > P2P_NotifyDirectP2PDisconnected_Function;
		virtual bool P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason) 
		{ 
			if (P2P_NotifyDirectP2PDisconnected_Function==nullptr) 
				return true; 
			return P2P_NotifyDirectP2PDisconnected_Function(remote,rmiContext, remotePeerHostID, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyUdpToTcpFallbackByClient_Function;
		virtual bool NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyUdpToTcpFallbackByClient_Function==nullptr) 
				return true; 
			return NotifyUdpToTcpFallbackByClient_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const int & ) > P2PGroup_MemberJoin_Ack_Function;
		virtual bool P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID) 
		{ 
			if (P2PGroup_MemberJoin_Ack_Function==nullptr) 
				return true; 
			return P2PGroup_MemberJoin_Ack_Function(remote,rmiContext, groupHostID, addedMemberHostID, eventID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const HostID & , const AddrPort & , const AddrPort & , const AddrPort & , const AddrPort & ) > NotifyP2PHolepunchSuccess_Function;
		virtual bool NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr) 
		{ 
			if (NotifyP2PHolepunchSuccess_Function==nullptr) 
				return true; 
			return NotifyP2PHolepunchSuccess_Function(remote,rmiContext, A, B, ABSendAddr, ABRecvAddr, BASendAddr, BARecvAddr); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::ByteArray & ) > ShutdownTcp_Function;
		virtual bool ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment) 
		{ 
			if (ShutdownTcp_Function==nullptr) 
				return true; 
			return ShutdownTcp_Function(remote,rmiContext, comment); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::LogCategory & , const HostID & , const String & , const String & , const int & ) > NotifyLog_Function;
		virtual bool NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine) 
		{ 
			if (NotifyLog_Function==nullptr) 
				return true; 
			return NotifyLog_Function(remote,rmiContext, logLevel, logCategory, logHostID, logMessage, logFunction, logLine); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const String & ) > NotifyLogHolepunchFreqFail_Function;
		virtual bool NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text) 
		{ 
			if (NotifyLogHolepunchFreqFail_Function==nullptr) 
				return true; 
			return NotifyLogHolepunchFreqFail_Function(remote,rmiContext, rank, text); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & ) > NotifyNatDeviceName_Function;
		virtual bool NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName) 
		{ 
			if (NotifyNatDeviceName_Function==nullptr) 
				return true; 
			return NotifyNatDeviceName_Function(remote,rmiContext, deviceName); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & ) > NotifyJitDirectP2PTriggered_Function;
		virtual bool NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID) 
		{ 
			if (NotifyJitDirectP2PTriggered_Function==nullptr) 
				return true; 
			return NotifyJitDirectP2PTriggered_Function(remote,rmiContext, peerB_ID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const String & ) > NotifyNatDeviceNameDetected_Function;
		virtual bool NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName) 
		{ 
			if (NotifyNatDeviceNameDetected_Function==nullptr) 
				return true; 
			return NotifyNatDeviceNameDetected_Function(remote,rmiContext, natDeviceName); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const double & ) > NotifySendSpeed_Function;
		virtual bool NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed) 
		{ 
			if (NotifySendSpeed_Function==nullptr) 
				return true; 
			return NotifySendSpeed_Function(remote,rmiContext, speed); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & ) > ReportP2PPeerPing_Function;
		virtual bool ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing) 
		{ 
			if (ReportP2PPeerPing_Function==nullptr) 
				return true; 
			return ReportP2PPeerPing_Function(remote,rmiContext, peerID, recentPing); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > C2S_RequestCreateUdpSocket_Function;
		virtual bool C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (C2S_RequestCreateUdpSocket_Function==nullptr) 
				return true; 
			return C2S_RequestCreateUdpSocket_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const bool & ) > C2S_CreateUdpSocketAck_Function;
		virtual bool C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed) 
		{ 
			if (C2S_CreateUdpSocketAck_Function==nullptr) 
				return true; 
			return C2S_CreateUdpSocketAck_Function(remote,rmiContext, succeed); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const HostID & , const int & , const int & ) > ReportC2CUdpMessageCount_Function;
		virtual bool ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount) 
		{ 
			if (ReportC2CUdpMessageCount_Function==nullptr) 
				return true; 
			return ReportC2CUdpMessageCount_Function(remote,rmiContext, peer, udpMessageTrialCount, udpMessageSuccessCount); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > ReportC2SUdpMessageTrialCount_Function;
		virtual bool ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount) 
		{ 
			if (ReportC2SUdpMessageTrialCount_Function==nullptr) 
				return true; 
			return ReportC2SUdpMessageTrialCount_Function(remote,rmiContext, toServerUdpTrialCount); 
		}

	};
#endif

}


