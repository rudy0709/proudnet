  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "DB_stub.h"



const unsigned char sz_DB_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   


namespace DB2C2S {


	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_DB_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_RequestDbCacheClientLogon:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String authenticationKey; __msg >> authenticationKey;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestDbCacheClientLogon);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,authenticationKey);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestDbCacheClientLogon, 
							RmiName_RequestDbCacheClientLogon,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDbCacheClientLogon, 
							RmiName_RequestDbCacheClientLogon, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDbCacheClientLogon, 
							RmiName_RequestDbCacheClientLogon, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDbCacheClientLogon;
							__summary.m_rmiName = RmiName_RequestDbCacheClientLogon;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestDbCacheClientLogon (remote,ctx , authenticationKey );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestDbCacheClientLogon);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDbCacheClientLogon;
						__summary.m_rmiName = RmiName_RequestDbCacheClientLogon;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestExclusiveLoadDataByFieldNameAndValue:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::String fieldName; __msg >> fieldName;
					Proud::CVariant cmpValue; __msg >> cmpValue;
					int64_t tag; __msg >> tag;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestExclusiveLoadDataByFieldNameAndValue);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fieldName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,cmpValue);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue, 
							RmiName_RequestExclusiveLoadDataByFieldNameAndValue,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue, 
							RmiName_RequestExclusiveLoadDataByFieldNameAndValue, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue, 
							RmiName_RequestExclusiveLoadDataByFieldNameAndValue, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue;
							__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByFieldNameAndValue;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestExclusiveLoadDataByFieldNameAndValue (remote,ctx , rootTableName, fieldName, cmpValue, tag, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestExclusiveLoadDataByFieldNameAndValue);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue;
						__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByFieldNameAndValue;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestExclusiveLoadDataByGuid:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					int64_t tag; __msg >> tag;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestExclusiveLoadDataByGuid);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid, 
							RmiName_RequestExclusiveLoadDataByGuid,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid, 
							RmiName_RequestExclusiveLoadDataByGuid, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid, 
							RmiName_RequestExclusiveLoadDataByGuid, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid;
							__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByGuid;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestExclusiveLoadDataByGuid (remote,ctx , rootTableName, rootUUID, tag, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestExclusiveLoadDataByGuid);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid;
						__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByGuid;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestExclusiveLoadDataByQuery:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::String queryString; __msg >> queryString;
					int64_t tag; __msg >> tag;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestExclusiveLoadDataByQuery);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,queryString);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery, 
							RmiName_RequestExclusiveLoadDataByQuery,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery, 
							RmiName_RequestExclusiveLoadDataByQuery, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery, 
							RmiName_RequestExclusiveLoadDataByQuery, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery;
							__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByQuery;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestExclusiveLoadDataByQuery (remote,ctx , rootTableName, queryString, tag, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestExclusiveLoadDataByQuery);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery;
						__summary.m_rmiName = RmiName_RequestExclusiveLoadDataByQuery;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestExclusiveLoadNewData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					int64_t tag; __msg >> tag;
					bool transaction; __msg >> transaction;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestExclusiveLoadNewData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,transaction);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData, 
							RmiName_RequestExclusiveLoadNewData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData, 
							RmiName_RequestExclusiveLoadNewData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData, 
							RmiName_RequestExclusiveLoadNewData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData;
							__summary.m_rmiName = RmiName_RequestExclusiveLoadNewData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestExclusiveLoadNewData (remote,ctx , rootTableName, addDataBlock, tag, transaction );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestExclusiveLoadNewData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData;
						__summary.m_rmiName = RmiName_RequestExclusiveLoadNewData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestUnloadDataBySessionGuid:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::ByteArray messageToNextLoader; __msg >> messageToNextLoader;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUnloadDataBySessionGuid);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToNextLoader);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid, 
							RmiName_RequestUnloadDataBySessionGuid,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid, 
							RmiName_RequestUnloadDataBySessionGuid, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid, 
							RmiName_RequestUnloadDataBySessionGuid, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid;
							__summary.m_rmiName = RmiName_RequestUnloadDataBySessionGuid;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestUnloadDataBySessionGuid (remote,ctx , sessionGuid, messageToNextLoader );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUnloadDataBySessionGuid);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid;
						__summary.m_rmiName = RmiName_RequestUnloadDataBySessionGuid;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_DenyUnloadData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::ByteArray messageToRequester; __msg >> messageToRequester;
					m_core->PostCheckReadMessage(__msg,RmiName_DenyUnloadData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToRequester);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_DenyUnloadData, 
							RmiName_DenyUnloadData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_DenyUnloadData, 
							RmiName_DenyUnloadData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_DenyUnloadData, 
							RmiName_DenyUnloadData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_DenyUnloadData;
							__summary.m_rmiName = RmiName_DenyUnloadData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = DenyUnloadData (remote,ctx , sessionGuid, messageToRequester );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_DenyUnloadData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_DenyUnloadData;
						__summary.m_rmiName = RmiName_DenyUnloadData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestForceCompleteUnload:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestForceCompleteUnload);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestForceCompleteUnload, 
							RmiName_RequestForceCompleteUnload,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestForceCompleteUnload, 
							RmiName_RequestForceCompleteUnload, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestForceCompleteUnload, 
							RmiName_RequestForceCompleteUnload, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestForceCompleteUnload;
							__summary.m_rmiName = RmiName_RequestForceCompleteUnload;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestForceCompleteUnload (remote,ctx , rootUUID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestForceCompleteUnload);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestForceCompleteUnload;
						__summary.m_rmiName = RmiName_RequestForceCompleteUnload;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestAddData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid ownerUUID; __msg >> ownerUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					int64_t tag; __msg >> tag;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestAddData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ownerUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestAddData, 
							RmiName_RequestAddData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAddData, 
							RmiName_RequestAddData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAddData, 
							RmiName_RequestAddData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAddData;
							__summary.m_rmiName = RmiName_RequestAddData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestAddData (remote,ctx , rootUUID, ownerUUID, addDataBlock, tag, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestAddData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAddData;
						__summary.m_rmiName = RmiName_RequestAddData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestUpdateData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					int64_t tag; __msg >> tag;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUpdateData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUpdateData, 
							RmiName_RequestUpdateData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUpdateData, 
							RmiName_RequestUpdateData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUpdateData, 
							RmiName_RequestUpdateData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUpdateData;
							__summary.m_rmiName = RmiName_RequestUpdateData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestUpdateData (remote,ctx , rootUUID, updateDataBlock, tag, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUpdateData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUpdateData;
						__summary.m_rmiName = RmiName_RequestUpdateData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestRemoveData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removeUUID; __msg >> removeUUID;
					int64_t tag; __msg >> tag;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestRemoveData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestRemoveData, 
							RmiName_RequestRemoveData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRemoveData, 
							RmiName_RequestRemoveData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRemoveData, 
							RmiName_RequestRemoveData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRemoveData;
							__summary.m_rmiName = RmiName_RequestRemoveData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestRemoveData (remote,ctx , rootUUID, removeUUID, tag, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestRemoveData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRemoveData;
						__summary.m_rmiName = RmiName_RequestRemoveData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestUpdateDataList:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray changeBlock; __msg >> changeBlock;
					int64_t tag; __msg >> tag;
					bool transaction; __msg >> transaction;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestUpdateDataList);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,changeBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,transaction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestUpdateDataList, 
							RmiName_RequestUpdateDataList,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUpdateDataList, 
							RmiName_RequestUpdateDataList, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestUpdateDataList, 
							RmiName_RequestUpdateDataList, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUpdateDataList;
							__summary.m_rmiName = RmiName_RequestUpdateDataList;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestUpdateDataList (remote,ctx , rootUUID, changeBlock, tag, transaction, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestUpdateDataList);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestUpdateDataList;
						__summary.m_rmiName = RmiName_RequestUpdateDataList;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_AddData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid ownerUUID; __msg >> ownerUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					bool writeDbmsImmediately; __msg >> writeDbmsImmediately;
					m_core->PostCheckReadMessage(__msg,RmiName_AddData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ownerUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,writeDbmsImmediately);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_AddData, 
							RmiName_AddData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_AddData, 
							RmiName_AddData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_AddData, 
							RmiName_AddData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_AddData;
							__summary.m_rmiName = RmiName_AddData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = AddData (remote,ctx , rootUUID, ownerUUID, addDataBlock, writeDbmsImmediately );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_AddData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_AddData;
						__summary.m_rmiName = RmiName_AddData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_UpdateData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					bool writeDbmsImmediately; __msg >> writeDbmsImmediately;
					m_core->PostCheckReadMessage(__msg,RmiName_UpdateData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,writeDbmsImmediately);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_UpdateData, 
							RmiName_UpdateData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_UpdateData, 
							RmiName_UpdateData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_UpdateData, 
							RmiName_UpdateData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_UpdateData;
							__summary.m_rmiName = RmiName_UpdateData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = UpdateData (remote,ctx , rootUUID, updateDataBlock, writeDbmsImmediately );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_UpdateData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_UpdateData;
						__summary.m_rmiName = RmiName_UpdateData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RemoveData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removeUUID; __msg >> removeUUID;
					bool writeDbmsImmediately; __msg >> writeDbmsImmediately;
					m_core->PostCheckReadMessage(__msg,RmiName_RemoveData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,writeDbmsImmediately);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RemoveData, 
							RmiName_RemoveData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RemoveData, 
							RmiName_RemoveData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RemoveData, 
							RmiName_RemoveData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RemoveData;
							__summary.m_rmiName = RmiName_RemoveData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RemoveData (remote,ctx , rootUUID, removeUUID, writeDbmsImmediately );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RemoveData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RemoveData;
						__summary.m_rmiName = RmiName_RemoveData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_UpdateDataList:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					bool transactional; __msg >> transactional;
					bool writeDbmsImmediately; __msg >> writeDbmsImmediately;
					m_core->PostCheckReadMessage(__msg,RmiName_UpdateDataList);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,transactional);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,writeDbmsImmediately);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_UpdateDataList, 
							RmiName_UpdateDataList,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_UpdateDataList, 
							RmiName_UpdateDataList, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_UpdateDataList, 
							RmiName_UpdateDataList, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_UpdateDataList;
							__summary.m_rmiName = RmiName_UpdateDataList;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = UpdateDataList (remote,ctx , rootUUID, updateDataBlock, transactional, writeDbmsImmediately );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_UpdateDataList);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_UpdateDataList;
						__summary.m_rmiName = RmiName_UpdateDataList;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_MoveData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid nodeUUID; __msg >> nodeUUID;
					Proud::Guid destRootUUID; __msg >> destRootUUID;
					Proud::Guid destNodeUUID; __msg >> destNodeUUID;
					bool writeDbmsImmediately; __msg >> writeDbmsImmediately;
					m_core->PostCheckReadMessage(__msg,RmiName_MoveData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,nodeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,destRootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,destNodeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,writeDbmsImmediately);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_MoveData, 
							RmiName_MoveData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_MoveData, 
							RmiName_MoveData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_MoveData, 
							RmiName_MoveData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_MoveData;
							__summary.m_rmiName = RmiName_MoveData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = MoveData (remote,ctx , rootTableName, rootUUID, nodeUUID, destRootUUID, destNodeUUID, writeDbmsImmediately );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_MoveData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_MoveData;
						__summary.m_rmiName = RmiName_MoveData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::String fieldName; __msg >> fieldName;
					Proud::CVariant cmpValue; __msg >> cmpValue;
					int64_t tag; __msg >> tag;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fieldName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,cmpValue);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue, 
							RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue, 
							RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue, 
							RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
							__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveSnapshotDataByFieldNameAndValue (remote,ctx , rootTableName, fieldName, cmpValue, tag );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
						__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveSnapshotDataByGuid:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					int64_t tag; __msg >> tag;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveSnapshotDataByGuid);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid, 
							RmiName_RequestNonExclusiveSnapshotDataByGuid,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid, 
							RmiName_RequestNonExclusiveSnapshotDataByGuid, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid, 
							RmiName_RequestNonExclusiveSnapshotDataByGuid, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid;
							__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByGuid;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveSnapshotDataByGuid (remote,ctx , rootTableName, rootUUID, tag );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveSnapshotDataByGuid);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid;
						__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByGuid;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveSnapshotDataByQuery:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::String queryString; __msg >> queryString;
					int64_t tag; __msg >> tag;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveSnapshotDataByQuery);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,queryString);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery, 
							RmiName_RequestNonExclusiveSnapshotDataByQuery,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery, 
							RmiName_RequestNonExclusiveSnapshotDataByQuery, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery, 
							RmiName_RequestNonExclusiveSnapshotDataByQuery, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery;
							__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByQuery;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveSnapshotDataByQuery (remote,ctx , rootTableName, queryString, tag );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveSnapshotDataByQuery);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery;
						__summary.m_rmiName = RmiName_RequestNonExclusiveSnapshotDataByQuery;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveAddData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid ownerUUID; __msg >> ownerUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					int64_t tag; __msg >> tag;
					Proud::ByteArray messageToLoader; __msg >> messageToLoader;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveAddData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ownerUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToLoader);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveAddData, 
							RmiName_RequestNonExclusiveAddData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveAddData, 
							RmiName_RequestNonExclusiveAddData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveAddData, 
							RmiName_RequestNonExclusiveAddData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveAddData;
							__summary.m_rmiName = RmiName_RequestNonExclusiveAddData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveAddData (remote,ctx , rootTableName, rootUUID, ownerUUID, addDataBlock, tag, messageToLoader );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveAddData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveAddData;
						__summary.m_rmiName = RmiName_RequestNonExclusiveAddData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveRemoveData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removeUUID; __msg >> removeUUID;
					int64_t tag; __msg >> tag;
					Proud::ByteArray messageToLoader; __msg >> messageToLoader;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveRemoveData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToLoader);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData, 
							RmiName_RequestNonExclusiveRemoveData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData, 
							RmiName_RequestNonExclusiveRemoveData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData, 
							RmiName_RequestNonExclusiveRemoveData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData;
							__summary.m_rmiName = RmiName_RequestNonExclusiveRemoveData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveRemoveData (remote,ctx , rootTableName, rootUUID, removeUUID, tag, messageToLoader );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveRemoveData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData;
						__summary.m_rmiName = RmiName_RequestNonExclusiveRemoveData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveSetValueIf:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid nodeUUID; __msg >> nodeUUID;
					Proud::String propertyName; __msg >> propertyName;
					Proud::CVariant newValue; __msg >> newValue;
					int compareType; __msg >> compareType;
					Proud::CVariant compareValue; __msg >> compareValue;
					int64_t tag; __msg >> tag;
					Proud::ByteArray messageToLoader; __msg >> messageToLoader;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveSetValueIf);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,nodeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,propertyName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,newValue);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,compareType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,compareValue);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToLoader);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf, 
							RmiName_RequestNonExclusiveSetValueIf,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf, 
							RmiName_RequestNonExclusiveSetValueIf, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf, 
							RmiName_RequestNonExclusiveSetValueIf, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf;
							__summary.m_rmiName = RmiName_RequestNonExclusiveSetValueIf;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveSetValueIf (remote,ctx , rootTableName, rootUUID, nodeUUID, propertyName, newValue, compareType, compareValue, tag, messageToLoader );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveSetValueIf);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf;
						__summary.m_rmiName = RmiName_RequestNonExclusiveSetValueIf;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestNonExclusiveModifyValue:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid nodeUUID; __msg >> nodeUUID;
					Proud::String propertyName; __msg >> propertyName;
					int operType; __msg >> operType;
					Proud::CVariant value; __msg >> value;
					int64_t tag; __msg >> tag;
					Proud::ByteArray messageToLoader; __msg >> messageToLoader;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestNonExclusiveModifyValue);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,nodeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,propertyName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,operType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,value);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageToLoader);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue, 
							RmiName_RequestNonExclusiveModifyValue,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue, 
							RmiName_RequestNonExclusiveModifyValue, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue, 
							RmiName_RequestNonExclusiveModifyValue, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue;
							__summary.m_rmiName = RmiName_RequestNonExclusiveModifyValue;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestNonExclusiveModifyValue (remote,ctx , rootTableName, rootUUID, nodeUUID, propertyName, operType, value, tag, messageToLoader );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestNonExclusiveModifyValue);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue;
						__summary.m_rmiName = RmiName_RequestNonExclusiveModifyValue;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestIsolateData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::String rootTableName; __msg >> rootTableName;
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestIsolateData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootTableName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,sessionGuid);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestIsolateData, 
							RmiName_RequestIsolateData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestIsolateData, 
							RmiName_RequestIsolateData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestIsolateData, 
							RmiName_RequestIsolateData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestIsolateData;
							__summary.m_rmiName = RmiName_RequestIsolateData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestIsolateData (remote,ctx , rootUUID, rootTableName, sessionGuid );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestIsolateData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestIsolateData;
						__summary.m_rmiName = RmiName_RequestIsolateData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestDeisolateData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::String filterText; __msg >> filterText;
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestDeisolateData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,filterText);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,sessionGuid);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestDeisolateData, 
							RmiName_RequestDeisolateData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDeisolateData, 
							RmiName_RequestDeisolateData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestDeisolateData, 
							RmiName_RequestDeisolateData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDeisolateData;
							__summary.m_rmiName = RmiName_RequestDeisolateData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestDeisolateData (remote,ctx , rootUUID, filterText, sessionGuid );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestDeisolateData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestDeisolateData;
						__summary.m_rmiName = RmiName_RequestDeisolateData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestDbCacheClientLogon =_PNT("RequestDbCacheClientLogon");
	#else
	const PNTCHAR* Stub::RmiName_RequestDbCacheClientLogon =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByFieldNameAndValue =_PNT("RequestExclusiveLoadDataByFieldNameAndValue");
	#else
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByFieldNameAndValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByGuid =_PNT("RequestExclusiveLoadDataByGuid");
	#else
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByGuid =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByQuery =_PNT("RequestExclusiveLoadDataByQuery");
	#else
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadDataByQuery =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadNewData =_PNT("RequestExclusiveLoadNewData");
	#else
	const PNTCHAR* Stub::RmiName_RequestExclusiveLoadNewData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUnloadDataBySessionGuid =_PNT("RequestUnloadDataBySessionGuid");
	#else
	const PNTCHAR* Stub::RmiName_RequestUnloadDataBySessionGuid =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_DenyUnloadData =_PNT("DenyUnloadData");
	#else
	const PNTCHAR* Stub::RmiName_DenyUnloadData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestForceCompleteUnload =_PNT("RequestForceCompleteUnload");
	#else
	const PNTCHAR* Stub::RmiName_RequestForceCompleteUnload =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestAddData =_PNT("RequestAddData");
	#else
	const PNTCHAR* Stub::RmiName_RequestAddData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUpdateData =_PNT("RequestUpdateData");
	#else
	const PNTCHAR* Stub::RmiName_RequestUpdateData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestRemoveData =_PNT("RequestRemoveData");
	#else
	const PNTCHAR* Stub::RmiName_RequestRemoveData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestUpdateDataList =_PNT("RequestUpdateDataList");
	#else
	const PNTCHAR* Stub::RmiName_RequestUpdateDataList =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_AddData =_PNT("AddData");
	#else
	const PNTCHAR* Stub::RmiName_AddData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_UpdateData =_PNT("UpdateData");
	#else
	const PNTCHAR* Stub::RmiName_UpdateData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RemoveData =_PNT("RemoveData");
	#else
	const PNTCHAR* Stub::RmiName_RemoveData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_UpdateDataList =_PNT("UpdateDataList");
	#else
	const PNTCHAR* Stub::RmiName_UpdateDataList =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_MoveData =_PNT("MoveData");
	#else
	const PNTCHAR* Stub::RmiName_MoveData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue =_PNT("RequestNonExclusiveSnapshotDataByFieldNameAndValue");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByGuid =_PNT("RequestNonExclusiveSnapshotDataByGuid");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByGuid =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByQuery =_PNT("RequestNonExclusiveSnapshotDataByQuery");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSnapshotDataByQuery =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveAddData =_PNT("RequestNonExclusiveAddData");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveAddData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveRemoveData =_PNT("RequestNonExclusiveRemoveData");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveRemoveData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSetValueIf =_PNT("RequestNonExclusiveSetValueIf");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveSetValueIf =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveModifyValue =_PNT("RequestNonExclusiveModifyValue");
	#else
	const PNTCHAR* Stub::RmiName_RequestNonExclusiveModifyValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestIsolateData =_PNT("RequestIsolateData");
	#else
	const PNTCHAR* Stub::RmiName_RequestIsolateData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestDeisolateData =_PNT("RequestDeisolateData");
	#else
	const PNTCHAR* Stub::RmiName_RequestDeisolateData =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestDbCacheClientLogon;

}



namespace DB2S2C {


	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_DB_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_NotifyDbCacheClientLogonFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::ErrorType reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDbCacheClientLogonFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed, 
							RmiName_NotifyDbCacheClientLogonFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed, 
							RmiName_NotifyDbCacheClientLogonFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed, 
							RmiName_NotifyDbCacheClientLogonFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed;
							__summary.m_rmiName = RmiName_NotifyDbCacheClientLogonFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDbCacheClientLogonFailed (remote,ctx , reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDbCacheClientLogonFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed;
						__summary.m_rmiName = RmiName_NotifyDbCacheClientLogonFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDbCacheClientLogonSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDbCacheClientLogonSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess, 
							RmiName_NotifyDbCacheClientLogonSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess, 
							RmiName_NotifyDbCacheClientLogonSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess, 
							RmiName_NotifyDbCacheClientLogonSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess;
							__summary.m_rmiName = RmiName_NotifyDbCacheClientLogonSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDbCacheClientLogonSuccess (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDbCacheClientLogonSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess;
						__summary.m_rmiName = RmiName_NotifyDbCacheClientLogonSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyLoadDataComplete:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					bool isExclusive; __msg >> isExclusive;
					int64_t tag; __msg >> tag;
					Proud::CFastArray<Proud::ByteArray> successList_loadedData; __msg >> successList_loadedData;
					Proud::CFastArray<Proud::Guid> successList_sessionGuid; __msg >> successList_sessionGuid;
					Proud::CFastArray<Proud::ByteArray> successList_message; __msg >> successList_message;
					Proud::CFastArray<Proud::Guid> failList_uuid; __msg >> failList_uuid;
					Proud::CFastArray<Proud::ErrorType> failList_reason; __msg >> failList_reason;
					Proud::CFastArray<Proud::String> failList_comment; __msg >> failList_comment;
					Proud::CFastArray<int32_t> failList_hresult; __msg >> failList_hresult;
					Proud::CFastArray<Proud::ByteArray> failList_message; __msg >> failList_message;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoadDataComplete);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,isExclusive);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,successList_loadedData);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,successList_sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,successList_message);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,failList_uuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,failList_reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,failList_comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,failList_hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,failList_message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoadDataComplete, 
							RmiName_NotifyLoadDataComplete,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoadDataComplete, 
							RmiName_NotifyLoadDataComplete, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoadDataComplete, 
							RmiName_NotifyLoadDataComplete, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoadDataComplete;
							__summary.m_rmiName = RmiName_NotifyLoadDataComplete;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyLoadDataComplete (remote,ctx , isExclusive, tag, successList_loadedData, successList_sessionGuid, successList_message, failList_uuid, failList_reason, failList_comment, failList_hresult, failList_message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoadDataComplete);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoadDataComplete;
						__summary.m_rmiName = RmiName_NotifyLoadDataComplete;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDataUnloadRequested:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::CFastArray<Proud::Guid> sessionList; __msg >> sessionList;
					Proud::CFastArray<Proud::ByteArray> messageList; __msg >> messageList;
					bool commonMessage; __msg >> commonMessage;
					int64_t unloadRequestTimeoutTimeMs; __msg >> unloadRequestTimeoutTimeMs;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDataUnloadRequested);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionList);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageList);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,commonMessage);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,unloadRequestTimeoutTimeMs);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDataUnloadRequested, 
							RmiName_NotifyDataUnloadRequested,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDataUnloadRequested, 
							RmiName_NotifyDataUnloadRequested, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDataUnloadRequested, 
							RmiName_NotifyDataUnloadRequested, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDataUnloadRequested;
							__summary.m_rmiName = RmiName_NotifyDataUnloadRequested;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDataUnloadRequested (remote,ctx , sessionList, messageList, commonMessage, unloadRequestTimeoutTimeMs );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDataUnloadRequested);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDataUnloadRequested;
						__summary.m_rmiName = RmiName_NotifyDataUnloadRequested;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUnloadRequestTimeoutTimeMs:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t unloadRequestTimeoutTimeMs; __msg >> unloadRequestTimeoutTimeMs;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUnloadRequestTimeoutTimeMs);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,unloadRequestTimeoutTimeMs);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs, 
							RmiName_NotifyUnloadRequestTimeoutTimeMs,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs, 
							RmiName_NotifyUnloadRequestTimeoutTimeMs, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs, 
							RmiName_NotifyUnloadRequestTimeoutTimeMs, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs;
							__summary.m_rmiName = RmiName_NotifyUnloadRequestTimeoutTimeMs;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUnloadRequestTimeoutTimeMs (remote,ctx , unloadRequestTimeoutTimeMs );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUnloadRequestTimeoutTimeMs);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs;
						__summary.m_rmiName = RmiName_NotifyUnloadRequestTimeoutTimeMs;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyAddDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyAddDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataFailed, 
							RmiName_NotifyAddDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataFailed, 
							RmiName_NotifyAddDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataFailed, 
							RmiName_NotifyAddDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddDataFailed;
							__summary.m_rmiName = RmiName_NotifyAddDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyAddDataFailed (remote,ctx , tag, reason, comment, hresult, source, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyAddDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddDataFailed;
						__summary.m_rmiName = RmiName_NotifyAddDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyAddDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyAddDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataSuccess, 
							RmiName_NotifyAddDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataSuccess, 
							RmiName_NotifyAddDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddDataSuccess, 
							RmiName_NotifyAddDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddDataSuccess;
							__summary.m_rmiName = RmiName_NotifyAddDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyAddDataSuccess (remote,ctx , tag, rootUUID, addDataBlock, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyAddDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddDataSuccess;
						__summary.m_rmiName = RmiName_NotifyAddDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUpdateDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUpdateDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataFailed, 
							RmiName_NotifyUpdateDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataFailed, 
							RmiName_NotifyUpdateDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataFailed, 
							RmiName_NotifyUpdateDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataFailed;
							__summary.m_rmiName = RmiName_NotifyUpdateDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUpdateDataFailed (remote,ctx , tag, reason, comment, hresult, source, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUpdateDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataFailed;
						__summary.m_rmiName = RmiName_NotifyUpdateDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUpdateDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updataDataBlock; __msg >> updataDataBlock;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUpdateDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updataDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess, 
							RmiName_NotifyUpdateDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess, 
							RmiName_NotifyUpdateDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess, 
							RmiName_NotifyUpdateDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess;
							__summary.m_rmiName = RmiName_NotifyUpdateDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUpdateDataSuccess (remote,ctx , tag, rootUUID, updataDataBlock, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUpdateDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess;
						__summary.m_rmiName = RmiName_NotifyUpdateDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUpdateDataListFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUpdateDataListFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed, 
							RmiName_NotifyUpdateDataListFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed, 
							RmiName_NotifyUpdateDataListFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed, 
							RmiName_NotifyUpdateDataListFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed;
							__summary.m_rmiName = RmiName_NotifyUpdateDataListFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUpdateDataListFailed (remote,ctx , tag, reason, comment, hresult, source, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUpdateDataListFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed;
						__summary.m_rmiName = RmiName_NotifyUpdateDataListFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUpdateDataListSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUpdateDataListSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess, 
							RmiName_NotifyUpdateDataListSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess, 
							RmiName_NotifyUpdateDataListSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess, 
							RmiName_NotifyUpdateDataListSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess;
							__summary.m_rmiName = RmiName_NotifyUpdateDataListSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUpdateDataListSuccess (remote,ctx , tag, rootUUID, updateDataBlock, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUpdateDataListSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess;
						__summary.m_rmiName = RmiName_NotifyUpdateDataListSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyRemoveDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyRemoveDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataFailed, 
							RmiName_NotifyRemoveDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataFailed, 
							RmiName_NotifyRemoveDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataFailed, 
							RmiName_NotifyRemoveDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveDataFailed;
							__summary.m_rmiName = RmiName_NotifyRemoveDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyRemoveDataFailed (remote,ctx , tag, reason, comment, hresult, source, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyRemoveDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveDataFailed;
						__summary.m_rmiName = RmiName_NotifyRemoveDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyRemoveDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removedUUID; __msg >> removedUUID;
					bool blocked; __msg >> blocked;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyRemoveDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removedUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,blocked);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess, 
							RmiName_NotifyRemoveDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess, 
							RmiName_NotifyRemoveDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess, 
							RmiName_NotifyRemoveDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess;
							__summary.m_rmiName = RmiName_NotifyRemoveDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyRemoveDataSuccess (remote,ctx , tag, rootUUID, removedUUID, blocked );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyRemoveDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess;
						__summary.m_rmiName = RmiName_NotifyRemoveDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveAddDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveAddDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed, 
							RmiName_NotifyNonExclusiveAddDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed, 
							RmiName_NotifyNonExclusiveAddDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed, 
							RmiName_NotifyNonExclusiveAddDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveAddDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveAddDataFailed (remote,ctx , tag, reason, comment, hresult, source );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveAddDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveAddDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveAddDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveAddDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess, 
							RmiName_NotifyNonExclusiveAddDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess, 
							RmiName_NotifyNonExclusiveAddDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess, 
							RmiName_NotifyNonExclusiveAddDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveAddDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveAddDataSuccess (remote,ctx , tag, rootUUID, addDataBlock );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveAddDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveAddDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifySomeoneAddData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray addDataBlock; __msg >> addDataBlock;
					Proud::ByteArray message; __msg >> message;
					Proud::Guid destParentUUID; __msg >> destParentUUID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySomeoneAddData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,destParentUUID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneAddData, 
							RmiName_NotifySomeoneAddData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneAddData, 
							RmiName_NotifySomeoneAddData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneAddData, 
							RmiName_NotifySomeoneAddData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneAddData;
							__summary.m_rmiName = RmiName_NotifySomeoneAddData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifySomeoneAddData (remote,ctx , rootUUID, addDataBlock, message, destParentUUID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySomeoneAddData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneAddData;
						__summary.m_rmiName = RmiName_NotifySomeoneAddData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveRemoveDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveRemoveDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed, 
							RmiName_NotifyNonExclusiveRemoveDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed, 
							RmiName_NotifyNonExclusiveRemoveDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed, 
							RmiName_NotifyNonExclusiveRemoveDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveRemoveDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveRemoveDataFailed (remote,ctx , tag, reason, comment, hresult, source );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveRemoveDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveRemoveDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveRemoveDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removeUUID; __msg >> removeUUID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveRemoveDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removeUUID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess, 
							RmiName_NotifyNonExclusiveRemoveDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess, 
							RmiName_NotifyNonExclusiveRemoveDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess, 
							RmiName_NotifyNonExclusiveRemoveDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveRemoveDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveRemoveDataSuccess (remote,ctx , tag, rootUUID, removeUUID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveRemoveDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveRemoveDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifySomeoneRemoveData:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::Guid removeUUID; __msg >> removeUUID;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySomeoneRemoveData);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,removeUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneRemoveData, 
							RmiName_NotifySomeoneRemoveData,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneRemoveData, 
							RmiName_NotifySomeoneRemoveData, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneRemoveData, 
							RmiName_NotifySomeoneRemoveData, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneRemoveData;
							__summary.m_rmiName = RmiName_NotifySomeoneRemoveData;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifySomeoneRemoveData (remote,ctx , rootUUID, removeUUID, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySomeoneRemoveData);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneRemoveData;
						__summary.m_rmiName = RmiName_NotifySomeoneRemoveData;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveSetValueFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveSetValueFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed, 
							RmiName_NotifyNonExclusiveSetValueFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed, 
							RmiName_NotifyNonExclusiveSetValueFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed, 
							RmiName_NotifyNonExclusiveSetValueFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveSetValueFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveSetValueFailed (remote,ctx , tag, reason, comment, hresult, source );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveSetValueFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveSetValueFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveSetValueSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveSetValueSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess, 
							RmiName_NotifyNonExclusiveSetValueSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess, 
							RmiName_NotifyNonExclusiveSetValueSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess, 
							RmiName_NotifyNonExclusiveSetValueSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveSetValueSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveSetValueSuccess (remote,ctx , tag, rootUUID, updateDataBlock );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveSetValueSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveSetValueSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifySomeoneSetValue:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySomeoneSetValue);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneSetValue, 
							RmiName_NotifySomeoneSetValue,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneSetValue, 
							RmiName_NotifySomeoneSetValue, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneSetValue, 
							RmiName_NotifySomeoneSetValue, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneSetValue;
							__summary.m_rmiName = RmiName_NotifySomeoneSetValue;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifySomeoneSetValue (remote,ctx , rootUUID, updateDataBlock, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySomeoneSetValue);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneSetValue;
						__summary.m_rmiName = RmiName_NotifySomeoneSetValue;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveModifyValueFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					int32_t hresult; __msg >> hresult;
					Proud::String source; __msg >> source;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveModifyValueFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,hresult);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,source);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed, 
							RmiName_NotifyNonExclusiveModifyValueFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed, 
							RmiName_NotifyNonExclusiveModifyValueFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed, 
							RmiName_NotifyNonExclusiveModifyValueFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveModifyValueFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveModifyValueFailed (remote,ctx , tag, reason, comment, hresult, source );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveModifyValueFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveModifyValueFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNonExclusiveModifyValueSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNonExclusiveModifyValueSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess, 
							RmiName_NotifyNonExclusiveModifyValueSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess, 
							RmiName_NotifyNonExclusiveModifyValueSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess, 
							RmiName_NotifyNonExclusiveModifyValueSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess;
							__summary.m_rmiName = RmiName_NotifyNonExclusiveModifyValueSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNonExclusiveModifyValueSuccess (remote,ctx , tag, rootUUID, updateDataBlock );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNonExclusiveModifyValueSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess;
						__summary.m_rmiName = RmiName_NotifyNonExclusiveModifyValueSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifySomeoneModifyValue:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray updateDataBlock; __msg >> updateDataBlock;
					Proud::ByteArray message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySomeoneModifyValue);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,updateDataBlock);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneModifyValue, 
							RmiName_NotifySomeoneModifyValue,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneModifyValue, 
							RmiName_NotifySomeoneModifyValue, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySomeoneModifyValue, 
							RmiName_NotifySomeoneModifyValue, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneModifyValue;
							__summary.m_rmiName = RmiName_NotifySomeoneModifyValue;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifySomeoneModifyValue (remote,ctx , rootUUID, updateDataBlock, message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySomeoneModifyValue);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySomeoneModifyValue;
						__summary.m_rmiName = RmiName_NotifySomeoneModifyValue;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyWarning:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::ErrorType errorType; __msg >> errorType;
					Proud::ErrorType detailtype; __msg >> detailtype;
					Proud::String comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyWarning);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,errorType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,detailtype);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyWarning, 
							RmiName_NotifyWarning,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyWarning, 
							RmiName_NotifyWarning, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyWarning, 
							RmiName_NotifyWarning, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyWarning;
							__summary.m_rmiName = RmiName_NotifyWarning;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyWarning (remote,ctx , errorType, detailtype, comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyWarning);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyWarning;
						__summary.m_rmiName = RmiName_NotifyWarning;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDbmsWriteDone:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::DbmsWritePropNodePendType type; __msg >> type;
					Proud::Guid loadeeGuid; __msg >> loadeeGuid;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDbmsWriteDone);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,type);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,loadeeGuid);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsWriteDone, 
							RmiName_NotifyDbmsWriteDone,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsWriteDone, 
							RmiName_NotifyDbmsWriteDone, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsWriteDone, 
							RmiName_NotifyDbmsWriteDone, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbmsWriteDone;
							__summary.m_rmiName = RmiName_NotifyDbmsWriteDone;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDbmsWriteDone (remote,ctx , type, loadeeGuid );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDbmsWriteDone);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbmsWriteDone;
						__summary.m_rmiName = RmiName_NotifyDbmsWriteDone;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDbmsAccessError:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int64_t tag; __msg >> tag;
					Proud::ByteArray message; __msg >> message;
					Proud::String comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDbmsAccessError);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tag);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,message);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsAccessError, 
							RmiName_NotifyDbmsAccessError,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsAccessError, 
							RmiName_NotifyDbmsAccessError, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDbmsAccessError, 
							RmiName_NotifyDbmsAccessError, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbmsAccessError;
							__summary.m_rmiName = RmiName_NotifyDbmsAccessError;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDbmsAccessError (remote,ctx , tag, message, comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDbmsAccessError);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDbmsAccessError;
						__summary.m_rmiName = RmiName_NotifyDbmsAccessError;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyIsolateDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray dataBlock; __msg >> dataBlock;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyIsolateDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,dataBlock);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess, 
							RmiName_NotifyIsolateDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess, 
							RmiName_NotifyIsolateDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess, 
							RmiName_NotifyIsolateDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess;
							__summary.m_rmiName = RmiName_NotifyIsolateDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyIsolateDataSuccess (remote,ctx , sessionGuid, rootUUID, dataBlock );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyIsolateDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess;
						__summary.m_rmiName = RmiName_NotifyIsolateDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyIsolateDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyIsolateDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataFailed, 
							RmiName_NotifyIsolateDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataFailed, 
							RmiName_NotifyIsolateDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyIsolateDataFailed, 
							RmiName_NotifyIsolateDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyIsolateDataFailed;
							__summary.m_rmiName = RmiName_NotifyIsolateDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyIsolateDataFailed (remote,ctx , sessionGuid, reason, comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyIsolateDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyIsolateDataFailed;
						__summary.m_rmiName = RmiName_NotifyIsolateDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDeisolateDataSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::Guid rootUUID; __msg >> rootUUID;
					Proud::ByteArray dataBlock; __msg >> dataBlock;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeisolateDataSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootUUID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,dataBlock);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess, 
							RmiName_NotifyDeisolateDataSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess, 
							RmiName_NotifyDeisolateDataSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess, 
							RmiName_NotifyDeisolateDataSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess;
							__summary.m_rmiName = RmiName_NotifyDeisolateDataSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDeisolateDataSuccess (remote,ctx , sessionGuid, rootUUID, dataBlock );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeisolateDataSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess;
						__summary.m_rmiName = RmiName_NotifyDeisolateDataSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDeisolateDataFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::ErrorType reason; __msg >> reason;
					Proud::String comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDeisolateDataFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed, 
							RmiName_NotifyDeisolateDataFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed, 
							RmiName_NotifyDeisolateDataFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed, 
							RmiName_NotifyDeisolateDataFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed;
							__summary.m_rmiName = RmiName_NotifyDeisolateDataFailed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDeisolateDataFailed (remote,ctx , sessionGuid, reason, comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDeisolateDataFailed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed;
						__summary.m_rmiName = RmiName_NotifyDeisolateDataFailed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyDataForceUnloaded:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::Guid sessionGuid; __msg >> sessionGuid;
					Proud::Guid rootGuid; __msg >> rootGuid;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyDataForceUnloaded);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,sessionGuid);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,rootGuid);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyDataForceUnloaded, 
							RmiName_NotifyDataForceUnloaded,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDataForceUnloaded, 
							RmiName_NotifyDataForceUnloaded, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyDataForceUnloaded, 
							RmiName_NotifyDataForceUnloaded, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDataForceUnloaded;
							__summary.m_rmiName = RmiName_NotifyDataForceUnloaded;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyDataForceUnloaded (remote,ctx , sessionGuid, rootGuid );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyDataForceUnloaded);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyDataForceUnloaded;
						__summary.m_rmiName = RmiName_NotifyDataForceUnloaded;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDbCacheClientLogonFailed =_PNT("NotifyDbCacheClientLogonFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDbCacheClientLogonFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDbCacheClientLogonSuccess =_PNT("NotifyDbCacheClientLogonSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDbCacheClientLogonSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoadDataComplete =_PNT("NotifyLoadDataComplete");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoadDataComplete =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDataUnloadRequested =_PNT("NotifyDataUnloadRequested");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDataUnloadRequested =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUnloadRequestTimeoutTimeMs =_PNT("NotifyUnloadRequestTimeoutTimeMs");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUnloadRequestTimeoutTimeMs =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyAddDataFailed =_PNT("NotifyAddDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyAddDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyAddDataSuccess =_PNT("NotifyAddDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyAddDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataFailed =_PNT("NotifyUpdateDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataSuccess =_PNT("NotifyUpdateDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataListFailed =_PNT("NotifyUpdateDataListFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataListFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataListSuccess =_PNT("NotifyUpdateDataListSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUpdateDataListSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyRemoveDataFailed =_PNT("NotifyRemoveDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyRemoveDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyRemoveDataSuccess =_PNT("NotifyRemoveDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyRemoveDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveAddDataFailed =_PNT("NotifyNonExclusiveAddDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveAddDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveAddDataSuccess =_PNT("NotifyNonExclusiveAddDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveAddDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySomeoneAddData =_PNT("NotifySomeoneAddData");
	#else
	const PNTCHAR* Stub::RmiName_NotifySomeoneAddData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveRemoveDataFailed =_PNT("NotifyNonExclusiveRemoveDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveRemoveDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveRemoveDataSuccess =_PNT("NotifyNonExclusiveRemoveDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveRemoveDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySomeoneRemoveData =_PNT("NotifySomeoneRemoveData");
	#else
	const PNTCHAR* Stub::RmiName_NotifySomeoneRemoveData =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveSetValueFailed =_PNT("NotifyNonExclusiveSetValueFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveSetValueFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveSetValueSuccess =_PNT("NotifyNonExclusiveSetValueSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveSetValueSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySomeoneSetValue =_PNT("NotifySomeoneSetValue");
	#else
	const PNTCHAR* Stub::RmiName_NotifySomeoneSetValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveModifyValueFailed =_PNT("NotifyNonExclusiveModifyValueFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveModifyValueFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveModifyValueSuccess =_PNT("NotifyNonExclusiveModifyValueSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNonExclusiveModifyValueSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySomeoneModifyValue =_PNT("NotifySomeoneModifyValue");
	#else
	const PNTCHAR* Stub::RmiName_NotifySomeoneModifyValue =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyWarning =_PNT("NotifyWarning");
	#else
	const PNTCHAR* Stub::RmiName_NotifyWarning =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDbmsWriteDone =_PNT("NotifyDbmsWriteDone");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDbmsWriteDone =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDbmsAccessError =_PNT("NotifyDbmsAccessError");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDbmsAccessError =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyIsolateDataSuccess =_PNT("NotifyIsolateDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyIsolateDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyIsolateDataFailed =_PNT("NotifyIsolateDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyIsolateDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeisolateDataSuccess =_PNT("NotifyDeisolateDataSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeisolateDataSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDeisolateDataFailed =_PNT("NotifyDeisolateDataFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDeisolateDataFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyDataForceUnloaded =_PNT("NotifyDataForceUnloaded");
	#else
	const PNTCHAR* Stub::RmiName_NotifyDataForceUnloaded =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_NotifyDbCacheClientLogonFailed;

}



