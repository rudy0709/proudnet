  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "AgentC2S_common.h"

     
namespace AgentC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestCredential ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_RequestCredential bool RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie) PN_OVERRIDE

#define DEFRMI_AgentC2S_RequestCredential(DerivedClass) bool DerivedClass::RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie)
#define CALL_AgentC2S_RequestCredential RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie)
#define PARAM_AgentC2S_RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie)
               
		virtual bool ReportStatusBegin ( ::Proud::HostID, ::Proud::RmiContext& , const byte & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_ReportStatusBegin bool ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText) PN_OVERRIDE

#define DEFRMI_AgentC2S_ReportStatusBegin(DerivedClass) bool DerivedClass::ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText)
#define CALL_AgentC2S_ReportStatusBegin ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText)
#define PARAM_AgentC2S_ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText)
               
		virtual bool ReportStatusValue ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_ReportStatusValue bool ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value) PN_OVERRIDE

#define DEFRMI_AgentC2S_ReportStatusValue(DerivedClass) bool DerivedClass::ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value)
#define CALL_AgentC2S_ReportStatusValue ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value)
#define PARAM_AgentC2S_ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value)
               
		virtual bool ReportStatusEnd ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_ReportStatusEnd bool ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_AgentC2S_ReportStatusEnd(DerivedClass) bool DerivedClass::ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_AgentC2S_ReportStatusEnd ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_AgentC2S_ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool ReportServerAppState ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const uint32_t & )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_ReportServerAppState bool ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize) PN_OVERRIDE

#define DEFRMI_AgentC2S_ReportServerAppState(DerivedClass) bool DerivedClass::ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize)
#define CALL_AgentC2S_ReportServerAppState ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize)
#define PARAM_AgentC2S_ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize)
               
		virtual bool EventLog ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_AgentC2S_EventLog bool EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt) PN_OVERRIDE

#define DEFRMI_AgentC2S_EventLog(DerivedClass) bool DerivedClass::EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt)
#define CALL_AgentC2S_EventLog EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt)
#define PARAM_AgentC2S_EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestCredential;
		static const PNTCHAR* RmiName_ReportStatusBegin;
		static const PNTCHAR* RmiName_ReportStatusValue;
		static const PNTCHAR* RmiName_ReportStatusEnd;
		static const PNTCHAR* RmiName_ReportServerAppState;
		static const PNTCHAR* RmiName_EventLog;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > RequestCredential_Function;
		virtual bool RequestCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & cookie) 
		{ 
			if (RequestCredential_Function==nullptr) 
				return true; 
			return RequestCredential_Function(remote,rmiContext, cookie); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const byte & , const Proud::String & ) > ReportStatusBegin_Function;
		virtual bool ReportStatusBegin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const byte & type, const Proud::String & statusText) 
		{ 
			if (ReportStatusBegin_Function==nullptr) 
				return true; 
			return ReportStatusBegin_Function(remote,rmiContext, type, statusText); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & ) > ReportStatusValue_Function;
		virtual bool ReportStatusValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & key, const Proud::String & value) 
		{ 
			if (ReportStatusValue_Function==nullptr) 
				return true; 
			return ReportStatusValue_Function(remote,rmiContext, key, value); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > ReportStatusEnd_Function;
		virtual bool ReportStatusEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (ReportStatusEnd_Function==nullptr) 
				return true; 
			return ReportStatusEnd_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const uint32_t & ) > ReportServerAppState_Function;
		virtual bool ReportServerAppState ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & cpuUserTime, const float & cpuKerenlTime, const uint32_t & memorySize) 
		{ 
			if (ReportServerAppState_Function==nullptr) 
				return true; 
			return ReportServerAppState_Function(remote,rmiContext, cpuUserTime, cpuKerenlTime, memorySize); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const Proud::String & ) > EventLog_Function;
		virtual bool EventLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logType, const Proud::String & txt) 
		{ 
			if (EventLog_Function==nullptr) 
				return true; 
			return EventLog_Function(remote,rmiContext, logType, txt); 
		}

	};
#endif

}


