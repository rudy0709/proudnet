



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "NetS2C_common.h"

namespace ProudS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool P2PGroup_MemberJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & memberHostID, const ByteArray & customField, const int & eventID, const ByteArray & p2pAESSessionKey, const ByteArray & p2pFastSessionKey, const int & p2pFirstFrameNumber, const Proud::Guid & connectionMagicNumber, const bool & allowDirectP2P, const bool & pairRecycled) PN_SEALED; 
	virtual bool P2PGroup_MemberJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & groupHostID, const HostID & memberHostID, const ByteArray & customField, const int & eventID, const ByteArray & p2pAESSessionKey, const ByteArray & p2pFastSessionKey, const int & p2pFirstFrameNumber, const Proud::Guid & connectionMagicNumber, const bool & allowDirectP2P, const bool & pairRecycled)   PN_SEALED;  
	virtual bool RequestP2PHolepunch ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerID, const AddrPort & internalAddr, const AddrPort & externalAddr) PN_SEALED; 
	virtual bool RequestP2PHolepunch ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerID, const AddrPort & internalAddr, const AddrPort & externalAddr)   PN_SEALED;  
	virtual bool P2P_NotifyDirectP2PDisconnected2 ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason) PN_SEALED; 
	virtual bool P2P_NotifyDirectP2PDisconnected2 ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const ErrorType & reason)   PN_SEALED;  
	virtual bool P2P_NotifyP2PMemberOffline ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID) PN_SEALED; 
	virtual bool P2P_NotifyP2PMemberOffline ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID)   PN_SEALED;  
	virtual bool P2P_NotifyP2PMemberOnline ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID) PN_SEALED; 
	virtual bool P2P_NotifyP2PMemberOnline ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID)   PN_SEALED;  
	virtual bool P2PGroup_MemberLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & memberHostID, const HostID & groupHostID) PN_SEALED; 
	virtual bool P2PGroup_MemberLeave ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & memberHostID, const HostID & groupHostID)   PN_SEALED;  
	virtual bool NotifyDirectP2PEstablish ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & aPeer, const HostID & bPeer, const AddrPort & X0, const AddrPort & Y0, const AddrPort & Z0, const AddrPort & W0) PN_SEALED; 
	virtual bool NotifyDirectP2PEstablish ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & aPeer, const HostID & bPeer, const AddrPort & X0, const AddrPort & Y0, const AddrPort & Z0, const AddrPort & W0)   PN_SEALED;  
	virtual bool ReliablePong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & localTimeMs, const int & messageID) PN_SEALED; 
	virtual bool ReliablePong ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & localTimeMs, const int & messageID)   PN_SEALED;  
	virtual bool EnableLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool EnableLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool DisableLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool DisableLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifyUdpToTcpFallbackByServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool NotifyUdpToTcpFallbackByServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NotifySpeedHackDetectorEnabled ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & enable) PN_SEALED; 
	virtual bool NotifySpeedHackDetectorEnabled ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & enable)   PN_SEALED;  
	virtual bool ShutdownTcpAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool ShutdownTcpAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool RequestAutoPrune ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool RequestAutoPrune ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool NewDirectP2PConnection ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerID) PN_SEALED; 
	virtual bool NewDirectP2PConnection ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerID)   PN_SEALED;  
	virtual bool RequestMeasureSendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & enable) PN_SEALED; 
	virtual bool RequestMeasureSendSpeed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & enable)   PN_SEALED;  
	virtual bool S2C_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const NamedAddrPort & serverUdpAddr) PN_SEALED; 
	virtual bool S2C_RequestCreateUdpSocket ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const NamedAddrPort & serverUdpAddr)   PN_SEALED;  
	virtual bool S2C_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const NamedAddrPort & serverudpaddr) PN_SEALED; 
	virtual bool S2C_CreateUdpSocketAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & succeed, const NamedAddrPort & serverudpaddr)   PN_SEALED;  
static const PNTCHAR* RmiName_P2PGroup_MemberJoin;
static const PNTCHAR* RmiName_RequestP2PHolepunch;
static const PNTCHAR* RmiName_P2P_NotifyDirectP2PDisconnected2;
static const PNTCHAR* RmiName_P2P_NotifyP2PMemberOffline;
static const PNTCHAR* RmiName_P2P_NotifyP2PMemberOnline;
static const PNTCHAR* RmiName_P2PGroup_MemberLeave;
static const PNTCHAR* RmiName_NotifyDirectP2PEstablish;
static const PNTCHAR* RmiName_ReliablePong;
static const PNTCHAR* RmiName_EnableLog;
static const PNTCHAR* RmiName_DisableLog;
static const PNTCHAR* RmiName_NotifyUdpToTcpFallbackByServer;
static const PNTCHAR* RmiName_NotifySpeedHackDetectorEnabled;
static const PNTCHAR* RmiName_ShutdownTcpAck;
static const PNTCHAR* RmiName_RequestAutoPrune;
static const PNTCHAR* RmiName_NewDirectP2PConnection;
static const PNTCHAR* RmiName_RequestMeasureSendSpeed;
static const PNTCHAR* RmiName_S2C_RequestCreateUdpSocket;
static const PNTCHAR* RmiName_S2C_CreateUdpSocketAck;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



