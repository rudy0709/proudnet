  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "NetC2S_stub.h"



const unsigned char sz_NetC2S_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   


namespace ProudC2S {


	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_NetC2S_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_ReliablePing:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					double recentFrameRate; __msg >> recentFrameRate;
					int localTimeMs; __msg >> localTimeMs;
					int messageID; __msg >> messageID;
					m_core->PostCheckReadMessage(__msg,RmiName_ReliablePing);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,recentFrameRate);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,localTimeMs);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,messageID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReliablePing, 
							RmiName_ReliablePing,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReliablePing, 
							RmiName_ReliablePing, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReliablePing, 
							RmiName_ReliablePing, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_ReliablePing;
							__summary.m_rmiName = RmiName_ReliablePing;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = ReliablePing (remote,ctx , recentFrameRate, localTimeMs, messageID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReliablePing);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_ReliablePing;
						__summary.m_rmiName = RmiName_ReliablePing;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_P2P_NotifyDirectP2PDisconnected:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID remotePeerHostID; __msg >> remotePeerHostID;
					ErrorType reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_P2P_NotifyDirectP2PDisconnected);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,remotePeerHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected, 
							RmiName_P2P_NotifyDirectP2PDisconnected,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected, 
							RmiName_P2P_NotifyDirectP2PDisconnected, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected, 
							RmiName_P2P_NotifyDirectP2PDisconnected, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected;
							__summary.m_rmiName = RmiName_P2P_NotifyDirectP2PDisconnected;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = P2P_NotifyDirectP2PDisconnected (remote,ctx , remotePeerHostID, reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_P2P_NotifyDirectP2PDisconnected);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected;
						__summary.m_rmiName = RmiName_P2P_NotifyDirectP2PDisconnected;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyUdpToTcpFallbackByClient:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyUdpToTcpFallbackByClient);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient, 
							RmiName_NotifyUdpToTcpFallbackByClient,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient, 
							RmiName_NotifyUdpToTcpFallbackByClient, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient, 
							RmiName_NotifyUdpToTcpFallbackByClient, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient;
							__summary.m_rmiName = RmiName_NotifyUdpToTcpFallbackByClient;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyUdpToTcpFallbackByClient (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyUdpToTcpFallbackByClient);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient;
						__summary.m_rmiName = RmiName_NotifyUdpToTcpFallbackByClient;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_P2PGroup_MemberJoin_Ack:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID groupHostID; __msg >> groupHostID;
					HostID addedMemberHostID; __msg >> addedMemberHostID;
					int eventID; __msg >> eventID;
					m_core->PostCheckReadMessage(__msg,RmiName_P2PGroup_MemberJoin_Ack);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,groupHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,addedMemberHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,eventID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack, 
							RmiName_P2PGroup_MemberJoin_Ack,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack, 
							RmiName_P2PGroup_MemberJoin_Ack, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack, 
							RmiName_P2PGroup_MemberJoin_Ack, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack;
							__summary.m_rmiName = RmiName_P2PGroup_MemberJoin_Ack;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = P2PGroup_MemberJoin_Ack (remote,ctx , groupHostID, addedMemberHostID, eventID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_P2PGroup_MemberJoin_Ack);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack;
						__summary.m_rmiName = RmiName_P2PGroup_MemberJoin_Ack;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyP2PHolepunchSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID A; __msg >> A;
					HostID B; __msg >> B;
					AddrPort ABSendAddr; __msg >> ABSendAddr;
					AddrPort ABRecvAddr; __msg >> ABRecvAddr;
					AddrPort BASendAddr; __msg >> BASendAddr;
					AddrPort BARecvAddr; __msg >> BARecvAddr;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyP2PHolepunchSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,A);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,B);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ABSendAddr);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ABRecvAddr);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,BASendAddr);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,BARecvAddr);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess, 
							RmiName_NotifyP2PHolepunchSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess, 
							RmiName_NotifyP2PHolepunchSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess, 
							RmiName_NotifyP2PHolepunchSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess;
							__summary.m_rmiName = RmiName_NotifyP2PHolepunchSuccess;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyP2PHolepunchSuccess (remote,ctx , A, B, ABSendAddr, ABRecvAddr, BASendAddr, BARecvAddr );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyP2PHolepunchSuccess);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess;
						__summary.m_rmiName = RmiName_NotifyP2PHolepunchSuccess;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_ShutdownTcp:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::ByteArray comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_ShutdownTcp);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ShutdownTcp, 
							RmiName_ShutdownTcp,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ShutdownTcp, 
							RmiName_ShutdownTcp, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ShutdownTcp, 
							RmiName_ShutdownTcp, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_ShutdownTcp;
							__summary.m_rmiName = RmiName_ShutdownTcp;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = ShutdownTcp (remote,ctx , comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ShutdownTcp);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_ShutdownTcp;
						__summary.m_rmiName = RmiName_ShutdownTcp;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyLog:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int logLevel; __msg >> logLevel;
					Proud::LogCategory logCategory; __msg >> logCategory;
					HostID logHostID; __msg >> logHostID;
					String logMessage; __msg >> logMessage;
					String logFunction; __msg >> logFunction;
					int logLine; __msg >> logLine;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLog);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,logLevel);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,logCategory);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,logHostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,logMessage);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,logFunction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,logLine);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLog, 
							RmiName_NotifyLog,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLog, 
							RmiName_NotifyLog, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLog, 
							RmiName_NotifyLog, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLog;
							__summary.m_rmiName = RmiName_NotifyLog;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyLog (remote,ctx , logLevel, logCategory, logHostID, logMessage, logFunction, logLine );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLog);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLog;
						__summary.m_rmiName = RmiName_NotifyLog;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyLogHolepunchFreqFail:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int rank; __msg >> rank;
					String text; __msg >> text;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLogHolepunchFreqFail);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,rank);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,text);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail, 
							RmiName_NotifyLogHolepunchFreqFail,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail, 
							RmiName_NotifyLogHolepunchFreqFail, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail, 
							RmiName_NotifyLogHolepunchFreqFail, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail;
							__summary.m_rmiName = RmiName_NotifyLogHolepunchFreqFail;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyLogHolepunchFreqFail (remote,ctx , rank, text );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLogHolepunchFreqFail);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail;
						__summary.m_rmiName = RmiName_NotifyLogHolepunchFreqFail;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNatDeviceName:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					String deviceName; __msg >> deviceName;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNatDeviceName);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,deviceName);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceName, 
							RmiName_NotifyNatDeviceName,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceName, 
							RmiName_NotifyNatDeviceName, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceName, 
							RmiName_NotifyNatDeviceName, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNatDeviceName;
							__summary.m_rmiName = RmiName_NotifyNatDeviceName;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNatDeviceName (remote,ctx , deviceName );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNatDeviceName);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNatDeviceName;
						__summary.m_rmiName = RmiName_NotifyNatDeviceName;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyJitDirectP2PTriggered:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID peerB_ID; __msg >> peerB_ID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyJitDirectP2PTriggered);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,peerB_ID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered, 
							RmiName_NotifyJitDirectP2PTriggered,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered, 
							RmiName_NotifyJitDirectP2PTriggered, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered, 
							RmiName_NotifyJitDirectP2PTriggered, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered;
							__summary.m_rmiName = RmiName_NotifyJitDirectP2PTriggered;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyJitDirectP2PTriggered (remote,ctx , peerB_ID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyJitDirectP2PTriggered);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered;
						__summary.m_rmiName = RmiName_NotifyJitDirectP2PTriggered;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifyNatDeviceNameDetected:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					String natDeviceName; __msg >> natDeviceName;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyNatDeviceNameDetected);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,natDeviceName);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected, 
							RmiName_NotifyNatDeviceNameDetected,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected, 
							RmiName_NotifyNatDeviceNameDetected, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected, 
							RmiName_NotifyNatDeviceNameDetected, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected;
							__summary.m_rmiName = RmiName_NotifyNatDeviceNameDetected;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifyNatDeviceNameDetected (remote,ctx , natDeviceName );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyNatDeviceNameDetected);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected;
						__summary.m_rmiName = RmiName_NotifyNatDeviceNameDetected;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_NotifySendSpeed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					double speed; __msg >> speed;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifySendSpeed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,speed);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifySendSpeed, 
							RmiName_NotifySendSpeed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySendSpeed, 
							RmiName_NotifySendSpeed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifySendSpeed, 
							RmiName_NotifySendSpeed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySendSpeed;
							__summary.m_rmiName = RmiName_NotifySendSpeed;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = NotifySendSpeed (remote,ctx , speed );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifySendSpeed);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_NotifySendSpeed;
						__summary.m_rmiName = RmiName_NotifySendSpeed;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_ReportP2PPeerPing:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID peerID; __msg >> peerID;
					int recentPing; __msg >> recentPing;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportP2PPeerPing);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,peerID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,recentPing);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportP2PPeerPing, 
							RmiName_ReportP2PPeerPing,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportP2PPeerPing, 
							RmiName_ReportP2PPeerPing, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportP2PPeerPing, 
							RmiName_ReportP2PPeerPing, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportP2PPeerPing;
							__summary.m_rmiName = RmiName_ReportP2PPeerPing;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = ReportP2PPeerPing (remote,ctx , peerID, recentPing );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReportP2PPeerPing);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportP2PPeerPing;
						__summary.m_rmiName = RmiName_ReportP2PPeerPing;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_C2S_RequestCreateUdpSocket:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					m_core->PostCheckReadMessage(__msg,RmiName_C2S_RequestCreateUdpSocket);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket, 
							RmiName_C2S_RequestCreateUdpSocket,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket, 
							RmiName_C2S_RequestCreateUdpSocket, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket, 
							RmiName_C2S_RequestCreateUdpSocket, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket;
							__summary.m_rmiName = RmiName_C2S_RequestCreateUdpSocket;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = C2S_RequestCreateUdpSocket (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_C2S_RequestCreateUdpSocket);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket;
						__summary.m_rmiName = RmiName_C2S_RequestCreateUdpSocket;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_C2S_CreateUdpSocketAck:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					bool succeed; __msg >> succeed;
					m_core->PostCheckReadMessage(__msg,RmiName_C2S_CreateUdpSocketAck);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,succeed);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck, 
							RmiName_C2S_CreateUdpSocketAck,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck, 
							RmiName_C2S_CreateUdpSocketAck, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck, 
							RmiName_C2S_CreateUdpSocketAck, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck;
							__summary.m_rmiName = RmiName_C2S_CreateUdpSocketAck;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = C2S_CreateUdpSocketAck (remote,ctx , succeed );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_C2S_CreateUdpSocketAck);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck;
						__summary.m_rmiName = RmiName_C2S_CreateUdpSocketAck;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_ReportC2CUdpMessageCount:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					HostID peer; __msg >> peer;
					int udpMessageTrialCount; __msg >> udpMessageTrialCount;
					int udpMessageSuccessCount; __msg >> udpMessageSuccessCount;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportC2CUdpMessageCount);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,peer);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,udpMessageTrialCount);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,udpMessageSuccessCount);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount, 
							RmiName_ReportC2CUdpMessageCount,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount, 
							RmiName_ReportC2CUdpMessageCount, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount, 
							RmiName_ReportC2CUdpMessageCount, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount;
							__summary.m_rmiName = RmiName_ReportC2CUdpMessageCount;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = ReportC2CUdpMessageCount (remote,ctx , peer, udpMessageTrialCount, udpMessageSuccessCount );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReportC2CUdpMessageCount);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount;
						__summary.m_rmiName = RmiName_ReportC2CUdpMessageCount;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_ReportC2SUdpMessageTrialCount:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int toServerUdpTrialCount; __msg >> toServerUdpTrialCount;
					m_core->PostCheckReadMessage(__msg,RmiName_ReportC2SUdpMessageTrialCount);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,toServerUdpTrialCount);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount, 
							RmiName_ReportC2SUdpMessageTrialCount,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount, 
							RmiName_ReportC2SUdpMessageTrialCount, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount, 
							RmiName_ReportC2SUdpMessageTrialCount, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount;
							__summary.m_rmiName = RmiName_ReportC2SUdpMessageTrialCount;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = ReportC2SUdpMessageTrialCount (remote,ctx , toServerUdpTrialCount );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReportC2SUdpMessageTrialCount);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount;
						__summary.m_rmiName = RmiName_ReportC2SUdpMessageTrialCount;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReliablePing =_PNT("ReliablePing");
	#else
	const PNTCHAR* Stub::RmiName_ReliablePing =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_P2P_NotifyDirectP2PDisconnected =_PNT("P2P_NotifyDirectP2PDisconnected");
	#else
	const PNTCHAR* Stub::RmiName_P2P_NotifyDirectP2PDisconnected =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyUdpToTcpFallbackByClient =_PNT("NotifyUdpToTcpFallbackByClient");
	#else
	const PNTCHAR* Stub::RmiName_NotifyUdpToTcpFallbackByClient =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_P2PGroup_MemberJoin_Ack =_PNT("P2PGroup_MemberJoin_Ack");
	#else
	const PNTCHAR* Stub::RmiName_P2PGroup_MemberJoin_Ack =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyP2PHolepunchSuccess =_PNT("NotifyP2PHolepunchSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyP2PHolepunchSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ShutdownTcp =_PNT("ShutdownTcp");
	#else
	const PNTCHAR* Stub::RmiName_ShutdownTcp =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLog =_PNT("NotifyLog");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLog =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLogHolepunchFreqFail =_PNT("NotifyLogHolepunchFreqFail");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLogHolepunchFreqFail =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNatDeviceName =_PNT("NotifyNatDeviceName");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNatDeviceName =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyJitDirectP2PTriggered =_PNT("NotifyJitDirectP2PTriggered");
	#else
	const PNTCHAR* Stub::RmiName_NotifyJitDirectP2PTriggered =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyNatDeviceNameDetected =_PNT("NotifyNatDeviceNameDetected");
	#else
	const PNTCHAR* Stub::RmiName_NotifyNatDeviceNameDetected =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifySendSpeed =_PNT("NotifySendSpeed");
	#else
	const PNTCHAR* Stub::RmiName_NotifySendSpeed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportP2PPeerPing =_PNT("ReportP2PPeerPing");
	#else
	const PNTCHAR* Stub::RmiName_ReportP2PPeerPing =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_C2S_RequestCreateUdpSocket =_PNT("C2S_RequestCreateUdpSocket");
	#else
	const PNTCHAR* Stub::RmiName_C2S_RequestCreateUdpSocket =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_C2S_CreateUdpSocketAck =_PNT("C2S_CreateUdpSocketAck");
	#else
	const PNTCHAR* Stub::RmiName_C2S_CreateUdpSocketAck =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportC2CUdpMessageCount =_PNT("ReportC2CUdpMessageCount");
	#else
	const PNTCHAR* Stub::RmiName_ReportC2CUdpMessageCount =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReportC2SUdpMessageTrialCount =_PNT("ReportC2SUdpMessageTrialCount");
	#else
	const PNTCHAR* Stub::RmiName_ReportC2SUdpMessageTrialCount =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_ReliablePing;

}



