




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "NetC2C_proxy.h"

namespace ProudC2C {


        
	bool Proxy::HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial;
__msg.Write(__msgid);
	

		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HolsterP2PHolepunchTrial, (::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial);
	}

	bool Proxy::HolsterP2PHolepunchTrial ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial;
__msg.Write(__msgid);
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HolsterP2PHolepunchTrial, (::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial);
	}
        
	bool Proxy::ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportUdpMessageCount;
__msg.Write(__msgid);
	
__msg << udpSuccessCount;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReportUdpMessageCount, (::Proud::RmiID)Rmi_ReportUdpMessageCount);
	}

	bool Proxy::ReportUdpMessageCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & udpSuccessCount)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportUdpMessageCount;
__msg.Write(__msgid);
	
__msg << udpSuccessCount;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReportUdpMessageCount, (::Proud::RmiID)Rmi_ReportUdpMessageCount);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HolsterP2PHolepunchTrial =_PNT("HolsterP2PHolepunchTrial");
#else
const PNTCHAR* Proxy::RmiName_HolsterP2PHolepunchTrial =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReportUdpMessageCount =_PNT("ReportUdpMessageCount");
#else
const PNTCHAR* Proxy::RmiName_ReportUdpMessageCount =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_HolsterP2PHolepunchTrial;

}



