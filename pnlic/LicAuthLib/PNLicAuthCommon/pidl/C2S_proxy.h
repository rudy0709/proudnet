



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "C2S_common.h"

namespace LicenseC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType) PN_SEALED; 
	virtual bool RequestLicenseKey ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)   PN_SEALED;  
	virtual bool RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType) PN_SEALED; 
	virtual bool RequestAuthentication ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)   PN_SEALED;  
	virtual bool RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber) PN_SEALED; 
	virtual bool RequestRecordServerInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)   PN_SEALED;  
static const PNTCHAR* RmiName_RequestLicenseKey;
static const PNTCHAR* RmiName_RequestAuthentication;
static const PNTCHAR* RmiName_RequestRecordServerInfo;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



