  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "C2S_common.h"

     
namespace LicenseC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestLicenseKey ( ::Proud::HostID, ::Proud::RmiContext& , const short & , const short & , const short & , const Proud::String & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_LicenseC2S_RequestLicenseKey bool RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType) PN_OVERRIDE

#define DEFRMI_LicenseC2S_RequestLicenseKey(DerivedClass) bool DerivedClass::RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)
#define CALL_LicenseC2S_RequestLicenseKey RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)
#define PARAM_LicenseC2S_RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)
               
		virtual bool RequestAuthentication ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_LicenseC2S_RequestAuthentication bool RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType) PN_OVERRIDE

#define DEFRMI_LicenseC2S_RequestAuthentication(DerivedClass) bool DerivedClass::RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)
#define CALL_LicenseC2S_RequestAuthentication RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)
#define PARAM_LicenseC2S_RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)
               
		virtual bool RequestRecordServerInfo ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const uint8_t & )		{ 
			return false;
		} 

#define DECRMI_LicenseC2S_RequestRecordServerInfo bool RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber) PN_OVERRIDE

#define DEFRMI_LicenseC2S_RequestRecordServerInfo(DerivedClass) bool DerivedClass::RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)
#define CALL_LicenseC2S_RequestRecordServerInfo RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)
#define PARAM_LicenseC2S_RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestLicenseKey;
		static const PNTCHAR* RmiName_RequestAuthentication;
		static const PNTCHAR* RmiName_RequestRecordServerInfo;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const short & , const short & , const short & , const Proud::String & , const Proud::String & , const Proud::String & ) > RequestLicenseKey_Function;
		virtual bool RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType) 
		{ 
			if (RequestLicenseKey_Function==nullptr) 
				return true; 
			return RequestLicenseKey_Function(remote,rmiContext, year, month, day, projectName, companyName, licenseType); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & ) > RequestAuthentication_Function;
		virtual bool RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType) 
		{ 
			if (RequestAuthentication_Function==nullptr) 
				return true; 
			return RequestAuthentication_Function(remote,rmiContext, cpuId, computerName, userName, key, internalIP, licenseType); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const Proud::String & , const uint8_t & ) > RequestRecordServerInfo_Function;
		virtual bool RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber) 
		{ 
			if (RequestRecordServerInfo_Function==nullptr) 
				return true; 
			return RequestRecordServerInfo_Function(remote,rmiContext, cpuId, companyName, projectName, licenseType, sigKey, computerName, userName, processName, internalIP, ccuNumber); 
		}

	};
#endif

}


