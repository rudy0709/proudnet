




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "NetC2S_proxy.h"

namespace ProudC2S {


        
	bool Proxy::ReliablePing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & recentFrameRate, const int & localTimeMs, const int & messageID)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReliablePing;
__msg.Write(__msgid);
	
__msg << recentFrameRate;

__msg << localTimeMs;

__msg << messageID;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReliablePing, (::Proud::RmiID)Rmi_ReliablePing);
	}

	bool Proxy::ReliablePing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const double & recentFrameRate, const int & localTimeMs, const int & messageID)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReliablePing;
__msg.Write(__msgid);
	
__msg << recentFrameRate;

__msg << localTimeMs;

__msg << messageID;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReliablePing, (::Proud::RmiID)Rmi_ReliablePing);
	}
        
	bool Proxy::P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected;
__msg.Write(__msgid);
	
__msg << remotePeerHostID;

__msg << reason;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_NotifyDirectP2PDisconnected, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected);
	}

	bool Proxy::P2P_NotifyDirectP2PDisconnected ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const ErrorType & reason)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected;
__msg.Write(__msgid);
	
__msg << remotePeerHostID;

__msg << reason;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_NotifyDirectP2PDisconnected, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected);
	}
        
	bool Proxy::NotifyUdpToTcpFallbackByClient ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient;
__msg.Write(__msgid);
	

		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUdpToTcpFallbackByClient, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient);
	}

	bool Proxy::NotifyUdpToTcpFallbackByClient ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient;
__msg.Write(__msgid);
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUdpToTcpFallbackByClient, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByClient);
	}
        
	bool Proxy::P2PGroup_MemberJoin_Ack ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack;
__msg.Write(__msgid);
	
__msg << groupHostID;

__msg << addedMemberHostID;

__msg << eventID;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2PGroup_MemberJoin_Ack, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack);
	}

	bool Proxy::P2PGroup_MemberJoin_Ack ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & groupHostID, const HostID & addedMemberHostID, const int & eventID)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack;
__msg.Write(__msgid);
	
__msg << groupHostID;

__msg << addedMemberHostID;

__msg << eventID;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2PGroup_MemberJoin_Ack, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin_Ack);
	}
        
	bool Proxy::NotifyP2PHolepunchSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess;
__msg.Write(__msgid);
	
__msg << A;

__msg << B;

__msg << ABSendAddr;

__msg << ABRecvAddr;

__msg << BASendAddr;

__msg << BARecvAddr;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyP2PHolepunchSuccess, (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess);
	}

	bool Proxy::NotifyP2PHolepunchSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & A, const HostID & B, const AddrPort & ABSendAddr, const AddrPort & ABRecvAddr, const AddrPort & BASendAddr, const AddrPort & BARecvAddr)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess;
__msg.Write(__msgid);
	
__msg << A;

__msg << B;

__msg << ABSendAddr;

__msg << ABRecvAddr;

__msg << BASendAddr;

__msg << BARecvAddr;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyP2PHolepunchSuccess, (::Proud::RmiID)Rmi_NotifyP2PHolepunchSuccess);
	}
        
	bool Proxy::ShutdownTcp ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ByteArray & comment)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShutdownTcp;
__msg.Write(__msgid);
	
__msg << comment;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShutdownTcp, (::Proud::RmiID)Rmi_ShutdownTcp);
	}

	bool Proxy::ShutdownTcp ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ByteArray & comment)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShutdownTcp;
__msg.Write(__msgid);
	
__msg << comment;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShutdownTcp, (::Proud::RmiID)Rmi_ShutdownTcp);
	}
        
	bool Proxy::NotifyLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLog;
__msg.Write(__msgid);
	
__msg << logLevel;

__msg << logCategory;

__msg << logHostID;

__msg << logMessage;

__msg << logFunction;

__msg << logLine;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLog, (::Proud::RmiID)Rmi_NotifyLog);
	}

	bool Proxy::NotifyLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & logLevel, const Proud::LogCategory & logCategory, const HostID & logHostID, const String & logMessage, const String & logFunction, const int & logLine)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLog;
__msg.Write(__msgid);
	
__msg << logLevel;

__msg << logCategory;

__msg << logHostID;

__msg << logMessage;

__msg << logFunction;

__msg << logLine;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLog, (::Proud::RmiID)Rmi_NotifyLog);
	}
        
	bool Proxy::NotifyLogHolepunchFreqFail ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & rank, const String & text)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail;
__msg.Write(__msgid);
	
__msg << rank;

__msg << text;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLogHolepunchFreqFail, (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail);
	}

	bool Proxy::NotifyLogHolepunchFreqFail ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & rank, const String & text)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail;
__msg.Write(__msgid);
	
__msg << rank;

__msg << text;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLogHolepunchFreqFail, (::Proud::RmiID)Rmi_NotifyLogHolepunchFreqFail);
	}
        
	bool Proxy::NotifyNatDeviceName ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & deviceName)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNatDeviceName;
__msg.Write(__msgid);
	
__msg << deviceName;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNatDeviceName, (::Proud::RmiID)Rmi_NotifyNatDeviceName);
	}

	bool Proxy::NotifyNatDeviceName ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & deviceName)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNatDeviceName;
__msg.Write(__msgid);
	
__msg << deviceName;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNatDeviceName, (::Proud::RmiID)Rmi_NotifyNatDeviceName);
	}
        
	bool Proxy::NotifyJitDirectP2PTriggered ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerB_ID)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered;
__msg.Write(__msgid);
	
__msg << peerB_ID;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyJitDirectP2PTriggered, (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered);
	}

	bool Proxy::NotifyJitDirectP2PTriggered ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peerB_ID)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered;
__msg.Write(__msgid);
	
__msg << peerB_ID;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyJitDirectP2PTriggered, (::Proud::RmiID)Rmi_NotifyJitDirectP2PTriggered);
	}
        
	bool Proxy::NotifyNatDeviceNameDetected ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const String & natDeviceName)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected;
__msg.Write(__msgid);
	
__msg << natDeviceName;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNatDeviceNameDetected, (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected);
	}

	bool Proxy::NotifyNatDeviceNameDetected ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const String & natDeviceName)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected;
__msg.Write(__msgid);
	
__msg << natDeviceName;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNatDeviceNameDetected, (::Proud::RmiID)Rmi_NotifyNatDeviceNameDetected);
	}
        
	bool Proxy::NotifySendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const double & speed)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySendSpeed;
__msg.Write(__msgid);
	
__msg << speed;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySendSpeed, (::Proud::RmiID)Rmi_NotifySendSpeed);
	}

	bool Proxy::NotifySendSpeed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const double & speed)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySendSpeed;
__msg.Write(__msgid);
	
__msg << speed;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySendSpeed, (::Proud::RmiID)Rmi_NotifySendSpeed);
	}
        
	bool Proxy::ReportP2PPeerPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peerID, const int & recentPing)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportP2PPeerPing;
__msg.Write(__msgid);
	
__msg << peerID;

__msg << recentPing;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReportP2PPeerPing, (::Proud::RmiID)Rmi_ReportP2PPeerPing);
	}

	bool Proxy::ReportP2PPeerPing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peerID, const int & recentPing)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportP2PPeerPing;
__msg.Write(__msgid);
	
__msg << peerID;

__msg << recentPing;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReportP2PPeerPing, (::Proud::RmiID)Rmi_ReportP2PPeerPing);
	}
        
	bool Proxy::C2S_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket;
__msg.Write(__msgid);
	

		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_C2S_RequestCreateUdpSocket, (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket);
	}

	bool Proxy::C2S_RequestCreateUdpSocket ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket;
__msg.Write(__msgid);
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_C2S_RequestCreateUdpSocket, (::Proud::RmiID)Rmi_C2S_RequestCreateUdpSocket);
	}
        
	bool Proxy::C2S_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck;
__msg.Write(__msgid);
	
__msg << succeed;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_C2S_CreateUdpSocketAck, (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck);
	}

	bool Proxy::C2S_CreateUdpSocketAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & succeed)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck;
__msg.Write(__msgid);
	
__msg << succeed;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_C2S_CreateUdpSocketAck, (::Proud::RmiID)Rmi_C2S_CreateUdpSocketAck);
	}
        
	bool Proxy::ReportC2CUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportC2CUdpMessageCount;
__msg.Write(__msgid);
	
__msg << peer;

__msg << udpMessageTrialCount;

__msg << udpMessageSuccessCount;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReportC2CUdpMessageCount, (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount);
	}

	bool Proxy::ReportC2CUdpMessageCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & peer, const int & udpMessageTrialCount, const int & udpMessageSuccessCount)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportC2CUdpMessageCount;
__msg.Write(__msgid);
	
__msg << peer;

__msg << udpMessageTrialCount;

__msg << udpMessageSuccessCount;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReportC2CUdpMessageCount, (::Proud::RmiID)Rmi_ReportC2CUdpMessageCount);
	}
        
	bool Proxy::ReportC2SUdpMessageTrialCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & toServerUdpTrialCount)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount;
__msg.Write(__msgid);
	
__msg << toServerUdpTrialCount;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReportC2SUdpMessageTrialCount, (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount);
	}

	bool Proxy::ReportC2SUdpMessageTrialCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & toServerUdpTrialCount)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount;
__msg.Write(__msgid);
	
__msg << toServerUdpTrialCount;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReportC2SUdpMessageTrialCount, (::Proud::RmiID)Rmi_ReportC2SUdpMessageTrialCount);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReliablePing =_PNT("ReliablePing");
#else
const PNTCHAR* Proxy::RmiName_ReliablePing =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_NotifyDirectP2PDisconnected =_PNT("P2P_NotifyDirectP2PDisconnected");
#else
const PNTCHAR* Proxy::RmiName_P2P_NotifyDirectP2PDisconnected =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUdpToTcpFallbackByClient =_PNT("NotifyUdpToTcpFallbackByClient");
#else
const PNTCHAR* Proxy::RmiName_NotifyUdpToTcpFallbackByClient =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberJoin_Ack =_PNT("P2PGroup_MemberJoin_Ack");
#else
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberJoin_Ack =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyP2PHolepunchSuccess =_PNT("NotifyP2PHolepunchSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyP2PHolepunchSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShutdownTcp =_PNT("ShutdownTcp");
#else
const PNTCHAR* Proxy::RmiName_ShutdownTcp =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLog =_PNT("NotifyLog");
#else
const PNTCHAR* Proxy::RmiName_NotifyLog =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLogHolepunchFreqFail =_PNT("NotifyLogHolepunchFreqFail");
#else
const PNTCHAR* Proxy::RmiName_NotifyLogHolepunchFreqFail =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNatDeviceName =_PNT("NotifyNatDeviceName");
#else
const PNTCHAR* Proxy::RmiName_NotifyNatDeviceName =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyJitDirectP2PTriggered =_PNT("NotifyJitDirectP2PTriggered");
#else
const PNTCHAR* Proxy::RmiName_NotifyJitDirectP2PTriggered =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNatDeviceNameDetected =_PNT("NotifyNatDeviceNameDetected");
#else
const PNTCHAR* Proxy::RmiName_NotifyNatDeviceNameDetected =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySendSpeed =_PNT("NotifySendSpeed");
#else
const PNTCHAR* Proxy::RmiName_NotifySendSpeed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReportP2PPeerPing =_PNT("ReportP2PPeerPing");
#else
const PNTCHAR* Proxy::RmiName_ReportP2PPeerPing =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_C2S_RequestCreateUdpSocket =_PNT("C2S_RequestCreateUdpSocket");
#else
const PNTCHAR* Proxy::RmiName_C2S_RequestCreateUdpSocket =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_C2S_CreateUdpSocketAck =_PNT("C2S_CreateUdpSocketAck");
#else
const PNTCHAR* Proxy::RmiName_C2S_CreateUdpSocketAck =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReportC2CUdpMessageCount =_PNT("ReportC2CUdpMessageCount");
#else
const PNTCHAR* Proxy::RmiName_ReportC2CUdpMessageCount =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReportC2SUdpMessageTrialCount =_PNT("ReportC2SUdpMessageTrialCount");
#else
const PNTCHAR* Proxy::RmiName_ReportC2SUdpMessageTrialCount =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_ReliablePing;

}



