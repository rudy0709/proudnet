<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug_static_CRT|Win32">
      <Configuration>Debug_static_CRT</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release_static_CRT|Win32">
      <Configuration>Release_static_CRT</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug_static_CRT|x64">
      <Configuration>Debug_static_CRT</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release_static_CRT|x64">
      <Configuration>Release_static_CRT</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{E03C66DD-5356-4F4E-AEFE-01B9A495A728}</ProjectGuid>
    <VCProjectVersion>16.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <RootNamespace>PNLicenseHidden</RootNamespace>
    <WindowsTargetPlatformVersion>10.0.22621.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v140</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|Win32'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|Win32'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|x64'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|x64'">
    <OutDir>bin\$(Configuration)-x86_$(PlatformArchitecture)\</OutDir>
    <IntDir>obj\$(Configuration)-x86_$(PlatformArchitecture)\</IntDir>
    <TargetName>$(ProjectName)_UnProtect</TargetName>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;DEBUG;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX86</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;DEBUG;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX86</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
      <DebugInformationFormat />
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX86</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
      <DebugInformationFormat />
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX86</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;DEBUG;_EXCEPTIONALLY_;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX64</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug_static_CRT|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;DEBUG;_EXCEPTIONALLY_;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX64</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;_EXCEPTIONALLY_;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
      <DebugInformationFormat />
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX64</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release_static_CRT|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;_EXCEPTIONALLY_;WIN32;_WINDOWS;_NO_NTTNTRACE;_CONSOLE;PROUDSRCCOPY;_WINSOCKAPI_;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>stdafx.h</PrecompiledHeaderFile>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <ProgramDataBaseFileName>$(OutDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <AdditionalIncludeDirectories>../../utils/CodeVirtualizer/Include/C/</AdditionalIncludeDirectories>
      <Optimization>Disabled</Optimization>
      <DebugInformationFormat />
    </ClCompile>
    <Link>
      <AdditionalDependencies>..\..\utils\CodeVirtualizer\Lib\COFF\VirtualizerSDK$(PlatformArchitecture).lib;..\AuthNetLib\ProudNetClient\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetClient.lib;..\AuthNetLib\ProudNetServer\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\AuthNetServer.lib;..\PNLicenseSdk\bin\$(ConfigurationName)-x86_$(PlatformArchitecture)\PNLicenseSdk.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <TargetMachine>MachineX64</TargetMachine>
      <UACExecutionLevel>AsInvoker</UACExecutionLevel>
    </Link>
    <PostBuildEvent>
      <Command>SETLOCAL ENABLEDELAYEDEXPANSION
set proj_name=PNLicenseHidden

@rem ImageGen.exe 파일 유무를 체크합니다.
set imagegen_path=""

set folders=Release-x86_32 Release-x86_64 Release_static_CRT-x86_32 Release_static_CRT-x86_64
for %%f in (%folders%) do (
    set file_path=$(ProjectDir)..\..\utils\ImageGen\bin\%%f\ImageGen.exe
    if exist !file_path! (
        set imagegen_path=!file_path!
    )
)

if "%imagegen_path%" == "" (
    echo #### ImageGen.exe 파일을 찾을 수 없습니다.
    echo #### utils/ 폴더 내의 프로젝트들을 먼저 빌드해야 합니다.
    exit
)

@rem .exe 파일을 난독화합니다.
if exist "$(TargetDir)%proj_name%.exe" (
    del /f /q "$(TargetDir)%proj_name%.exe"
)

pushd .\
cd "$(ProjectDir)..\..\utils\CodeVirtualizer"
start /w Virtualizer.exe /protect .\ProudNet.cv /inputfile "$(TargetPath)" /outputfile "$(TargetDir)%proj_name%.exe"
popd

@rem .exe 파일에 디지털 서명을 추가합니다.
"%PN_SIGN_TOOL_PATH%" sign /f "$(ProjectDir)..\..\utils\CodeSign\202108_proudDigital.pfx" /t http://timestamp.comodoca.com/authenticode /p OHOSZN /v "$(TargetDir)%proj_name%.exe"

@rem .exe 파일을 .inl 파일로 변환합니다.
"%imagegen_path%" --bin2inl "$(TargetDir)%proj_name%.exe" "$(ProjectDir)..\PNLicenseManager\%proj_name%Image.inl"</Command>
    </PostBuildEvent>
    <PreBuildEvent>
      <Command>@rem PNLicenseHidden.inl 파일을 삭제합니다.
set inl_path="$(ProjectDir)..\PNLicenseManager\PNLicenseHidden.inl"
if exist %inl_path% (
    del /f %inl_path%
)</Command>
    </PreBuildEvent>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="PNLicenseHidden.cpp" />
    <ClCompile Include="PNLicInformer.cpp" />
    <ClCompile Include="stdafx.cpp" />
    <ClCompile Include="..\LicAuthLib\PNLicAuthCommon\Vars.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="PNLicenseHidden.h" />
    <ClInclude Include="PNLicInformer.h" />
    <ClInclude Include="stdafx.h" />
    <ClInclude Include="..\OnlineActivationTest\PNLicAuthCommon\Vars.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>
