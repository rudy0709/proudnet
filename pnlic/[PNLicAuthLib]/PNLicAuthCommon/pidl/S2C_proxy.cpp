




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "S2C_proxy.h"

namespace LicenseS2C {


        
	bool Proxy::NotifyAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const BYTE & result)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAuthentication;
__msg.Write(__msgid);
	
__msg << result;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAuthentication, (::Proud::RmiID)Rmi_NotifyAuthentication);
	}

	bool Proxy::NotifyAuthentication ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const BYTE & result)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAuthentication;
__msg.Write(__msgid);
	
__msg << result;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAuthentication, (::Proud::RmiID)Rmi_NotifyAuthentication);
	}
        
	bool Proxy::NotifyAuthenticationComment ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const BYTE & result, const Proud::String & comment)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAuthenticationComment;
__msg.Write(__msgid);
	
__msg << result;

__msg << comment;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAuthenticationComment, (::Proud::RmiID)Rmi_NotifyAuthenticationComment);
	}

	bool Proxy::NotifyAuthenticationComment ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const BYTE & result, const Proud::String & comment)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAuthenticationComment;
__msg.Write(__msgid);
	
__msg << result;

__msg << comment;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAuthenticationComment, (::Proud::RmiID)Rmi_NotifyAuthenticationComment);
	}
        
	bool Proxy::NotifyRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const BYTE & result)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRecordServerInfo;
__msg.Write(__msgid);
	
__msg << result;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyRecordServerInfo, (::Proud::RmiID)Rmi_NotifyRecordServerInfo);
	}

	bool Proxy::NotifyRecordServerInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const BYTE & result)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRecordServerInfo;
__msg.Write(__msgid);
	
__msg << result;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyRecordServerInfo, (::Proud::RmiID)Rmi_NotifyRecordServerInfo);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAuthentication =_PNT("NotifyAuthentication");
#else
const PNTCHAR* Proxy::RmiName_NotifyAuthentication =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAuthenticationComment =_PNT("NotifyAuthenticationComment");
#else
const PNTCHAR* Proxy::RmiName_NotifyAuthenticationComment =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyRecordServerInfo =_PNT("NotifyRecordServerInfo");
#else
const PNTCHAR* Proxy::RmiName_NotifyRecordServerInfo =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyAuthentication;

}



