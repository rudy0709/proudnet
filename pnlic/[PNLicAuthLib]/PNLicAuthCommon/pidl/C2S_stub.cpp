  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "C2S_stub.h"



const unsigned char sz_C2S_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   


namespace LicenseC2S {


	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_C2S_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_RequestLicenseKey:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					short year; __msg >> year;
					short month; __msg >> month;
					short day; __msg >> day;
					Proud::String projectName; __msg >> projectName;
					Proud::String companyName; __msg >> companyName;
					Proud::String licenseType; __msg >> licenseType;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestLicenseKey);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,year);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,month);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,day);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,projectName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,companyName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,licenseType);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestLicenseKey, 
							RmiName_RequestLicenseKey,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLicenseKey, 
							RmiName_RequestLicenseKey, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLicenseKey, 
							RmiName_RequestLicenseKey, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLicenseKey;
							__summary.m_rmiName = RmiName_RequestLicenseKey;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestLicenseKey (remote,ctx , year, month, day, projectName, companyName, licenseType );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestLicenseKey);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLicenseKey;
						__summary.m_rmiName = RmiName_RequestLicenseKey;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestAuthentication:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String cpuId; __msg >> cpuId;
					Proud::String computerName; __msg >> computerName;
					Proud::String userName; __msg >> userName;
					Proud::String key; __msg >> key;
					Proud::String internalIP; __msg >> internalIP;
					Proud::String licenseType; __msg >> licenseType;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestAuthentication);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,cpuId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,computerName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,key);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,internalIP);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,licenseType);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestAuthentication, 
							RmiName_RequestAuthentication,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAuthentication, 
							RmiName_RequestAuthentication, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAuthentication, 
							RmiName_RequestAuthentication, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAuthentication;
							__summary.m_rmiName = RmiName_RequestAuthentication;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestAuthentication (remote,ctx , cpuId, computerName, userName, key, internalIP, licenseType );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestAuthentication);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAuthentication;
						__summary.m_rmiName = RmiName_RequestAuthentication;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
			case Rmi_RequestRecordServerInfo:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String cpuId; __msg >> cpuId;
					Proud::String companyName; __msg >> companyName;
					Proud::String projectName; __msg >> projectName;
					Proud::String licenseType; __msg >> licenseType;
					Proud::String sigKey; __msg >> sigKey;
					Proud::String computerName; __msg >> computerName;
					Proud::String userName; __msg >> userName;
					Proud::String processName; __msg >> processName;
					Proud::String internalIP; __msg >> internalIP;
					uint8_t ccuNumber; __msg >> ccuNumber;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestRecordServerInfo);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,cpuId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,companyName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,projectName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,licenseType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,sigKey);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,computerName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,processName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,internalIP);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,ccuNumber);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestRecordServerInfo, 
							RmiName_RequestRecordServerInfo,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRecordServerInfo, 
							RmiName_RequestRecordServerInfo, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRecordServerInfo, 
							RmiName_RequestRecordServerInfo, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse)
					{
						if(m_enableStubProfiling)
						{
							::Proud::BeforeRmiSummary __summary;
							__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRecordServerInfo;
							__summary.m_rmiName = RmiName_RequestRecordServerInfo;
							__summary.m_hostID = remote;
							__summary.m_hostTag = hostTag;
							BeforeRmiInvocation(__summary);
							__t0 = ::Proud::GetPreciseCurrentTimeMs();
						}
					}
						
					// Call this method.
					bool __ret = RequestRecordServerInfo (remote,ctx , cpuId, companyName, projectName, licenseType, sigKey, computerName, userName, processName, internalIP, ccuNumber );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestRecordServerInfo);
					}
			
					int64_t __t1;
			
					if(!m_internalUse && m_enableStubProfiling)
					{
						__t1 = ::Proud::GetPreciseCurrentTimeMs() - __t0;
			
						::Proud::AfterRmiSummary __summary;
						__summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRecordServerInfo;
						__summary.m_rmiName = RmiName_RequestRecordServerInfo;
						__summary.m_hostID = remote;
						__summary.m_hostTag = hostTag;
			
						__summary.m_elapsedTime = (uint32_t)__t1;
			
						AfterRmiInvocation(__summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestLicenseKey =_PNT("RequestLicenseKey");
	#else
	const PNTCHAR* Stub::RmiName_RequestLicenseKey =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestAuthentication =_PNT("RequestAuthentication");
	#else
	const PNTCHAR* Stub::RmiName_RequestAuthentication =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestRecordServerInfo =_PNT("RequestRecordServerInfo");
	#else
	const PNTCHAR* Stub::RmiName_RequestRecordServerInfo =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestLicenseKey;

}



