




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "C2S_proxy.h"

namespace LicenseC2S {


        
	bool Proxy::RequestLicenseKey ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLicenseKey;
__msg.Write(__msgid);
	
__msg << year;

__msg << month;

__msg << day;

__msg << projectName;

__msg << companyName;

__msg << licenseType;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLicenseKey, (::Proud::RmiID)Rmi_RequestLicenseKey);
	}

	bool Proxy::RequestLicenseKey ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const short & year, const short & month, const short & day, const Proud::String & projectName, const Proud::String & companyName, const Proud::String & licenseType)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLicenseKey;
__msg.Write(__msgid);
	
__msg << year;

__msg << month;

__msg << day;

__msg << projectName;

__msg << companyName;

__msg << licenseType;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLicenseKey, (::Proud::RmiID)Rmi_RequestLicenseKey);
	}
        
	bool Proxy::RequestAuthentication ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAuthentication;
__msg.Write(__msgid);
	
__msg << cpuId;

__msg << computerName;

__msg << userName;

__msg << key;

__msg << internalIP;

__msg << licenseType;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestAuthentication, (::Proud::RmiID)Rmi_RequestAuthentication);
	}

	bool Proxy::RequestAuthentication ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & cpuId, const Proud::String & computerName, const Proud::String & userName, const Proud::String & key, const Proud::String & internalIP, const Proud::String & licenseType)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAuthentication;
__msg.Write(__msgid);
	
__msg << cpuId;

__msg << computerName;

__msg << userName;

__msg << key;

__msg << internalIP;

__msg << licenseType;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestAuthentication, (::Proud::RmiID)Rmi_RequestAuthentication);
	}
        
	bool Proxy::RequestRecordServerInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRecordServerInfo;
__msg.Write(__msgid);
	
__msg << cpuId;

__msg << companyName;

__msg << projectName;

__msg << licenseType;

__msg << sigKey;

__msg << computerName;

__msg << userName;

__msg << processName;

__msg << internalIP;

__msg << ccuNumber;


		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestRecordServerInfo, (::Proud::RmiID)Rmi_RequestRecordServerInfo);
	}

	bool Proxy::RequestRecordServerInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & cpuId, const Proud::String & companyName, const Proud::String & projectName, const Proud::String & licenseType, const Proud::String & sigKey, const Proud::String & computerName, const Proud::String & userName, const Proud::String & processName, const Proud::String & internalIP, const uint8_t & ccuNumber)  	{
		
::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRecordServerInfo;
__msg.Write(__msgid);
	
__msg << cpuId;

__msg << companyName;

__msg << projectName;

__msg << licenseType;

__msg << sigKey;

__msg << computerName;

__msg << userName;

__msg << processName;

__msg << internalIP;

__msg << ccuNumber;

		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestRecordServerInfo, (::Proud::RmiID)Rmi_RequestRecordServerInfo);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLicenseKey =_PNT("RequestLicenseKey");
#else
const PNTCHAR* Proxy::RmiName_RequestLicenseKey =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestAuthentication =_PNT("RequestAuthentication");
#else
const PNTCHAR* Proxy::RmiName_RequestAuthentication =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestRecordServerInfo =_PNT("RequestRecordServerInfo");
#else
const PNTCHAR* Proxy::RmiName_RequestRecordServerInfo =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestLicenseKey;

}



