//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NativeNetClient : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NativeNetClient(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeNetClient obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeNetClient() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NativeNetClient(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	  // cMemoryOwn 변수는 C# GC에서 managed 객체를 삭제할 때 연결되어 있는 native 객체를 삭제 유/무를 설정할 수 있습니다.
	  internal static NativeNetClient Create(bool cMemoryOwn) {
		global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NativeNetClient_Create();
		NativeNetClient ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeNetClient(cPtr, cMemoryOwn);
		return ret;
	  }

  internal static NativeNetClient Create() {
    global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NativeNetClient_Create();
    NativeNetClient ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeNetClient(cPtr, false);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void Disconnect() {
    ProudNetClientPluginPINVOKE.NativeNetClient_Disconnect__SWIG_0(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void Disconnect(DisconnectArgs args) {
    ProudNetClientPluginPINVOKE.NativeNetClient_Disconnect__SWIG_1(swigCPtr, DisconnectArgs.getCPtr(args));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual long GetIndirectServerTimeMs(HostID peerHostID) {
    long ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetIndirectServerTimeMs(swigCPtr, (int)peerHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual HostID GetLocalHostID() {
    HostID ret = (HostID)ProudNetClientPluginPINVOKE.NativeNetClient_GetLocalHostID(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetNatDeviceName() {
    string ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetNatDeviceName(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long GetP2PServerTimeMs(HostID groupHostID) {
    long ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetP2PServerTimeMs(swigCPtr, (int)groupHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual AddrPort GetLocalUdpSocketAddr(HostID remotePeerID) {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.NativeNetClient_GetLocalUdpSocketAddr(swigCPtr, (int)remotePeerID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool GetDirectP2PInfo(HostID remotePeerID, DirectP2PInfo outInfo) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetDirectP2PInfo(swigCPtr, (int)remotePeerID, DirectP2PInfo.getCPtr(outInfo));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual AddrPort GetServerAddrPort() {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.NativeNetClient_GetServerAddrPort(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SetHostTag(HostID hostID, global::System.IntPtr hostTag) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_SetHostTag(swigCPtr, (int)hostID, hostTag);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long GetServerTimeMs() {
    long ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetServerTimeMs(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long GetServerTimeDiffMs() {
    long ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetServerTimeDiffMs(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal ConnectionState GetServerConnectionState(ServerConnectionState output) {
    ConnectionState ret = (ConnectionState)ProudNetClientPluginPINVOKE.NativeNetClient_GetServerConnectionState(swigCPtr, ServerConnectionState.getCPtr(output));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasServerConnection() {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_HasServerConnection(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType StartRoundTripLatencyTest(HostID peerID, StartRoundTripLatencyTestParameter parameter) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_StartRoundTripLatencyTest(swigCPtr, (int)peerID, StartRoundTripLatencyTestParameter.getCPtr(parameter));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType StopRoundTripLatencyTest(HostID peerID) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_StopRoundTripLatencyTest(swigCPtr, (int)peerID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType GetRoundTripLatency(HostID peerID, RoundTripLatencyTestResult result) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_GetRoundTripLatency(swigCPtr, (int)peerID, RoundTripLatencyTestResult.getCPtr(result));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool RestoreUdpSocket(HostID peerID) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_RestoreUdpSocket(swigCPtr, (int)peerID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void TEST_FallbackUdpToTcp(FallbackMethod mode) {
    ProudNetClientPluginPINVOKE.NativeNetClient_TEST_FallbackUdpToTcp(swigCPtr, (int)mode);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TEST_EnableVirtualSpeedHack(long multipliedSpeed) {
    ProudNetClientPluginPINVOKE.NativeNetClient_TEST_EnableVirtualSpeedHack(swigCPtr, multipliedSpeed);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TEST_SetPacketTruncatePercent(HostType hostType, int percent) {
    ProudNetClientPluginPINVOKE.NativeNetClient_TEST_SetPacketTruncatePercent(swigCPtr, (int)hostType, percent);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetInternalVersion() {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetInternalVersion(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetMessageMaxLength() {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetMessageMaxLength(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal AddrPort GetPublicAddress() {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.NativeNetClient_GetPublicAddress(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetApplicationHint(ApplicationHint hint) {
    ProudNetClientPluginPINVOKE.NativeNetClient_SetApplicationHint(swigCPtr, ApplicationHint.getCPtr(hint));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal bool SendUserMessage(HostID remote, NativeRmiContext rmiContext, global::System.IntPtr payload, int payloadLength) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_SendUserMessage(swigCPtr, (int)remote, NativeRmiContext.getCPtr(rmiContext), payload, payloadLength);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType SetCoalesceIntervalMs(HostID remote, int intervalMs) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_SetCoalesceIntervalMs(swigCPtr, (int)remote, intervalMs);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType SetCoalesceIntervalToAuto(HostID remote) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_SetCoalesceIntervalToAuto(swigCPtr, (int)remote);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual AddrPort GetTcpLocalAddr() {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.NativeNetClient_GetTcpLocalAddr(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual AddrPort GetUdpLocalAddr() {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.NativeNetClient_GetUdpLocalAddr(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string TEST_GetDebugText() {
    string ret = ProudNetClientPluginPINVOKE.NativeNetClient_TEST_GetDebugText(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void TEST_FakeTurnOffSendAndReceive() {
    ProudNetClientPluginPINVOKE.NativeNetClient_TEST_FakeTurnOffSendAndReceive(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TEST_SetAutoConnectionRecoverySimulatedDelay(int timeMs) {
    ProudNetClientPluginPINVOKE.NativeNetClient_TEST_SetAutoConnectionRecoverySimulatedDelay(swigCPtr, timeMs);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal ErrorType ForceP2PRelay(HostID remotePeerID, bool enable) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_ForceP2PRelay(swigCPtr, (int)remotePeerID, enable);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void HolsterMoreCallbackUntilNextFrameMove() {
    ProudNetClientPluginPINVOKE.NativeNetClient_HolsterMoreCallbackUntilNextFrameMove(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void DisconnectAsync() {
    ProudNetClientPluginPINVOKE.NativeNetClient_DisconnectAsync(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal bool Connect(NetConnectionParam param) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_Connect__SWIG_0(swigCPtr, NetConnectionParam.getCPtr(param));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool Connect(NetConnectionParam param, ErrorInfo outError) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_Connect__SWIG_1(swigCPtr, NetConnectionParam.getCPtr(param), ErrorInfo.getCPtr(outError));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void FrameMove() {
    ProudNetClientPluginPINVOKE.NativeNetClient_FrameMove__SWIG_0(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FrameMove(int maxWaitTime, FrameMoveResult result) {
    ProudNetClientPluginPINVOKE.NativeNetClient_FrameMove__SWIG_1(swigCPtr, maxWaitTime, FrameMoveResult.getCPtr(result));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public NativeHostIDArray GetGroupMembers(HostID groupHostID) {
    NativeHostIDArray ret = new NativeHostIDArray(ProudNetClientPluginPINVOKE.NativeNetClient_GetGroupMembers(swigCPtr, (int)groupHostID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NativeHostIDArray GetLocalJoinedP2PGroups() {
    NativeHostIDArray ret = new NativeHostIDArray(ProudNetClientPluginPINVOKE.NativeNetClient_GetLocalJoinedP2PGroups(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NetClientStats GetStats() {
    NetClientStats ret = new NetClientStats(ProudNetClientPluginPINVOKE.NativeNetClient_GetStats(swigCPtr), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NetPeerInfo GetPeerInfo(HostID peerHostID) {
    NetPeerInfo ret = new NetPeerInfo(ProudNetClientPluginPINVOKE.NativeNetClient_GetPeerInfo(swigCPtr, (int)peerHostID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DirectP2PInfo InvalidateUdpSocket(HostID peerID) {
    DirectP2PInfo ret = new DirectP2PInfo(ProudNetClientPluginPINVOKE.NativeNetClient_InvalidateUdpSocket(swigCPtr, (int)peerID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ReliableUdpHostStats GetPeerReliableUdpStats(HostID peerID) {
    ReliableUdpHostStats ret = new ReliableUdpHostStats(ProudNetClientPluginPINVOKE.NativeNetClient_GetPeerReliableUdpStats(swigCPtr, (int)peerID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsLocalHostBehindNat() {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetClient_IsLocalHostBehindNat(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SocketInfo GetSocketInfo(HostID remoteHostID) {
    SocketInfo ret = new SocketInfo(ProudNetClientPluginPINVOKE.NativeNetClient_GetSocketInfo(swigCPtr, (int)remoteHostID), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetUnreliableMessagingLossRatioPercent(HostID remotePeerID) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetUnreliableMessagingLossRatioPercent(swigCPtr, (int)remotePeerID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ErrorType GetUnreliableMessagingLossRatioPercentErrorType(HostID remotePeerID) {
    ErrorType ret = (ErrorType)ProudNetClientPluginPINVOKE.NativeNetClient_GetUnreliableMessagingLossRatioPercentErrorType(swigCPtr, (int)remotePeerID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEventSink(global::System.IntPtr obj) {
    ProudNetClientPluginPINVOKE.NativeNetClient_SetEventSink(swigCPtr, obj);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AttachProxy(global::System.IntPtr obj) {
    ProudNetClientPluginPINVOKE.NativeNetClient_AttachProxy(swigCPtr, obj);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AttachStub(global::System.IntPtr obj) {
    ProudNetClientPluginPINVOKE.NativeNetClient_AttachStub(swigCPtr, obj);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal int GetLastUnreliablePingMs(HostID remoteHostID) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetLastUnreliablePingMs(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal double GetLastUnreliablePingSec(HostID remoteHostID) {
    double ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetLastUnreliablePingSec(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetLastReliablePingMs(HostID remoteHostID) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetLastReliablePingMs(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal double GetLastReliablePingSec(HostID remoteHostID) {
    double ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetLastReliablePingSec(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetRecentReliablePingMs(HostID remoteHostID) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetRecentReliablePingMs(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal double GetRecentReliablePingSec(HostID remoteHostID) {
    double ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetRecentReliablePingSec(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetRecentUnreliablePingMs(HostID remoteHostID) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetClient_GetRecentUnreliablePingMs(swigCPtr, (int)remoteHostID);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
