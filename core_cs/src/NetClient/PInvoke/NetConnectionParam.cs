//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NetConnectionParam : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NetConnectionParam(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NetConnectionParam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetConnectionParam() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NetConnectionParam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public void SetUserData(ByteArray data)
	{
		if ((data == null) || (data.Count == 0))
		{
			return;
		}

		System.IntPtr nativeData = GetNativeUserData();

		ConvertToNative.CopyByteArrayToNative(data, nativeData);
	}

	public void SetExternalUserWorkerThreadPool(ThreadPool threadPool)
	{
		SetExternalUserWorkerThreadPool(threadPool.GetNativeThreadPool());
    }

	public void SetExternalNetWorkerThreadPool(ThreadPool threadPool)
	{
		SetExternalNetWorkerThreadPool(threadPool.GetNativeThreadPool());
    }

  public string serverIP {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_serverIP_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetClientPluginPINVOKE.NetConnectionParam_serverIP_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort serverPort {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_serverPort_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = ProudNetClientPluginPINVOKE.NetConnectionParam_serverPort_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IntArray localUdpPortPool {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_localUdpPortPool_set(swigCPtr, IntArray.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NetConnectionParam_localUdpPortPool_get(swigCPtr);
      IntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntArray(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Guid protocolVersion {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_protocolVersion_set(swigCPtr, Guid.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NetConnectionParam_protocolVersion_get(swigCPtr);
      Guid ret = (cPtr == global::System.IntPtr.Zero) ? null : new Guid(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool slowReliableP2P {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_slowReliableP2P_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetConnectionParam_slowReliableP2P_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int tunedNetworkerSendIntervalMs_TEST {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_tunedNetworkerSendIntervalMs_TEST_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetConnectionParam_tunedNetworkerSendIntervalMs_TEST_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool simplePacketMode {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_simplePacketMode_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetConnectionParam_simplePacketMode_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string clientAddrAtServer {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_clientAddrAtServer_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetClientPluginPINVOKE.NetConnectionParam_clientAddrAtServer_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enableAutoConnectionRecovery {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_enableAutoConnectionRecovery_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetConnectionParam_enableAutoConnectionRecovery_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_closeNoPingPongTcpConnections {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_m_closeNoPingPongTcpConnections_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetConnectionParam_m_closeNoPingPongTcpConnections_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ThreadModel userWorkerThreadModel {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_userWorkerThreadModel_set(swigCPtr, (int)value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ThreadModel ret = (ThreadModel)ProudNetClientPluginPINVOKE.NetConnectionParam_userWorkerThreadModel_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ThreadModel netWorkerThreadModel {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_netWorkerThreadModel_set(swigCPtr, (int)value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ThreadModel ret = (ThreadModel)ProudNetClientPluginPINVOKE.NetConnectionParam_netWorkerThreadModel_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint timerCallbackIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_timerCallbackIntervalMs_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetConnectionParam_timerCallbackIntervalMs_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int timerCallbackParallelMaxCount {
    set {
      ProudNetClientPluginPINVOKE.NetConnectionParam_timerCallbackParallelMaxCount_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetConnectionParam_timerCallbackParallelMaxCount_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NetConnectionParam() : this(ProudNetClientPluginPINVOKE.new_NetConnectionParam(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr GetNativeUserData() { return ProudNetClientPluginPINVOKE.NetConnectionParam_GetNativeUserData(swigCPtr); }

  private void SetExternalUserWorkerThreadPool(NativeThreadPool threadPool) {
    ProudNetClientPluginPINVOKE.NetConnectionParam_SetExternalUserWorkerThreadPool(swigCPtr, NativeThreadPool.getCPtr(threadPool));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetExternalNetWorkerThreadPool(NativeThreadPool threadPool) {
    ProudNetClientPluginPINVOKE.NetConnectionParam_SetExternalNetWorkerThreadPool(swigCPtr, NativeThreadPool.getCPtr(threadPool));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
