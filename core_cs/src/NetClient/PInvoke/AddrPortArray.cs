//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class AddrPortArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public AddrPortArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(AddrPortArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AddrPortArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_AddrPortArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AddrPortArray() : this(ProudNetClientPluginPINVOKE.new_AddrPortArray(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SuspendShrink() {
    ProudNetClientPluginPINVOKE.AddrPortArray_SuspendShrink(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OnRecycle() {
    ProudNetClientPluginPINVOKE.AddrPortArray_OnRecycle(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void OnDrop() {
    ProudNetClientPluginPINVOKE.AddrPortArray_OnDrop(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCount(int addLength) {
    ProudNetClientPluginPINVOKE.AddrPortArray_AddCount(swigCPtr, addLength);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(int sz) {
    ProudNetClientPluginPINVOKE.AddrPortArray_resize(swigCPtr, sz);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetCount() {
    int ret = ProudNetClientPluginPINVOKE.AddrPortArray_GetCount(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int size() {
    int ret = ProudNetClientPluginPINVOKE.AddrPortArray_size(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsEmpty() {
    bool ret = ProudNetClientPluginPINVOKE.AddrPortArray_IsEmpty(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Clear() {
    ProudNetClientPluginPINVOKE.AddrPortArray_Clear(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    ProudNetClientPluginPINVOKE.AddrPortArray_RemoveAt(swigCPtr, index);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(AddrPort value) {
    ProudNetClientPluginPINVOKE.AddrPortArray_Add(swigCPtr, AddrPort.getCPtr(value));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public AddrPort Get(int index) {
    AddrPort ret = new AddrPort(ProudNetClientPluginPINVOKE.AddrPortArray_Get(swigCPtr, index), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly uint TYPE_SIZE = ProudNetClientPluginPINVOKE.AddrPortArray_TYPE_SIZE_get();
}

}
