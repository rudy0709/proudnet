//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NetPeerInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NetPeerInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NetPeerInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetPeerInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NetPeerInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public HostIDArray GetJoinedP2PGroups()
	{
		int count = joinedP2PGroups.GetCount();
        if (count == 0)
        {
            return null;
        }

        HostIDArray idArray = new HostIDArray();

        for (int i = 0; i < count; ++i )
        {
            idArray.Add(joinedP2PGroups.At(i));
        }

        return idArray;
	}

  public AddrPort udpAddrFromServer {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_udpAddrFromServer_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NetPeerInfo_udpAddrFromServer_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public AddrPort udpAddrInternal {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_udpAddrInternal_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NetPeerInfo_udpAddrInternal_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HostID hostID {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_hostID_set(swigCPtr, (int)value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      HostID ret = (HostID)ProudNetClientPluginPINVOKE.NetPeerInfo_hostID_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool relayedP2P {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_relayedP2P_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetPeerInfo_relayedP2P_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  private NativeHostIDArray joinedP2PGroups {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_joinedP2PGroups_set(swigCPtr, NativeHostIDArray.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NetPeerInfo_joinedP2PGroups_get(swigCPtr);
      NativeHostIDArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeHostIDArray(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isBehindNat {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_isBehindNat_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetPeerInfo_isBehindNat_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int recentPingMs {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_recentPingMs_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetPeerInfo_recentPingMs_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int sendQueuedAmountInBytes {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_sendQueuedAmountInBytes_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetPeerInfo_sendQueuedAmountInBytes_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double directP2PPeerFrameRate {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_directP2PPeerFrameRate_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetClientPluginPINVOKE.NetPeerInfo_directP2PPeerFrameRate_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint toRemotePeerSendUdpMessageTrialCount {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_toRemotePeerSendUdpMessageTrialCount_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetPeerInfo_toRemotePeerSendUdpMessageTrialCount_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint toRemotePeerSendUdpMessageSuccessCount {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_toRemotePeerSendUdpMessageSuccessCount_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetPeerInfo_toRemotePeerSendUdpMessageSuccessCount_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public long unreliableMessageReceiveSpeed {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_unreliableMessageReceiveSpeed_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetPeerInfo_unreliableMessageReceiveSpeed_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NetPeerInfo() : this(ProudNetClientPluginPINVOKE.new_NetPeerInfo(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ToString(bool atServer) {
    string ret = ProudNetClientPluginPINVOKE.NetPeerInfo_ToString(swigCPtr, atServer);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long m_udpSendDataTotalBytes {
    set {
      ProudNetClientPluginPINVOKE.NetPeerInfo_m_udpSendDataTotalBytes_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetPeerInfo_m_udpSendDataTotalBytes_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
