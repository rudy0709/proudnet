//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NetClientInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NetClientInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NetClientInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetClientInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_NetClientInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AddrPort tcpAddrFromServer {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_tcpAddrFromServer_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NetClientInfo_tcpAddrFromServer_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public AddrPort udpAddrFromServer {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_udpAddrFromServer_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NetClientInfo_udpAddrFromServer_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public AddrPort udpAddrInternal {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_udpAddrInternal_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NetClientInfo_udpAddrInternal_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HostID hostID {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_hostID_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      HostID ret = (HostID)ProudNetServerPluginPINVOKE.NetClientInfo_hostID_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool relayedP2P {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_relayedP2P_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetClientInfo_relayedP2P_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isBehindNat {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_isBehindNat_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetClientInfo_isBehindNat_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool realUdpEnabled {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_realUdpEnabled_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetClientInfo_realUdpEnabled_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string natDeviceName {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_natDeviceName_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetServerPluginPINVOKE.NetClientInfo_natDeviceName_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int recentPingMs {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_recentPingMs_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetClientInfo_recentPingMs_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int sendQueuedAmountInBytes {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_sendQueuedAmountInBytes_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetClientInfo_sendQueuedAmountInBytes_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double recentFrameRate {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_recentFrameRate_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.NetClientInfo_recentFrameRate_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint toServerSendUdpMessageTrialCount {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_toServerSendUdpMessageTrialCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetClientInfo_toServerSendUdpMessageTrialCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint toServerSendUdpMessageSuccessCount {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_toServerSendUdpMessageSuccessCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetClientInfo_toServerSendUdpMessageSuccessCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint hostIDRecycleCount {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_hostIDRecycleCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetClientInfo_hostIDRecycleCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public long unreliableMessageRecentReceiveSpeed {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_unreliableMessageRecentReceiveSpeed_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetClientInfo_unreliableMessageRecentReceiveSpeed_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public AddrPort m_TcpLocalAddrFromServer {
    set {
      ProudNetServerPluginPINVOKE.NetClientInfo_m_TcpLocalAddrFromServer_set(swigCPtr, AddrPort.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NetClientInfo_m_TcpLocalAddrFromServer_get(swigCPtr);
      AddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddrPort(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NetClientInfo() : this(ProudNetServerPluginPINVOKE.new_NetClientInfo(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ToString(bool atServer) {
    string ret = ProudNetServerPluginPINVOKE.NetClientInfo_ToString(swigCPtr, atServer);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr GetHostTag() { return ProudNetServerPluginPINVOKE.NetClientInfo_GetHostTag(swigCPtr); }

}

}
