//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class StartServerParameter : StartServerParameterBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public StartServerParameter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ProudNetServerPluginPINVOKE.StartServerParameter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(StartServerParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StartServerParameter() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_StartServerParameter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

	public void SetExternalUserWorkerThreadPool(ThreadPool threadPool)
	{
		SetExternalUserWorkerThreadPool(threadPool.GetNativeThreadPool());
    } 

	public void SetExternalNetWorkerThreadPool(ThreadPool threadPool)
	{
		SetExternalNetWorkerThreadPool(threadPool.GetNativeThreadPool());
    } 

  public IntArray tcpPorts {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_tcpPorts_set(swigCPtr, IntArray.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.StartServerParameter_tcpPorts_get(swigCPtr);
      IntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntArray(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IntArray udpPorts {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_udpPorts_set(swigCPtr, IntArray.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.StartServerParameter_udpPorts_get(swigCPtr);
      IntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntArray(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ServerUdpAssignMode udpAssignMode {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_udpAssignMode_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ServerUdpAssignMode ret = (ServerUdpAssignMode)ProudNetServerPluginPINVOKE.StartServerParameter_udpAssignMode_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enableIocp {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_enableIocp_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_enableIocp_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool upnpDetectNatDevice {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_upnpDetectNatDevice_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_upnpDetectNatDevice_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool upnpTcpAddPortMapping {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_upnpTcpAddPortMapping_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_upnpTcpAddPortMapping_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool usingOverBlockIcmpEnvironment {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_usingOverBlockIcmpEnvironment_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_usingOverBlockIcmpEnvironment_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint clientEmergencyLogMaxLineCount {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_clientEmergencyLogMaxLineCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.StartServerParameter_clientEmergencyLogMaxLineCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enablePingTest {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_enablePingTest_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_enablePingTest_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool ignoreFailedBindPort {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_ignoreFailedBindPort_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_ignoreFailedBindPort_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IntArray failedBindPorts {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_failedBindPorts_set(swigCPtr, IntArray.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.StartServerParameter_failedBindPorts_get(swigCPtr);
      IntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntArray(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int tunedNetworkerSendIntervalMs_TEST {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_tunedNetworkerSendIntervalMs_TEST_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.StartServerParameter_tunedNetworkerSendIntervalMs_TEST_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool simplePacketMode {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_simplePacketMode_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_simplePacketMode_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HostIDGenerationPolicy hostIDGenerationPolicySimplePacketMode {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_hostIDGenerationPolicySimplePacketMode_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      HostIDGenerationPolicy ret = (HostIDGenerationPolicy)ProudNetServerPluginPINVOKE.StartServerParameter_hostIDGenerationPolicySimplePacketMode_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_enableAutoConnectionRecoveryOnServer {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_m_enableAutoConnectionRecoveryOnServer_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.StartServerParameter_m_enableAutoConnectionRecoveryOnServer_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public class WebSocketParam : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    public WebSocketParam(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    public static global::System.Runtime.InteropServices.HandleRef getCPtr(WebSocketParam obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~WebSocketParam() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ProudNetServerPluginPINVOKE.delete_StartServerParameter_WebSocketParam(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public WebSocketType webSocketType {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_webSocketType_set(swigCPtr, (int)value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        WebSocketType ret = (WebSocketType)ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_webSocketType_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string endpoint {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_endpoint_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
      get {
        string ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_endpoint_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort listenPort {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_listenPort_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_listenPort_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int threadCount {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_threadCount_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_threadCount_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int timeoutRequest {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_timeoutRequest_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_timeoutRequest_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public int timeoutIdle {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_timeoutIdle_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        int ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_timeoutIdle_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string certFile {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_certFile_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
      get {
        string ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_certFile_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string privateKeyFile {
      set {
        ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_privateKeyFile_set(swigCPtr, value);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      } 
      // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
      get {
        string ret = ProudNetServerPluginPINVOKE.StartServerParameter_WebSocketParam_privateKeyFile_get(swigCPtr);
        if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public WebSocketParam() : this(ProudNetServerPluginPINVOKE.new_StartServerParameter_WebSocketParam(), true) {
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public StartServerParameter.WebSocketParam m_webSocketParam {
    set {
      ProudNetServerPluginPINVOKE.StartServerParameter_m_webSocketParam_set(swigCPtr, StartServerParameter.WebSocketParam.getCPtr(value));
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.StartServerParameter_m_webSocketParam_get(swigCPtr);
      StartServerParameter.WebSocketParam ret = (cPtr == global::System.IntPtr.Zero) ? null : new StartServerParameter.WebSocketParam(cPtr, false);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public StartServerParameter() : this(ProudNetServerPluginPINVOKE.new_StartServerParameter(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetExternalUserWorkerThreadPool(NativeThreadPool threadPool) {
    ProudNetServerPluginPINVOKE.StartServerParameter_SetExternalUserWorkerThreadPool(swigCPtr, NativeThreadPool.getCPtr(threadPool));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetExternalNetWorkerThreadPool(NativeThreadPool threadPool) {
    ProudNetServerPluginPINVOKE.StartServerParameter_SetExternalNetWorkerThreadPool(swigCPtr, NativeThreadPool.getCPtr(threadPool));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
