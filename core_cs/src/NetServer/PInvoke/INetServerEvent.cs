//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class INetServerEvent : INetCoreEvent {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public INetServerEvent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ProudNetServerPluginPINVOKE.INetServerEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(INetServerEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~INetServerEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_INetServerEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }


  public virtual void OnClientJoin(NetClientInfo clientInfo) {
    ProudNetServerPluginPINVOKE.INetServerEvent_OnClientJoin(swigCPtr, NetClientInfo.getCPtr(clientInfo));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnClientLeave(NetClientInfo clientInfo, ErrorInfo errorinfo, NativeByteArray comment) {
    ProudNetServerPluginPINVOKE.INetServerEvent_OnClientLeave(swigCPtr, NetClientInfo.getCPtr(clientInfo), ErrorInfo.getCPtr(errorinfo), NativeByteArray.getCPtr(comment));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnClientOffline(RemoteOfflineEventArgs arg0) {
    if (SwigDerivedClassHasMethod("OnClientOffline", swigMethodTypes11)) ProudNetServerPluginPINVOKE.INetServerEvent_OnClientOfflineSwigExplicitINetServerEvent(swigCPtr, RemoteOfflineEventArgs.getCPtr(arg0)); else ProudNetServerPluginPINVOKE.INetServerEvent_OnClientOffline(swigCPtr, RemoteOfflineEventArgs.getCPtr(arg0));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnClientOnline(RemoteOnlineEventArgs arg0) {
    if (SwigDerivedClassHasMethod("OnClientOnline", swigMethodTypes12)) ProudNetServerPluginPINVOKE.INetServerEvent_OnClientOnlineSwigExplicitINetServerEvent(swigCPtr, RemoteOnlineEventArgs.getCPtr(arg0)); else ProudNetServerPluginPINVOKE.INetServerEvent_OnClientOnline(swigCPtr, RemoteOnlineEventArgs.getCPtr(arg0));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool OnConnectionRequest(AddrPort arg0, NativeByteArray arg1, NativeByteArray arg2) {
    bool ret = (SwigDerivedClassHasMethod("OnConnectionRequest", swigMethodTypes13) ? ProudNetServerPluginPINVOKE.INetServerEvent_OnConnectionRequestSwigExplicitINetServerEvent(swigCPtr, AddrPort.getCPtr(arg0), NativeByteArray.getCPtr(arg1), NativeByteArray.getCPtr(arg2)) : ProudNetServerPluginPINVOKE.INetServerEvent_OnConnectionRequest(swigCPtr, AddrPort.getCPtr(arg0), NativeByteArray.getCPtr(arg1), NativeByteArray.getCPtr(arg2)));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void OnP2PGroupJoinMemberAckComplete(HostID groupHostID, HostID memberHostID, ErrorType result) {
    ProudNetServerPluginPINVOKE.INetServerEvent_OnP2PGroupJoinMemberAckComplete(swigCPtr, (int)groupHostID, (int)memberHostID, (int)result);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnUserWorkerThreadBegin() {
    ProudNetServerPluginPINVOKE.INetServerEvent_OnUserWorkerThreadBegin(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnUserWorkerThreadEnd() {
    ProudNetServerPluginPINVOKE.INetServerEvent_OnUserWorkerThreadEnd(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnClientHackSuspected(HostID arg0, HackType arg1) {
    if (SwigDerivedClassHasMethod("OnClientHackSuspected", swigMethodTypes17)) ProudNetServerPluginPINVOKE.INetServerEvent_OnClientHackSuspectedSwigExplicitINetServerEvent(swigCPtr, (int)arg0, (int)arg1); else ProudNetServerPluginPINVOKE.INetServerEvent_OnClientHackSuspected(swigCPtr, (int)arg0, (int)arg1);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnP2PGroupRemoved(HostID arg0) {
    if (SwigDerivedClassHasMethod("OnP2PGroupRemoved", swigMethodTypes18)) ProudNetServerPluginPINVOKE.INetServerEvent_OnP2PGroupRemovedSwigExplicitINetServerEvent(swigCPtr, (int)arg0); else ProudNetServerPluginPINVOKE.INetServerEvent_OnP2PGroupRemoved(swigCPtr, (int)arg0);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public INetServerEvent() : this(ProudNetServerPluginPINVOKE.new_INetServerEvent(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateINetServerEvent_0(SwigDirectorOnError);
    if (SwigDerivedClassHasMethod("OnWarning", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateINetServerEvent_1(SwigDirectorOnWarning);
    if (SwigDerivedClassHasMethod("OnInformation", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateINetServerEvent_2(SwigDirectorOnInformation);
    if (SwigDerivedClassHasMethod("OnException", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateINetServerEvent_3(SwigDirectorOnException);
    if (SwigDerivedClassHasMethod("OnNoRmiProcessed", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateINetServerEvent_4(SwigDirectorOnNoRmiProcessed);
    if (SwigDerivedClassHasMethod("OnReceiveUserMessage", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateINetServerEvent_5(SwigDirectorOnReceiveUserMessage);
    if (SwigDerivedClassHasMethod("OnTick", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateINetServerEvent_6(SwigDirectorOnTick);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackBegin", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateINetServerEvent_7(SwigDirectorOnUserWorkerThreadCallbackBegin);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackEnd", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateINetServerEvent_8(SwigDirectorOnUserWorkerThreadCallbackEnd);
    if (SwigDerivedClassHasMethod("OnClientJoin", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateINetServerEvent_9(SwigDirectorOnClientJoin);
    if (SwigDerivedClassHasMethod("OnClientLeave", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateINetServerEvent_10(SwigDirectorOnClientLeave);
    if (SwigDerivedClassHasMethod("OnClientOffline", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateINetServerEvent_11(SwigDirectorOnClientOffline);
    if (SwigDerivedClassHasMethod("OnClientOnline", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateINetServerEvent_12(SwigDirectorOnClientOnline);
    if (SwigDerivedClassHasMethod("OnConnectionRequest", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateINetServerEvent_13(SwigDirectorOnConnectionRequest);
    if (SwigDerivedClassHasMethod("OnP2PGroupJoinMemberAckComplete", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateINetServerEvent_14(SwigDirectorOnP2PGroupJoinMemberAckComplete);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadBegin", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateINetServerEvent_15(SwigDirectorOnUserWorkerThreadBegin);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadEnd", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateINetServerEvent_16(SwigDirectorOnUserWorkerThreadEnd);
    if (SwigDerivedClassHasMethod("OnClientHackSuspected", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateINetServerEvent_17(SwigDirectorOnClientHackSuspected);
    if (SwigDerivedClassHasMethod("OnP2PGroupRemoved", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateINetServerEvent_18(SwigDirectorOnP2PGroupRemoved);
    ProudNetServerPluginPINVOKE.INetServerEvent_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(INetServerEvent));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnError(global::System.IntPtr errorInfo) {
    OnError((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnWarning(global::System.IntPtr errorInfo) {
    OnWarning((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnInformation(global::System.IntPtr errorInfo) {
    OnInformation((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnException(global::System.IntPtr e) {
    OnException(new NativeException(e, false));
  }

  private void SwigDirectorOnNoRmiProcessed(ushort rmiID) {
    OnNoRmiProcessed(rmiID);
  }

  private void SwigDirectorOnReceiveUserMessage(int sender, global::System.IntPtr rmiContext, global::System.IntPtr payload, int payloadLength) {
    OnReceiveUserMessage((HostID)sender, new NativeRmiContext(rmiContext, false), payload, payloadLength);
  }

  private void SwigDirectorOnTick(global::System.IntPtr arg0) {
    OnTick(arg0);
  }

  private void SwigDirectorOnUserWorkerThreadCallbackBegin(global::System.IntPtr arg0) {
    OnUserWorkerThreadCallbackBegin((arg0 == global::System.IntPtr.Zero) ? null : new UserWorkerThreadCallbackContext(arg0, false));
  }

  private void SwigDirectorOnUserWorkerThreadCallbackEnd(global::System.IntPtr arg0) {
    OnUserWorkerThreadCallbackEnd((arg0 == global::System.IntPtr.Zero) ? null : new UserWorkerThreadCallbackContext(arg0, false));
  }

  private void SwigDirectorOnClientJoin(global::System.IntPtr clientInfo) {
    OnClientJoin((clientInfo == global::System.IntPtr.Zero) ? null : new NetClientInfo(clientInfo, false));
  }

  private void SwigDirectorOnClientLeave(global::System.IntPtr clientInfo, global::System.IntPtr errorinfo, global::System.IntPtr comment) {
    OnClientLeave((clientInfo == global::System.IntPtr.Zero) ? null : new NetClientInfo(clientInfo, false), (errorinfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorinfo, false), new NativeByteArray(comment, false));
  }

  private void SwigDirectorOnClientOffline(global::System.IntPtr arg0) {
    OnClientOffline(new RemoteOfflineEventArgs(arg0, false));
  }

  private void SwigDirectorOnClientOnline(global::System.IntPtr arg0) {
    OnClientOnline(new RemoteOnlineEventArgs(arg0, false));
  }

  private bool SwigDirectorOnConnectionRequest(global::System.IntPtr arg0, global::System.IntPtr arg1, global::System.IntPtr arg2) {
    return OnConnectionRequest(new AddrPort(arg0, false), new NativeByteArray(arg1, false), new NativeByteArray(arg2, false));
  }

  private void SwigDirectorOnP2PGroupJoinMemberAckComplete(int groupHostID, int memberHostID, int result) {
    OnP2PGroupJoinMemberAckComplete((HostID)groupHostID, (HostID)memberHostID, (ErrorType)result);
  }

  private void SwigDirectorOnUserWorkerThreadBegin() {
    OnUserWorkerThreadBegin();
  }

  private void SwigDirectorOnUserWorkerThreadEnd() {
    OnUserWorkerThreadEnd();
  }

  private void SwigDirectorOnClientHackSuspected(int arg0, int arg1) {
    OnClientHackSuspected((HostID)arg0, (HackType)arg1);
  }

  private void SwigDirectorOnP2PGroupRemoved(int arg0) {
    OnP2PGroupRemoved((HostID)arg0);
  }

  public delegate void SwigDelegateINetServerEvent_0(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetServerEvent_1(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetServerEvent_2(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetServerEvent_3(global::System.IntPtr e);
  public delegate void SwigDelegateINetServerEvent_4(ushort rmiID);
  public delegate void SwigDelegateINetServerEvent_5(int sender, global::System.IntPtr rmiContext, global::System.IntPtr payload, int payloadLength);
  public delegate void SwigDelegateINetServerEvent_6(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetServerEvent_7(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetServerEvent_8(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetServerEvent_9(global::System.IntPtr clientInfo);
  public delegate void SwigDelegateINetServerEvent_10(global::System.IntPtr clientInfo, global::System.IntPtr errorinfo, global::System.IntPtr comment);
  public delegate void SwigDelegateINetServerEvent_11(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetServerEvent_12(global::System.IntPtr arg0);
  public delegate bool SwigDelegateINetServerEvent_13(global::System.IntPtr arg0, global::System.IntPtr arg1, global::System.IntPtr arg2);
  public delegate void SwigDelegateINetServerEvent_14(int groupHostID, int memberHostID, int result);
  public delegate void SwigDelegateINetServerEvent_15();
  public delegate void SwigDelegateINetServerEvent_16();
  public delegate void SwigDelegateINetServerEvent_17(int arg0, int arg1);
  public delegate void SwigDelegateINetServerEvent_18(int arg0);

  private SwigDelegateINetServerEvent_0 swigDelegate0;
  private SwigDelegateINetServerEvent_1 swigDelegate1;
  private SwigDelegateINetServerEvent_2 swigDelegate2;
  private SwigDelegateINetServerEvent_3 swigDelegate3;
  private SwigDelegateINetServerEvent_4 swigDelegate4;
  private SwigDelegateINetServerEvent_5 swigDelegate5;
  private SwigDelegateINetServerEvent_6 swigDelegate6;
  private SwigDelegateINetServerEvent_7 swigDelegate7;
  private SwigDelegateINetServerEvent_8 swigDelegate8;
  private SwigDelegateINetServerEvent_9 swigDelegate9;
  private SwigDelegateINetServerEvent_10 swigDelegate10;
  private SwigDelegateINetServerEvent_11 swigDelegate11;
  private SwigDelegateINetServerEvent_12 swigDelegate12;
  private SwigDelegateINetServerEvent_13 swigDelegate13;
  private SwigDelegateINetServerEvent_14 swigDelegate14;
  private SwigDelegateINetServerEvent_15 swigDelegate15;
  private SwigDelegateINetServerEvent_16 swigDelegate16;
  private SwigDelegateINetServerEvent_17 swigDelegate17;
  private SwigDelegateINetServerEvent_18 swigDelegate18;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(NativeException) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(ushort) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(HostID), typeof(NativeRmiContext), typeof(global::System.IntPtr), typeof(int) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(global::System.IntPtr) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(UserWorkerThreadCallbackContext) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(UserWorkerThreadCallbackContext) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(NetClientInfo) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(NetClientInfo), typeof(ErrorInfo), typeof(NativeByteArray) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(RemoteOfflineEventArgs) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(RemoteOnlineEventArgs) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(AddrPort), typeof(NativeByteArray), typeof(NativeByteArray) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(HostID), typeof(HostID), typeof(ErrorType) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(HostID), typeof(HackType) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(HostID) };
}

}
