//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class INetCoreEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public INetCoreEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(INetCoreEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~INetCoreEvent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_INetCoreEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void OnError(ErrorInfo errorInfo) {
    ProudNetServerPluginPINVOKE.INetCoreEvent_OnError(swigCPtr, ErrorInfo.getCPtr(errorInfo));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnWarning(ErrorInfo errorInfo) {
    ProudNetServerPluginPINVOKE.INetCoreEvent_OnWarning(swigCPtr, ErrorInfo.getCPtr(errorInfo));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnInformation(ErrorInfo errorInfo) {
    ProudNetServerPluginPINVOKE.INetCoreEvent_OnInformation(swigCPtr, ErrorInfo.getCPtr(errorInfo));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnException(NativeException e) {
    ProudNetServerPluginPINVOKE.INetCoreEvent_OnException(swigCPtr, NativeException.getCPtr(e));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnNoRmiProcessed(ushort rmiID) {
    ProudNetServerPluginPINVOKE.INetCoreEvent_OnNoRmiProcessed(swigCPtr, rmiID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnReceiveUserMessage(HostID sender, NativeRmiContext rmiContext, global::System.IntPtr payload, int payloadLength) {
    if (SwigDerivedClassHasMethod("OnReceiveUserMessage", swigMethodTypes5)) ProudNetServerPluginPINVOKE.INetCoreEvent_OnReceiveUserMessageSwigExplicitINetCoreEvent(swigCPtr, (int)sender, NativeRmiContext.getCPtr(rmiContext), payload, payloadLength); else ProudNetServerPluginPINVOKE.INetCoreEvent_OnReceiveUserMessage(swigCPtr, (int)sender, NativeRmiContext.getCPtr(rmiContext), payload, payloadLength);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnTick(global::System.IntPtr arg0) {
    if (SwigDerivedClassHasMethod("OnTick", swigMethodTypes6)) ProudNetServerPluginPINVOKE.INetCoreEvent_OnTickSwigExplicitINetCoreEvent(swigCPtr, arg0); else ProudNetServerPluginPINVOKE.INetCoreEvent_OnTick(swigCPtr, arg0);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnUserWorkerThreadCallbackBegin(UserWorkerThreadCallbackContext arg0) {
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackBegin", swigMethodTypes7)) ProudNetServerPluginPINVOKE.INetCoreEvent_OnUserWorkerThreadCallbackBeginSwigExplicitINetCoreEvent(swigCPtr, UserWorkerThreadCallbackContext.getCPtr(arg0)); else ProudNetServerPluginPINVOKE.INetCoreEvent_OnUserWorkerThreadCallbackBegin(swigCPtr, UserWorkerThreadCallbackContext.getCPtr(arg0));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void OnUserWorkerThreadCallbackEnd(UserWorkerThreadCallbackContext arg0) {
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackEnd", swigMethodTypes8)) ProudNetServerPluginPINVOKE.INetCoreEvent_OnUserWorkerThreadCallbackEndSwigExplicitINetCoreEvent(swigCPtr, UserWorkerThreadCallbackContext.getCPtr(arg0)); else ProudNetServerPluginPINVOKE.INetCoreEvent_OnUserWorkerThreadCallbackEnd(swigCPtr, UserWorkerThreadCallbackContext.getCPtr(arg0));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public INetCoreEvent() : this(ProudNetServerPluginPINVOKE.new_INetCoreEvent(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("OnError", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateINetCoreEvent_0(SwigDirectorOnError);
    if (SwigDerivedClassHasMethod("OnWarning", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateINetCoreEvent_1(SwigDirectorOnWarning);
    if (SwigDerivedClassHasMethod("OnInformation", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateINetCoreEvent_2(SwigDirectorOnInformation);
    if (SwigDerivedClassHasMethod("OnException", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateINetCoreEvent_3(SwigDirectorOnException);
    if (SwigDerivedClassHasMethod("OnNoRmiProcessed", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateINetCoreEvent_4(SwigDirectorOnNoRmiProcessed);
    if (SwigDerivedClassHasMethod("OnReceiveUserMessage", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateINetCoreEvent_5(SwigDirectorOnReceiveUserMessage);
    if (SwigDerivedClassHasMethod("OnTick", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateINetCoreEvent_6(SwigDirectorOnTick);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackBegin", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateINetCoreEvent_7(SwigDirectorOnUserWorkerThreadCallbackBegin);
    if (SwigDerivedClassHasMethod("OnUserWorkerThreadCallbackEnd", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateINetCoreEvent_8(SwigDirectorOnUserWorkerThreadCallbackEnd);
    ProudNetServerPluginPINVOKE.INetCoreEvent_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(INetCoreEvent));
    return hasDerivedMethod;
  }

  private void SwigDirectorOnError(global::System.IntPtr errorInfo) {
    OnError((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnWarning(global::System.IntPtr errorInfo) {
    OnWarning((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnInformation(global::System.IntPtr errorInfo) {
    OnInformation((errorInfo == global::System.IntPtr.Zero) ? null : new ErrorInfo(errorInfo, false));
  }

  private void SwigDirectorOnException(global::System.IntPtr e) {
    OnException(new NativeException(e, false));
  }

  private void SwigDirectorOnNoRmiProcessed(ushort rmiID) {
    OnNoRmiProcessed(rmiID);
  }

  private void SwigDirectorOnReceiveUserMessage(int sender, global::System.IntPtr rmiContext, global::System.IntPtr payload, int payloadLength) {
    OnReceiveUserMessage((HostID)sender, new NativeRmiContext(rmiContext, false), payload, payloadLength);
  }

  private void SwigDirectorOnTick(global::System.IntPtr arg0) {
    OnTick(arg0);
  }

  private void SwigDirectorOnUserWorkerThreadCallbackBegin(global::System.IntPtr arg0) {
    OnUserWorkerThreadCallbackBegin((arg0 == global::System.IntPtr.Zero) ? null : new UserWorkerThreadCallbackContext(arg0, false));
  }

  private void SwigDirectorOnUserWorkerThreadCallbackEnd(global::System.IntPtr arg0) {
    OnUserWorkerThreadCallbackEnd((arg0 == global::System.IntPtr.Zero) ? null : new UserWorkerThreadCallbackContext(arg0, false));
  }

  public delegate void SwigDelegateINetCoreEvent_0(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetCoreEvent_1(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetCoreEvent_2(global::System.IntPtr errorInfo);
  public delegate void SwigDelegateINetCoreEvent_3(global::System.IntPtr e);
  public delegate void SwigDelegateINetCoreEvent_4(ushort rmiID);
  public delegate void SwigDelegateINetCoreEvent_5(int sender, global::System.IntPtr rmiContext, global::System.IntPtr payload, int payloadLength);
  public delegate void SwigDelegateINetCoreEvent_6(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetCoreEvent_7(global::System.IntPtr arg0);
  public delegate void SwigDelegateINetCoreEvent_8(global::System.IntPtr arg0);

  private SwigDelegateINetCoreEvent_0 swigDelegate0;
  private SwigDelegateINetCoreEvent_1 swigDelegate1;
  private SwigDelegateINetCoreEvent_2 swigDelegate2;
  private SwigDelegateINetCoreEvent_3 swigDelegate3;
  private SwigDelegateINetCoreEvent_4 swigDelegate4;
  private SwigDelegateINetCoreEvent_5 swigDelegate5;
  private SwigDelegateINetCoreEvent_6 swigDelegate6;
  private SwigDelegateINetCoreEvent_7 swigDelegate7;
  private SwigDelegateINetCoreEvent_8 swigDelegate8;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(ErrorInfo) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(NativeException) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(ushort) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(HostID), typeof(NativeRmiContext), typeof(global::System.IntPtr), typeof(int) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(global::System.IntPtr) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(UserWorkerThreadCallbackContext) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(UserWorkerThreadCallbackContext) };
}

}
