//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NetClientConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NetClientConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NetClientConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetClientConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NetClientConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int UdpIssueRecvLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpIssueRecvLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpIssueRecvLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_Client {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_Client_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_Client_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_Server {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_Server_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_Server_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_ServerStaticAssigned {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_ServerStaticAssigned_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpRecvBufferLength_ServerStaticAssigned_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpIssueRecvLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpIssueRecvLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpIssueRecvLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpRecvBufferLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpRecvBufferLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpRecvBufferLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpSendBufferLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpSendBufferLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpSendBufferLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_Client {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_Client_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_Client_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_Server {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_Server_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_Server_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_ServerStaticAssigned {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_ServerStaticAssigned_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpSendBufferLength_ServerStaticAssigned_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSocketTcpKeepAliveOption {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableSocketTcpKeepAliveOption_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableSocketTcpKeepAliveOption_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliableUdpHeartbeatIntervalMs_Real {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReliableUdpHeartbeatIntervalMs_Real_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReliableUdpHeartbeatIntervalMs_Real_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliableUdpHeartbeatIntervalMs_ForDummyTest {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpSocketConnectTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpSocketConnectTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpSocketConnectTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ClientConnectServerTimeoutTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ClientConnectServerTimeoutTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ClientConnectServerTimeoutTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DefaultConnectionTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultConnectionTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefaultConnectionTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MinConnectionTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MinConnectionTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MinConnectionTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MaxConnectionTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MaxConnectionTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MaxConnectionTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint WaitCompletionTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_WaitCompletionTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetClientConfig_WaitCompletionTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint HeartbeatIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_HeartbeatIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetClientConfig_HeartbeatIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint GarbageCollectIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_GarbageCollectIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetClientConfig_GarbageCollectIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ServerHolepunchIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ServerHolepunchIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ServerHolepunchIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UdpHolepunchIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpHolepunchIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpHolepunchIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ServerUdpRepunchIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpRepunchIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpRepunchIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpRepunchMaxTrialCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpRepunchMaxTrialCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpRepunchMaxTrialCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpHolepunchMaxTrialCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpHolepunchMaxTrialCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpHolepunchMaxTrialCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long P2PHolepunchIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_P2PHolepunchIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_P2PHolepunchIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int P2PShotgunStartTurn {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_P2PShotgunStartTurn_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_P2PShotgunStartTurn_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int P2PHolepunchMaxTurnCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_P2PHolepunchMaxTurnCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_P2PHolepunchMaxTurnCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldUnmatureClientTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldUnmatureClientTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldUnmatureClientTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldAddMemberAckTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldAddMemberAckTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldAddMemberAckTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DisposeGarbagedHostsTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DisposeGarbagedHostsTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_DisposeGarbagedHostsTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RemoveTooOldUdpSendPacketQueueTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AssembleFraggedPacketTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_AssembleFraggedPacketTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_AssembleFraggedPacketTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnablePacketDefragWarning {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnablePacketDefragWarning_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnablePacketDefragWarning_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GetP2PHolepunchEndTimeMs() {
    long ret = ProudNetClientPluginPINVOKE.NetClientConfig_GetP2PHolepunchEndTimeMs();
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ShotgunTrialCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ShotgunTrialCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_ShotgunTrialCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ShotgunRange {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ShotgunRange_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_ShotgunRange_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UnreliablePingIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UnreliablePingIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_UnreliablePingIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliablePingIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReliablePingIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReliablePingIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UseReportRealUdpCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UseReportRealUdpCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_UseReportRealUdpCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportRealUdpCountIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReportRealUdpCountIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReportRealUdpCountIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint LanClientHeartbeatIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_LanClientHeartbeatIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetClientConfig_LanClientHeartbeatIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LanPeerConnectPeerTimeoutTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_LanPeerConnectPeerTimeoutTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_LanPeerConnectPeerTimeoutTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldJoiningTimeOutIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldJoiningTimeOutIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_PurgeTooOldJoiningTimeOutIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RemoveLookaheadMessageTimeoutIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_RemoveLookaheadMessageTimeoutIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_RemoveLookaheadMessageTimeoutIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int RecyclePairReuseTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_RecyclePairReuseTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_RecyclePairReuseTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GarbageTooOldRecyclableUdpSocketsIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpSocketLatentCloseMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpSocketLatentCloseMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_ServerUdpSocketLatentCloseMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpInDangerThresholdMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpInDangerThresholdMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpInDangerThresholdMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpUnstableDetectionWaitTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpUnstableDetectionWaitTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpUnstableDetectionWaitTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PauseUdpSendDurationOnTcpInDangerMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_PauseUdpSendDurationOnTcpInDangerMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_PauseUdpSendDurationOnTcpInDangerMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RecentAssemblyingPacketIDsClearIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_RecentAssemblyingPacketIDsClearIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_RecentAssemblyingPacketIDsClearIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int AutoConnectionRecoveryTimeoutTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryTimeoutTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryTimeoutTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AutoConnectionRecoveryTimeoutMinTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryTimeoutMinTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryTimeoutMinTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int EveryRemoteIssueSendOnNeedIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EveryRemoteIssueSendOnNeedIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_EveryRemoteIssueSendOnNeedIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GetFallbackServerUdpToTcpTimeoutMs() {
    long ret = ProudNetClientPluginPINVOKE.NetClientConfig_GetFallbackServerUdpToTcpTimeoutMs();
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long GetFallbackP2PUdpToTcpTimeoutMs() {
    long ret = ProudNetClientPluginPINVOKE.NetClientConfig_GetFallbackP2PUdpToTcpTimeoutMs();
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int DefaultNoPingTimeoutTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultNoPingTimeoutTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefaultNoPingTimeoutTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int LagLinearProgrammingFactorPercent {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_LagLinearProgrammingFactorPercent_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_LagLinearProgrammingFactorPercent_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int StreamGrowBy {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_StreamGrowBy_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_StreamGrowBy_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int InternalNetVersion {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_InternalNetVersion_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_InternalNetVersion_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int InternalLanVersion {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_InternalLanVersion_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_InternalLanVersion_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string GetVersion() {
    string ret = ProudNetClientPluginPINVOKE.NetClientConfig_GetVersion();
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MtuLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MtuLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_MtuLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ElectSuperPeerIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ElectSuperPeerIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ElectSuperPeerIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageMaxLength {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MessageMaxLength_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_MessageMaxLength_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DefaultGracefulDisconnectTimeoutMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultGracefulDisconnectTimeoutMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefaultGracefulDisconnectTimeoutMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MaxS2CMulticastRouteCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MaxS2CMulticastRouteCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_MaxS2CMulticastRouteCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UnreliableS2CRoutedMulticastMaxPingDefaultMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ForceCompressedRelayDestListOnly {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ForceCompressedRelayDestListOnly_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_ForceCompressedRelayDestListOnly_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSpeedHackDetectorByDefault {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableSpeedHackDetectorByDefault_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableSpeedHackDetectorByDefault_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableMessagePriority {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableMessagePriority_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableMessagePriority_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SpeedHackDetectorPingIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_SpeedHackDetectorPingIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_SpeedHackDetectorPingIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int DefaultMaxDirectP2PMulticastCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultMaxDirectP2PMulticastCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefaultMaxDirectP2PMulticastCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UpnpDetectNatDeviceByDefault {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UpnpDetectNatDeviceByDefault_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_UpnpDetectNatDeviceByDefault_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UpnpTcpAddPortMappingByDefault {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UpnpTcpAddPortMappingByDefault_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_UpnpTcpAddPortMappingByDefault_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MeasureClientSendSpeedIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MeasureClientSendSpeedIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MeasureClientSendSpeedIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MeasureSendSpeedDurationMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MeasureSendSpeedDurationMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MeasureSendSpeedDurationMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static DirectP2PStartCondition DefaultDirectP2PStartCondition {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultDirectP2PStartCondition_set((int)value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DirectP2PStartCondition ret = (DirectP2PStartCondition)ProudNetClientPluginPINVOKE.NetClientConfig_DefaultDirectP2PStartCondition_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool CatchUnhandledException {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_CatchUnhandledException_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_CatchUnhandledException_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool NetworkerThreadPriorityIsHigh {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_NetworkerThreadPriorityIsHigh_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_NetworkerThreadPriorityIsHigh_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableAbortiveSocketClose {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableAbortiveSocketClose_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableAbortiveSocketClose_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableObjectPooling {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableObjectPooling_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableObjectPooling_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSocketReuseAddress {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableSocketReuseAddress_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableSocketReuseAddress_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportLanP2PPeerPingIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReportLanP2PPeerPingIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReportLanP2PPeerPingIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportP2PPeerPingTestIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReportP2PPeerPingTestIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReportP2PPeerPingTestIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportServerTimeAndPingIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ReportServerTimeAndPingIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ReportServerTimeAndPingIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LongIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_LongIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_LongIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MinSendSpeed {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MinSendSpeed_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MinSendSpeed_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int DefaultOverSendSuspectingThresholdInBytes {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefaultOverSendSuspectingThresholdInBytes_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefaultOverSendSuspectingThresholdInBytes_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ForceUnsafeHeapToSafeHeap {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ForceUnsafeHeapToSafeHeap_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_ForceUnsafeHeapToSafeHeap_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSendBrake {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableSendBrake_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableSendBrake_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpCongestionControl_MinPacketLossPercent {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UdpCongestionControl_MinPacketLossPercent_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_UdpCongestionControl_MinPacketLossPercent_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long VizReconnectTryIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_VizReconnectTryIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_VizReconnectTryIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SuperPeerSelectionPremiumMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_SuperPeerSelectionPremiumMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_SuperPeerSelectionPremiumMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long HostIDRecycleAllowTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_HostIDRecycleAllowTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_HostIDRecycleAllowTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int SendQueueHeavyWarningCapacity {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningCapacity_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningCapacity_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SendQueueHeavyWarningTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SendQueueHeavyWarningCheckCoolTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningCheckCoolTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_SendQueueHeavyWarningCheckCoolTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UpdateNetClientStatCloneCoolTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UpdateNetClientStatCloneCoolTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_UpdateNetClientStatCloneCoolTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableErrorReportToNettention {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableErrorReportToNettention_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableErrorReportToNettention_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ManagerGarbageFreeTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ManagerGarbageFreeTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_ManagerGarbageFreeTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint ManagerAverageElapsedTimeCollectCount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ManagerAverageElapsedTimeCollectCount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetClientPluginPINVOKE.NetClientConfig_ManagerAverageElapsedTimeCollectCount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableStarvationWarning {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableStarvationWarning_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableStarvationWarning_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool FraggingOnNeedByDefault {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_FraggingOnNeedByDefault_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_FraggingOnNeedByDefault_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool CheckDeadLock {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_CheckDeadLock_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_CheckDeadLock_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UseIsSameLanToLocalForMaxDirectP2PMulticast {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpSendMaxAmount {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_TcpSendMaxAmount_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_TcpSendMaxAmount_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ConcealDeadlockOnDisconnect {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ConcealDeadlockOnDisconnect_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_ConcealDeadlockOnDisconnect_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageOverloadWarningLimit {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadWarningLimit_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadWarningLimit_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageOverloadWarningLimitTimeMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadWarningLimitTimeMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadWarningLimitTimeMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MessageOverloadTimerIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadTimerIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_MessageOverloadTimerIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LanRemotePeerHeartBeatTimerIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_LanRemotePeerHeartBeatTimerIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_LanRemotePeerHeartBeatTimerIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void AssertTimeoutTimeAppropriate(long ms) {
    ProudNetClientPluginPINVOKE.NetClientConfig_AssertTimeoutTimeAppropriate(ms);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int P2PFallbackTcpRelayResendTimeIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_P2PFallbackTcpRelayResendTimeIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_P2PFallbackTcpRelayResendTimeIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int CleanUpOldPacketIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_CleanUpOldPacketIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_CleanUpOldPacketIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int NormalizePacketIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_NormalizePacketIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetClientPluginPINVOKE.NetClientConfig_NormalizePacketIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void ThrowExceptionIfMessageLengthOutOfRange(int length) {
    ProudNetClientPluginPINVOKE.NetClientConfig_ThrowExceptionIfMessageLengthOutOfRange(length);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double MessageRecovery_MessageIDAckIntervalMs {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_MessageRecovery_MessageIDAckIntervalMs_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetClientPluginPINVOKE.NetClientConfig_MessageRecovery_MessageIDAckIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ListenSocket_RetryOnInvalidArgError {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_ListenSocket_RetryOnInvalidArgError_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_ListenSocket_RetryOnInvalidArgError_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool AllowOutputDebugString {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_AllowOutputDebugString_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_AllowOutputDebugString_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool DefensiveSendReadyListAdd {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefensiveSendReadyListAdd_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefensiveSendReadyListAdd_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool DefensiveCustomValueEvent {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_DefensiveCustomValueEvent_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_DefensiveCustomValueEvent_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnablePeriodicDetectingTransitionNetwork {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnablePeriodicDetectingTransitionNetwork_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnablePeriodicDetectingTransitionNetwork_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long WaitForSendingDummyPacketIntervalMs {
    get {
      long ret = ProudNetClientPluginPINVOKE.NetClientConfig_WaitForSendingDummyPacketIntervalMs_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableAutoConnectionRecoveryOnServer {
    set {
      ProudNetClientPluginPINVOKE.NetClientConfig_EnableAutoConnectionRecoveryOnServer_set(value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetClientPluginPINVOKE.NetClientConfig_EnableAutoConnectionRecoveryOnServer_get();
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NetClientConfig() : this(ProudNetClientPluginPINVOKE.new_NetClientConfig(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int MessageMinLength = ProudNetClientPluginPINVOKE.NetClientConfig_MessageMinLength_get();
  public static readonly int MaxConnectionCount = ProudNetClientPluginPINVOKE.NetClientConfig_MaxConnectionCount_get();
  public static readonly int OrdinaryHeavyS2CMulticastCount = ProudNetClientPluginPINVOKE.NetClientConfig_OrdinaryHeavyS2CMulticastCount_get();
  public static readonly bool EnableTestSplitter = ProudNetClientPluginPINVOKE.NetClientConfig_EnableTestSplitter_get();
  public static readonly uint ClientListHashTableValue = ProudNetClientPluginPINVOKE.NetClientConfig_ClientListHashTableValue_get();
  public static readonly int RountTripLatencyTestMaxCount = ProudNetClientPluginPINVOKE.NetClientConfig_RountTripLatencyTestMaxCount_get();
}

}
