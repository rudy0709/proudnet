//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class ErrorInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ErrorInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ErrorInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ErrorInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_ErrorInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public override string ToString() 
	{
		return GetString();
	}

  public ErrorType errorType {
    set {
      ProudNetServerPluginPINVOKE.ErrorInfo_errorType_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ErrorType ret = (ErrorType)ProudNetServerPluginPINVOKE.ErrorInfo_errorType_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ErrorType detailType {
    set {
      ProudNetServerPluginPINVOKE.ErrorInfo_detailType_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ErrorType ret = (ErrorType)ProudNetServerPluginPINVOKE.ErrorInfo_detailType_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HostID remote {
    set {
      ProudNetServerPluginPINVOKE.ErrorInfo_remote_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      HostID ret = (HostID)ProudNetServerPluginPINVOKE.ErrorInfo_remote_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string comment {
    set {
      ProudNetServerPluginPINVOKE.ErrorInfo_comment_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetServerPluginPINVOKE.ErrorInfo_comment_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string source {
    set {
      ProudNetServerPluginPINVOKE.ErrorInfo_source_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetServerPluginPINVOKE.ErrorInfo_source_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ErrorInfo() : this(ProudNetServerPluginPINVOKE.new_ErrorInfo(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetString() {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_GetString(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ErrorInfo Clone() {
    global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.ErrorInfo_Clone(swigCPtr);
    ErrorInfo ret = (cPtr == global::System.IntPtr.Zero) ? null : new ErrorInfo(cPtr, false);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToString(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToString((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToStringByLangID(ErrorType e, int languageID) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToStringByLangID((int)e, languageID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToPlainString(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToPlainString((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToString_Kor(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToString_Kor((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToString_Eng(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToString_Eng((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToString_Chn(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToString_Chn((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string TypeToString_Jpn(ErrorType e) {
    string ret = ProudNetServerPluginPINVOKE.ErrorInfo_TypeToString_Jpn((int)e);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void CopyFromNative(global::System.IntPtr obj) {
    ProudNetServerPluginPINVOKE.ErrorInfo_CopyFromNative(swigCPtr, obj);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  private global::System.IntPtr GetNativeReceivedMessage() { return ProudNetServerPluginPINVOKE.ErrorInfo_GetNativeReceivedMessage(swigCPtr); }

  private int GetNativeReceivedMessageLength() {
    int ret = ProudNetServerPluginPINVOKE.ErrorInfo_GetNativeReceivedMessageLength(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
