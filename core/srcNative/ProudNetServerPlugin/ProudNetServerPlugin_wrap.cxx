/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#		if defined(__ORBIS__)
#     		define SWIGEXPORT extern "C" __declspec (dllexport)
#		else
#     		define SWIGEXPORT __attribute__ ((visibility("default")))
#   	endif
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types:
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ProudNetServerPlugin(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback,
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
                                                SWIG_CSharpExceptionCallback_t overflowCallback,
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ProudNetServerPlugin(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ProudNetServerPlugin(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "NativeType.h"
#include "ProudNetServerPlugin.h"


#if defined(_WIN32)
#include <windows.h>
#include <rpc.h>
#endif


#include <string>


#include <stdint.h>		// Use the C99 official header


#include <stdint.h>		// Use the C99 official header


#include "PNString.h"

Proud::CStringEncoder* GetUTF16toUTF8()
{
	// ikpil.choi 2017.01.10 : Unity 4.x 쪽이 아직 C++98을 사용하므로, C++11 코드 제거
	//static Proud::CHeldPtr<Proud::CStringEncoder> encoder(Proud::CStringEncoder::Create("UTF-16LE", "UTF-8"));
	//return encoder;

	// junghoon.lee 2018.08.23 상기의 주석처리되어 있는 인코더를 사용하면 한글 문자열이 깨지는 문제가 발생하여 아래와 같이 디폴트 인코더로 CP949를 사용하게 바꾸었습니다.
	// 3개국어 (영어반드시 포함) 이상 한 문자열에 쓰이게 되면 깨지는 문제가 아직 있습니다.
	// 현재 임시 미봉책입니다.
	return NULL;
}

Proud::CStringEncoder* GetUTF8toUTF16()
{
	// ikpil.choi 2017.01.10 : Unity 4.x 쪽이 아직 C++98을 사용하므로, C++11 코드 제거
	//static Proud::CHeldPtr<Proud::CStringEncoder> encoder(Proud::CStringEncoder::Create("UTF-8", "UTF-16LE"));
	//return encoder;

	// junghoon.lee 2018.08.23 상기의 주석처리되어 있는 인코더를 사용하면 한글 문자열이 깨지는 문제가 발생하여 아래와 같이 디폴트 인코더로 CP949를 사용하게 바꾸었습니다.
	// 3개국어 (영어반드시 포함) 이상 한 문자열에 쓰이게 되면 깨지는 문제가 아직 있습니다.
	// 현재 임시 미봉책입니다.
	return NULL;
}


SWIGINTERN void Proud_CFastArray_Sl_int_Sg__Add(Proud::CFastArray< int > *self,int value){
		assert(self);
		self->Add(value);
	}
SWIGINTERN int Proud_CFastArray_Sl_int_Sg__Get(Proud::CFastArray< int > *self,int index){
		assert(self);
		return (*self)[index];
	}
SWIGINTERN void Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Add(Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *self,Proud::AddrPort value){
		assert(self);
		self->Add(value);
	}
SWIGINTERN Proud::AddrPort Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Get(Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *self,int index){
		assert(self);
		return (*self)[index];
	}
SWIGINTERN Proud::HostID Proud_CNetServer_CreateP2PGroup__SWIG_0(Proud::CNetServer *self,Proud::HostIDArray *clientHostIDs,Proud::ByteArray *message){
		assert(self);
		assert(clientHostIDs);
		return self->CreateP2PGroup(clientHostIDs->GetData(), clientHostIDs->GetCount(), (message != NULL ? *message : Proud::ByteArray()));
	}
SWIGINTERN Proud::HostID Proud_CNetServer_CreateP2PGroup__SWIG_1(Proud::CNetServer *self,Proud::ByteArray *message){
		assert(self);
		return self->CreateP2PGroup(NULL, 0, (message != NULL ? *message : Proud::ByteArray()));
	}
SWIGINTERN void Proud_CNetServer_GetClientHostIDs(Proud::CNetServer *self,Proud::HostIDArray *clientHostIDs){
		assert(self);
		assert(clientHostIDs);

		int count = self->GetClientCount();
		clientHostIDs->SetCount(count);
		self->GetClientHostIDs(clientHostIDs->GetData(), count);
	}
SWIGINTERN void Proud_CNetServer_GetJoinedP2PGroups(Proud::CNetServer *self,Proud::HostID clientHostID,Proud::HostIDArray *output){
		assert(self);
		assert(output);

		self->GetJoinedP2PGroups(clientHostID, *output);
	}
SWIGINTERN bool Proud_CNetServer_GetClientInfo(Proud::CNetServer *self,Proud::HostID clientHostID,Proud::CNetClientInfo *output){
		assert(self);
		assert(output);
		return self->GetClientInfo(clientHostID, *output);

	}
SWIGINTERN void Proud_CNetServer_AttachStub(Proud::CNetServer *self,void *nativeRmiStub){
		assert(self);
		assert(nativeRmiStub);

		Proud::IRmiStub* rmiStub = static_cast<Proud::IRmiStub*>(nativeRmiStub);
		self->AttachStub(rmiStub);
	}
SWIGINTERN void Proud_CNetServer_AttachProxy(Proud::CNetServer *self,void *nativeRmiProxy){
		assert(self);
		assert(nativeRmiProxy);

		Proud::IRmiProxy* rmiProxy = static_cast<Proud::IRmiProxy*>(nativeRmiProxy);
		self->AttachProxy(rmiProxy);
	}
SWIGINTERN void Proud_CNetServer_Start(Proud::CNetServer *self,Proud::CStartServerParameter &param){
		assert(self);
		self->Start(param);
	}
SWIGINTERN void Proud_CNetServer_Stop(Proud::CNetServer *self){
		assert(self);
		self->Stop();
	}
SWIGINTERN Proud::CP2PGroup Proud_CNetServer_GetP2PGroupInfo(Proud::CNetServer *self,Proud::HostID groupHostID){
		assert(self);

		Proud::CP2PGroup info;
		self->GetP2PGroupInfo(groupHostID, info);
		return info;
	}
SWIGINTERN int Proud_CNetServer_GetMemberCountOfP2PGroup(Proud::CNetServer *self,Proud::HostID groupHostID){
		assert(self);

		Proud::CP2PGroup info;
		self->GetP2PGroupInfo(groupHostID, info);
		return info.m_members.GetCount();
	}
SWIGINTERN Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > Proud_CNetServer_GetTcpListenerLocalAddrs(Proud::CNetServer *self){
		assert(self);

		Proud::CFastArray<Proud::AddrPort> output;
		self->GetTcpListenerLocalAddrs(output);
		return output;
	}
SWIGINTERN Proud::CNetServerStats Proud_CNetServer_GetStats(Proud::CNetServer *self){
		assert(self);
		Proud::CNetServerStats outVal;
		self->GetStats(outVal);
		return outVal;
	}
SWIGINTERN int Proud_CNetServer_GetLastUnreliablePingMs(Proud::CNetServer *self,Proud::HostID peerHostID){
		assert(self);
		return self->GetLastUnreliablePingMs(peerHostID);
	}
SWIGINTERN int Proud_CNetServer_GetRecentUnreliablePingMs(Proud::CNetServer *self,Proud::HostID peerHostID){
		assert(self);
		return self->GetRecentUnreliablePingMs(peerHostID);
	}
SWIGINTERN bool Proud_CNetServer_GetP2PConnectionStats__SWIG_0(Proud::CNetServer *self,Proud::HostID remoteHostID,Proud::CP2PConnectionStats *status){
		assert(self);
		return self->GetP2PConnectionStats(remoteHostID, *status);
	}
SWIGINTERN bool Proud_CNetServer_GetP2PConnectionStats__SWIG_1(Proud::CNetServer *self,Proud::HostID remoteA,Proud::HostID remoteB,Proud::CP2PPairConnectionStats *status){
		assert(self);
		return self->GetP2PConnectionStats(remoteA, remoteB, *status);
	}
SWIGINTERN void Proud_HostIDArray_add(Proud::HostIDArray *self,Proud::HostID data){
		assert(self);
		self->Add(data);
	}
SWIGINTERN void Proud_HostIDArray_Clear(Proud::HostIDArray *self,Proud::HostID data){
		assert(self);
		self->Clear();
	}
SWIGINTERN int Proud_HostIDArray_GetCount(Proud::HostIDArray *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN Proud::HostID Proud_HostIDArray_at(Proud::HostIDArray *self,int index){
		assert(self);

		int count = self->GetCount();

		if(index < 0 || count <= index)
		{
			throw Proud::Exception("number is out of range");
		}

		return (*self)[index];
	}
SWIGINTERN int Proud_HostIDSet_GetCount(Proud::HostIDSet *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN void Proud_ByteArray_Add(Proud::ByteArray *self,uint8_t data){
		assert(self);
		self->Add(data);
	}
SWIGINTERN void Proud_ByteArray_Clear(Proud::ByteArray *self,uint8_t data){
		assert(self);
		self->Clear();
	}
SWIGINTERN int Proud_ByteArray_GetCount(Proud::ByteArray *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN uint8_t Proud_ByteArray_At(Proud::ByteArray *self,int index){
		assert(self);

		int count = self->GetCount();

		if(index < 0)
		{
			throw Proud::Exception("index is out of range");
		}

		return (*self)[index];
	}
SWIGINTERN void Proud_ErrorInfo_CopyFromNative(Proud::ErrorInfo *self,void *obj){
		assert(self);
		assert(obj);

		Proud::ErrorInfo* errorInfo = static_cast<Proud::ErrorInfo*>(obj);
		*self = *errorInfo;
	}
SWIGINTERN void *Proud_ErrorInfo_GetNativeReceivedMessage(Proud::ErrorInfo *self){
		assert(self);
		return &(self->m_lastReceivedMessage);
	}
SWIGINTERN int Proud_ErrorInfo_GetNativeReceivedMessageLength(Proud::ErrorInfo *self){
		assert(self);
		return self->m_lastReceivedMessage.GetCount();
	}
SWIGINTERN void Proud_CRemoteOfflineEventArgs_CopyFromNative(Proud::CRemoteOfflineEventArgs *self,void *obj){
		assert(self);
		assert(obj);

		Proud::CRemoteOfflineEventArgs* args = static_cast<Proud::CRemoteOfflineEventArgs*>(obj);
		*self = *args;
	}
SWIGINTERN void Proud_CRemoteOnlineEventArgs_CopyFromNative(Proud::CRemoteOnlineEventArgs *self,void *obj){
		assert(self);
		assert(obj);

		Proud::CRemoteOnlineEventArgs* args = static_cast<Proud::CRemoteOnlineEventArgs*>(obj);
		*self = *args;
	}
SWIGINTERN void *Proud_AddrPort_GetNativeIPAddr(Proud::AddrPort *self){
	    assert(self);
		return &(self->m_addr.v6Byte);
	}
SWIGINTERN void *Proud_CNetUtil_LocalIPAddresses_New(){
		using namespace Proud;

		CFastArray<String>* output = new CFastArray<String>();
		CNetUtil::GetLocalIPAddresses(*output);
		return (void*) output;
	}
SWIGINTERN void Proud_CNetUtil_LocalIPAddresses_Delete(void *ipAddresses){
		assert(ipAddresses);

		using namespace Proud;
		delete (CFastArray<String>*)ipAddresses;
	}
SWIGINTERN int Proud_CNetUtil_GetLocalIPAddresseCount(void *p){
		if (p == NULL)
		{
			return 0;
		}

		using namespace Proud;

		CFastArray<String>* ipAddresses = (CFastArray<String>*)p;
		return ipAddresses->GetCount();
	}
SWIGINTERN Proud::String Proud_CNetUtil_GetLocalIPAddress(void *p,int index){
		if (p == NULL)
		{
			return Proud::String();
		}

		using namespace Proud;
		CFastArray<String>* ipAddresses = (CFastArray<String>*)p;
		return (*ipAddresses)[index];
	}
SWIGINTERN void *Proud_CNetClientInfo_GetHostTag(Proud::CNetClientInfo *self){
		assert(self);
		return self->m_hostTag;
	}
SWIGINTERN void Proud_CStartServerParameter_SetExternalUserWorkerThreadPool(Proud::CStartServerParameter *self,Proud::CThreadPool *threadPool){
		assert(self);
		self->m_externalUserWorkerThreadPool = threadPool;
	}
SWIGINTERN void Proud_CStartServerParameter_SetExternalNetWorkerThreadPool(Proud::CStartServerParameter *self,Proud::CThreadPool *threadPool){
		assert(self);
		self->m_externalNetWorkerThreadPool = threadPool;
	}
SWIGINTERN void Proud_Guid_CopyManagedByteArrayToNativeGuid(Proud::Guid *self,void *inByteArray,int length){
		assert(self);

		if (length <= 0)
		{
			return;
		}

		assert(sizeof(Proud::PNGUID) == length);

		memcpy((void*)self, inByteArray, length);
	}

using namespace Proud;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ProudNetServerPlugin_wrap.h"

SwigDirector_INetCoreEvent::SwigDirector_INetCoreEvent() : Proud::INetCoreEvent(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_INetCoreEvent::~SwigDirector_INetCoreEvent() {
  
}


void SwigDirector_INetCoreEvent::OnError(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnError) {
    throw Swig::DirectorPureVirtualException("Proud::INetCoreEvent::OnError");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnError(jerrorInfo);
  }
}

void SwigDirector_INetCoreEvent::OnWarning(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnWarning) {
    throw Swig::DirectorPureVirtualException("Proud::INetCoreEvent::OnWarning");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnWarning(jerrorInfo);
  }
}

void SwigDirector_INetCoreEvent::OnInformation(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnInformation) {
    throw Swig::DirectorPureVirtualException("Proud::INetCoreEvent::OnInformation");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnInformation(jerrorInfo);
  }
}

void SwigDirector_INetCoreEvent::OnException(Exception const &e) {
  void * je = 0 ;
  
  if (!swig_callbackOnException) {
    throw Swig::DirectorPureVirtualException("Proud::INetCoreEvent::OnException");
  } else {
    je = (Exception *) &e; 
    swig_callbackOnException(je);
  }
}

void SwigDirector_INetCoreEvent::OnNoRmiProcessed(Proud::RmiID rmiID) {
  unsigned short jrmiID  ;
  
  if (!swig_callbackOnNoRmiProcessed) {
    throw Swig::DirectorPureVirtualException("Proud::INetCoreEvent::OnNoRmiProcessed");
  } else {
    jrmiID = rmiID;
    swig_callbackOnNoRmiProcessed(jrmiID);
  }
}

void SwigDirector_INetCoreEvent::OnReceiveUserMessage(Proud::HostID sender, Proud::RmiContext const &rmiContext, uint8_t *payload, int payloadLength) {
  int jsender  ;
  void * jrmiContext = 0 ;
  void * jpayload = 0 ;
  int jpayloadLength  ;
  
  if (!swig_callbackOnReceiveUserMessage) {
    Proud::INetCoreEvent::OnReceiveUserMessage(sender,rmiContext,payload,payloadLength);
    return;
  } else {
    jsender = (int)sender;
    jrmiContext = (Proud::RmiContext *) &rmiContext; 
    jpayload = (void *) payload; 
    jpayloadLength = payloadLength;
    swig_callbackOnReceiveUserMessage(jsender, jrmiContext, jpayload, jpayloadLength);
  }
}

void SwigDirector_INetCoreEvent::OnTick(void *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnTick) {
    Proud::INetCoreEvent::OnTick(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnTick(jarg0);
  }
}

void SwigDirector_INetCoreEvent::OnUserWorkerThreadCallbackBegin(Proud::CUserWorkerThreadCallbackContext *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnUserWorkerThreadCallbackBegin) {
    Proud::INetCoreEvent::OnUserWorkerThreadCallbackBegin(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnUserWorkerThreadCallbackBegin(jarg0);
  }
}

void SwigDirector_INetCoreEvent::OnUserWorkerThreadCallbackEnd(Proud::CUserWorkerThreadCallbackContext *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnUserWorkerThreadCallbackEnd) {
    Proud::INetCoreEvent::OnUserWorkerThreadCallbackEnd(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnUserWorkerThreadCallbackEnd(jarg0);
  }
}

void SwigDirector_INetCoreEvent::swig_connect_director(SWIG_Callback0_t callbackOnError, SWIG_Callback1_t callbackOnWarning, SWIG_Callback2_t callbackOnInformation, SWIG_Callback3_t callbackOnException, SWIG_Callback4_t callbackOnNoRmiProcessed, SWIG_Callback5_t callbackOnReceiveUserMessage, SWIG_Callback6_t callbackOnTick, SWIG_Callback7_t callbackOnUserWorkerThreadCallbackBegin, SWIG_Callback8_t callbackOnUserWorkerThreadCallbackEnd) {
  swig_callbackOnError = callbackOnError;
  swig_callbackOnWarning = callbackOnWarning;
  swig_callbackOnInformation = callbackOnInformation;
  swig_callbackOnException = callbackOnException;
  swig_callbackOnNoRmiProcessed = callbackOnNoRmiProcessed;
  swig_callbackOnReceiveUserMessage = callbackOnReceiveUserMessage;
  swig_callbackOnTick = callbackOnTick;
  swig_callbackOnUserWorkerThreadCallbackBegin = callbackOnUserWorkerThreadCallbackBegin;
  swig_callbackOnUserWorkerThreadCallbackEnd = callbackOnUserWorkerThreadCallbackEnd;
}

void SwigDirector_INetCoreEvent::swig_init_callbacks() {
  swig_callbackOnError = 0;
  swig_callbackOnWarning = 0;
  swig_callbackOnInformation = 0;
  swig_callbackOnException = 0;
  swig_callbackOnNoRmiProcessed = 0;
  swig_callbackOnReceiveUserMessage = 0;
  swig_callbackOnTick = 0;
  swig_callbackOnUserWorkerThreadCallbackBegin = 0;
  swig_callbackOnUserWorkerThreadCallbackEnd = 0;
}

SwigDirector_INetServerEvent::SwigDirector_INetServerEvent() : Proud::INetServerEvent(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_INetServerEvent::~SwigDirector_INetServerEvent() {
  
}


void SwigDirector_INetServerEvent::OnError(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnError) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnError");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnError(jerrorInfo);
  }
}

void SwigDirector_INetServerEvent::OnWarning(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnWarning) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnWarning");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnWarning(jerrorInfo);
  }
}

void SwigDirector_INetServerEvent::OnInformation(Proud::ErrorInfo *errorInfo) {
  void * jerrorInfo = 0 ;
  
  if (!swig_callbackOnInformation) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnInformation");
  } else {
    jerrorInfo = (void *) errorInfo; 
    swig_callbackOnInformation(jerrorInfo);
  }
}

void SwigDirector_INetServerEvent::OnException(Exception const &e) {
  void * je = 0 ;
  
  if (!swig_callbackOnException) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnException");
  } else {
    je = (Exception *) &e; 
    swig_callbackOnException(je);
  }
}

void SwigDirector_INetServerEvent::OnNoRmiProcessed(Proud::RmiID rmiID) {
  unsigned short jrmiID  ;
  
  if (!swig_callbackOnNoRmiProcessed) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnNoRmiProcessed");
  } else {
    jrmiID = rmiID;
    swig_callbackOnNoRmiProcessed(jrmiID);
  }
}

void SwigDirector_INetServerEvent::OnReceiveUserMessage(Proud::HostID sender, Proud::RmiContext const &rmiContext, uint8_t *payload, int payloadLength) {
  int jsender  ;
  void * jrmiContext = 0 ;
  void * jpayload = 0 ;
  int jpayloadLength  ;
  
  if (!swig_callbackOnReceiveUserMessage) {
    Proud::INetCoreEvent::OnReceiveUserMessage(sender,rmiContext,payload,payloadLength);
    return;
  } else {
    jsender = (int)sender;
    jrmiContext = (Proud::RmiContext *) &rmiContext; 
    jpayload = (void *) payload; 
    jpayloadLength = payloadLength;
    swig_callbackOnReceiveUserMessage(jsender, jrmiContext, jpayload, jpayloadLength);
  }
}

void SwigDirector_INetServerEvent::OnTick(void *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnTick) {
    Proud::INetCoreEvent::OnTick(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnTick(jarg0);
  }
}

void SwigDirector_INetServerEvent::OnUserWorkerThreadCallbackBegin(Proud::CUserWorkerThreadCallbackContext *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnUserWorkerThreadCallbackBegin) {
    Proud::INetCoreEvent::OnUserWorkerThreadCallbackBegin(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnUserWorkerThreadCallbackBegin(jarg0);
  }
}

void SwigDirector_INetServerEvent::OnUserWorkerThreadCallbackEnd(Proud::CUserWorkerThreadCallbackContext *arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnUserWorkerThreadCallbackEnd) {
    Proud::INetCoreEvent::OnUserWorkerThreadCallbackEnd(arg0);
    return;
  } else {
    jarg0 = (void *) arg0; 
    swig_callbackOnUserWorkerThreadCallbackEnd(jarg0);
  }
}

void SwigDirector_INetServerEvent::OnClientJoin(Proud::CNetClientInfo *clientInfo) {
  void * jclientInfo = 0 ;
  
  if (!swig_callbackOnClientJoin) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnClientJoin");
  } else {
    jclientInfo = (void *) clientInfo; 
    swig_callbackOnClientJoin(jclientInfo);
  }
}

void SwigDirector_INetServerEvent::OnClientLeave(Proud::CNetClientInfo *clientInfo, Proud::ErrorInfo *errorinfo, Proud::ByteArray const &comment) {
  void * jclientInfo = 0 ;
  void * jerrorinfo = 0 ;
  void * jcomment = 0 ;
  
  if (!swig_callbackOnClientLeave) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnClientLeave");
  } else {
    jclientInfo = (void *) clientInfo; 
    jerrorinfo = (void *) errorinfo; 
    jcomment = (Proud::ByteArray *) &comment; 
    swig_callbackOnClientLeave(jclientInfo, jerrorinfo, jcomment);
  }
}

void SwigDirector_INetServerEvent::OnClientOffline(CRemoteOfflineEventArgs &arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnClientOffline) {
    Proud::INetServerEvent::OnClientOffline(arg0);
    return;
  } else {
    jarg0 = (CRemoteOfflineEventArgs *) &arg0; 
    swig_callbackOnClientOffline(jarg0);
  }
}

void SwigDirector_INetServerEvent::OnClientOnline(CRemoteOnlineEventArgs &arg0) {
  void * jarg0 = 0 ;
  
  if (!swig_callbackOnClientOnline) {
    Proud::INetServerEvent::OnClientOnline(arg0);
    return;
  } else {
    jarg0 = (CRemoteOnlineEventArgs *) &arg0; 
    swig_callbackOnClientOnline(jarg0);
  }
}

bool SwigDirector_INetServerEvent::OnConnectionRequest(AddrPort arg0, Proud::ByteArray &arg1, Proud::ByteArray &arg2) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0  ;
  void * jarg1 = 0 ;
  void * jarg2 = 0 ;
  
  if (!swig_callbackOnConnectionRequest) {
    return Proud::INetServerEvent::OnConnectionRequest(arg0,arg1,arg2);
  } else {
    jarg0 = (void *)&arg0; 
    jarg1 = (Proud::ByteArray *) &arg1; 
    jarg2 = (Proud::ByteArray *) &arg2; 
    jresult = (unsigned int) swig_callbackOnConnectionRequest(jarg0, jarg1, jarg2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_INetServerEvent::OnP2PGroupJoinMemberAckComplete(Proud::HostID groupHostID, Proud::HostID memberHostID, Proud::ErrorType result) {
  int jgroupHostID  ;
  int jmemberHostID  ;
  int jresult  ;
  
  if (!swig_callbackOnP2PGroupJoinMemberAckComplete) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnP2PGroupJoinMemberAckComplete");
  } else {
    jgroupHostID = (int)groupHostID;
    jmemberHostID = (int)memberHostID;
    jresult = (int)result;
    swig_callbackOnP2PGroupJoinMemberAckComplete(jgroupHostID, jmemberHostID, jresult);
  }
}

void SwigDirector_INetServerEvent::OnUserWorkerThreadBegin() {
  if (!swig_callbackOnUserWorkerThreadBegin) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnUserWorkerThreadBegin");
  } else {
    swig_callbackOnUserWorkerThreadBegin();
  }
}

void SwigDirector_INetServerEvent::OnUserWorkerThreadEnd() {
  if (!swig_callbackOnUserWorkerThreadEnd) {
    throw Swig::DirectorPureVirtualException("Proud::INetServerEvent::OnUserWorkerThreadEnd");
  } else {
    swig_callbackOnUserWorkerThreadEnd();
  }
}

void SwigDirector_INetServerEvent::OnClientHackSuspected(Proud::HostID arg0, Proud::HackType arg1) {
  int jarg0  ;
  int jarg1  ;
  
  if (!swig_callbackOnClientHackSuspected) {
    Proud::INetServerEvent::OnClientHackSuspected(arg0,arg1);
    return;
  } else {
    jarg0 = (int)arg0;
    jarg1 = (int)arg1;
    swig_callbackOnClientHackSuspected(jarg0, jarg1);
  }
}

void SwigDirector_INetServerEvent::OnP2PGroupRemoved(Proud::HostID arg0) {
  int jarg0  ;
  
  if (!swig_callbackOnP2PGroupRemoved) {
    Proud::INetServerEvent::OnP2PGroupRemoved(arg0);
    return;
  } else {
    jarg0 = (int)arg0;
    swig_callbackOnP2PGroupRemoved(jarg0);
  }
}

void SwigDirector_INetServerEvent::swig_connect_director(SWIG_Callback0_t callbackOnError, SWIG_Callback1_t callbackOnWarning, SWIG_Callback2_t callbackOnInformation, SWIG_Callback3_t callbackOnException, SWIG_Callback4_t callbackOnNoRmiProcessed, SWIG_Callback5_t callbackOnReceiveUserMessage, SWIG_Callback6_t callbackOnTick, SWIG_Callback7_t callbackOnUserWorkerThreadCallbackBegin, SWIG_Callback8_t callbackOnUserWorkerThreadCallbackEnd, SWIG_Callback9_t callbackOnClientJoin, SWIG_Callback10_t callbackOnClientLeave, SWIG_Callback11_t callbackOnClientOffline, SWIG_Callback12_t callbackOnClientOnline, SWIG_Callback13_t callbackOnConnectionRequest, SWIG_Callback14_t callbackOnP2PGroupJoinMemberAckComplete, SWIG_Callback15_t callbackOnUserWorkerThreadBegin, SWIG_Callback16_t callbackOnUserWorkerThreadEnd, SWIG_Callback17_t callbackOnClientHackSuspected, SWIG_Callback18_t callbackOnP2PGroupRemoved) {
  swig_callbackOnError = callbackOnError;
  swig_callbackOnWarning = callbackOnWarning;
  swig_callbackOnInformation = callbackOnInformation;
  swig_callbackOnException = callbackOnException;
  swig_callbackOnNoRmiProcessed = callbackOnNoRmiProcessed;
  swig_callbackOnReceiveUserMessage = callbackOnReceiveUserMessage;
  swig_callbackOnTick = callbackOnTick;
  swig_callbackOnUserWorkerThreadCallbackBegin = callbackOnUserWorkerThreadCallbackBegin;
  swig_callbackOnUserWorkerThreadCallbackEnd = callbackOnUserWorkerThreadCallbackEnd;
  swig_callbackOnClientJoin = callbackOnClientJoin;
  swig_callbackOnClientLeave = callbackOnClientLeave;
  swig_callbackOnClientOffline = callbackOnClientOffline;
  swig_callbackOnClientOnline = callbackOnClientOnline;
  swig_callbackOnConnectionRequest = callbackOnConnectionRequest;
  swig_callbackOnP2PGroupJoinMemberAckComplete = callbackOnP2PGroupJoinMemberAckComplete;
  swig_callbackOnUserWorkerThreadBegin = callbackOnUserWorkerThreadBegin;
  swig_callbackOnUserWorkerThreadEnd = callbackOnUserWorkerThreadEnd;
  swig_callbackOnClientHackSuspected = callbackOnClientHackSuspected;
  swig_callbackOnP2PGroupRemoved = callbackOnP2PGroupRemoved;
}

void SwigDirector_INetServerEvent::swig_init_callbacks() {
  swig_callbackOnError = 0;
  swig_callbackOnWarning = 0;
  swig_callbackOnInformation = 0;
  swig_callbackOnException = 0;
  swig_callbackOnNoRmiProcessed = 0;
  swig_callbackOnReceiveUserMessage = 0;
  swig_callbackOnTick = 0;
  swig_callbackOnUserWorkerThreadCallbackBegin = 0;
  swig_callbackOnUserWorkerThreadCallbackEnd = 0;
  swig_callbackOnClientJoin = 0;
  swig_callbackOnClientLeave = 0;
  swig_callbackOnClientOffline = 0;
  swig_callbackOnClientOnline = 0;
  swig_callbackOnConnectionRequest = 0;
  swig_callbackOnP2PGroupJoinMemberAckComplete = 0;
  swig_callbackOnUserWorkerThreadBegin = 0;
  swig_callbackOnUserWorkerThreadEnd = 0;
  swig_callbackOnClientHackSuspected = 0;
  swig_callbackOnP2PGroupRemoved = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntArray_TYPE_SIZE_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Proud::CFastArray< int >::TYPE_SIZE;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray() {
  void * jresult ;
  Proud::CFastArray< int > *result = 0 ;
  
  {
    try {
      result = (Proud::CFastArray< int > *)new Proud::CFastArray< int >();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArray(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_SuspendShrink(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->SuspendShrink();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_OnRecycle(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->OnRecycle();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_OnDrop(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->OnDrop();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_AddCount(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->AddCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_resize(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< int > const *)arg1)->GetCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_size(void * jarg1) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< int > const *)arg1)->size();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  bool result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (bool)((Proud::CFastArray< int > const *)arg1)->IsEmpty();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Clear(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->Clear();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_RemoveAt(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->RemoveAt(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Add(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      Proud_CFastArray_Sl_int_Sg__Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_Get(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (int)Proud_CFastArray_Sl_int_Sg__Get(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AddrPortArray_TYPE_SIZE_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Proud::CFastArray< Proud::AddrPort,true,false,intptr_t >::TYPE_SIZE;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AddrPortArray() {
  void * jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *result = 0 ;
  
  {
    try {
      result = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)new Proud::CFastArray< Proud::AddrPort,true,false,intptr_t >();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AddrPortArray(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_SuspendShrink(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->SuspendShrink();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_OnRecycle(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->OnRecycle();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_OnDrop(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->OnDrop();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_AddCount(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->AddCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_resize(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddrPortArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->GetCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddrPortArray_size(void * jarg1) {
  int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->size();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPortArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  bool result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (bool)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->IsEmpty();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_Clear(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->Clear();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_RemoveAt(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->RemoveAt(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_Add(void * jarg1, void * jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  Proud::AddrPort arg2 ;
  Proud::AddrPort *argp2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  argp2 = (Proud::AddrPort *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Proud::AddrPort", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPortArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  Proud::AddrPort result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Get(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_hostID_set(void * jarg1, int jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  HostID arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (HostID)jarg2; 
  if (arg1) (arg1)->m_hostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SuperPeerRating_hostID_get(void * jarg1) {
  int jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  HostID result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (HostID) ((arg1)->m_hostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_rating_set(void * jarg1, double jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_rating = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerRating_rating_get(void * jarg1) {
  double jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (double) ((arg1)->m_rating);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_realUdpEnabled_set(void * jarg1, unsigned int jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_realUdpEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SuperPeerRating_realUdpEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  bool result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (bool) ((arg1)->m_realUdpEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_isBehindNat_set(void * jarg1, unsigned int jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isBehindNat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SuperPeerRating_isBehindNat_get(void * jarg1) {
  unsigned int jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  bool result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (bool) ((arg1)->m_isBehindNat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_recentPingMs_set(void * jarg1, int jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_recentPingMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SuperPeerRating_recentPingMs_get(void * jarg1) {
  int jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (int) ((arg1)->m_recentPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_p2pGroupTotalRecentPingMs_set(void * jarg1, long long jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_P2PGroupTotalRecentPingMs = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SuperPeerRating_p2pGroupTotalRecentPingMs_get(void * jarg1) {
  long long jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int64_t result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (int64_t) ((arg1)->m_P2PGroupTotalRecentPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_sendSpeed_set(void * jarg1, double jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_sendSpeed = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerRating_sendSpeed_get(void * jarg1) {
  double jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (double) ((arg1)->m_sendSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_joinedTime_set(void * jarg1, long long jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_JoinedTime = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SuperPeerRating_joinedTime_get(void * jarg1) {
  long long jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  int64_t result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (int64_t) ((arg1)->m_JoinedTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerRating_frameRate_set(void * jarg1, double jarg2) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_frameRate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerRating_frameRate_get(void * jarg1) {
  double jresult ;
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  double result;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  result = (double) ((arg1)->m_frameRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SuperPeerRating() {
  void * jresult ;
  Proud::SuperPeerRating *result = 0 ;
  
  {
    try {
      result = (Proud::SuperPeerRating *)new Proud::SuperPeerRating();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SuperPeerRating(void * jarg1) {
  Proud::SuperPeerRating *arg1 = (Proud::SuperPeerRating *) 0 ;
  
  arg1 = (Proud::SuperPeerRating *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_realUdpWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_realUdpWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_realUdpWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_realUdpWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_noNatDeviceWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_noNatDeviceWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_noNatDeviceWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_noNatDeviceWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_serverLagWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_serverLagWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_serverLagWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_serverLagWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_peerLagWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_peerLagWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_peerLagWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_peerLagWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_sendSpeedWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_sendSpeedWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_sendSpeedWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_sendSpeedWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_frameRateWeight_set(void * jarg1, double jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_frameRateWeight = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_frameRateWeight_get(void * jarg1) {
  double jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  double result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (double) ((arg1)->m_frameRateWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_excludeNewJoineeDurationTimeMs_set(void * jarg1, long long jarg2) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_excludeNewJoineeDurationTimeMs = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_m_excludeNewJoineeDurationTimeMs_get(void * jarg1) {
  long long jresult ;
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  result = (int64_t) ((arg1)->m_excludeNewJoineeDurationTimeMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SuperPeerSelectionPolicy() {
  void * jresult ;
  Proud::CSuperPeerSelectionPolicy *result = 0 ;
  
  {
    try {
      result = (Proud::CSuperPeerSelectionPolicy *)new Proud::CSuperPeerSelectionPolicy();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_GetOrdinary() {
  void * jresult ;
  Proud::CSuperPeerSelectionPolicy result;
  
  {
    try {
      result = Proud::CSuperPeerSelectionPolicy::GetOrdinary();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CSuperPeerSelectionPolicy((const Proud::CSuperPeerSelectionPolicy &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SuperPeerSelectionPolicy_GetNull() {
  void * jresult ;
  Proud::CSuperPeerSelectionPolicy result;
  
  {
    try {
      result = Proud::CSuperPeerSelectionPolicy::GetNull();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CSuperPeerSelectionPolicy((const Proud::CSuperPeerSelectionPolicy &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SuperPeerSelectionPolicy(void * jarg1) {
  Proud::CSuperPeerSelectionPolicy *arg1 = (Proud::CSuperPeerSelectionPolicy *) 0 ;
  
  arg1 = (Proud::CSuperPeerSelectionPolicy *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PConnectionStats_m_TotalP2PCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_TotalP2PCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PConnectionStats_m_TotalP2PCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_TotalP2PCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PConnectionStats_m_directP2PCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_directP2PCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PConnectionStats_m_directP2PCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_directP2PCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PConnectionStats_m_toRemotePeerSendUdpMessageTrialCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemotePeerSendUdpMessageTrialCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PConnectionStats_m_toRemotePeerSendUdpMessageTrialCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemotePeerSendUdpMessageTrialCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PConnectionStats_m_toRemotePeerSendUdpMessageSuccessCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemotePeerSendUdpMessageSuccessCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PConnectionStats_m_toRemotePeerSendUdpMessageSuccessCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemotePeerSendUdpMessageSuccessCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_P2PConnectionStats() {
  void * jresult ;
  Proud::CP2PConnectionStats *result = 0 ;
  
  {
    try {
      result = (Proud::CP2PConnectionStats *)new Proud::CP2PConnectionStats();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_P2PConnectionStats(void * jarg1) {
  Proud::CP2PConnectionStats *arg1 = (Proud::CP2PConnectionStats *) 0 ;
  
  arg1 = (Proud::CP2PConnectionStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteBSendUdpMessageTrialCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemoteBSendUdpMessageTrialCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteBSendUdpMessageTrialCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemoteBSendUdpMessageTrialCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteBSendUdpMessageSuccessCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemoteBSendUdpMessageSuccessCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteBSendUdpMessageSuccessCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemoteBSendUdpMessageSuccessCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteASendUdpMessageTrialCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemoteASendUdpMessageTrialCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteASendUdpMessageTrialCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemoteASendUdpMessageTrialCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteASendUdpMessageSuccessCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemoteASendUdpMessageSuccessCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PPairConnectionStats_m_toRemoteASendUdpMessageSuccessCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemoteASendUdpMessageSuccessCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PPairConnectionStats_m_isRelayed_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isRelayed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PPairConnectionStats_m_isRelayed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  bool result;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  result = (bool) ((arg1)->m_isRelayed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_P2PPairConnectionStats() {
  void * jresult ;
  Proud::CP2PPairConnectionStats *result = 0 ;
  
  {
    try {
      result = (Proud::CP2PPairConnectionStats *)new Proud::CP2PPairConnectionStats();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_P2PPairConnectionStats(void * jarg1) {
  Proud::CP2PPairConnectionStats *arg1 = (Proud::CP2PPairConnectionStats *) 0 ;
  
  arg1 = (Proud::CP2PPairConnectionStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeNetServer(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetServer_Create() {
  void * jresult ;
  Proud::CNetServer *result = 0 ;
  
  {
    try {
      result = (Proud::CNetServer *)Proud::CNetServer::Create();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_CloseConnection(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (bool)(arg1)->CloseConnection(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_CloseEveryConnection(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      (arg1)->CloseEveryConnection();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_DestroyP2PGroup(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (bool)(arg1)->DestroyP2PGroup(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_DestroyEmptyP2PGroups(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      (arg1)->DestroyEmptyP2PGroups();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeNetServer_DumpGroupStatus(void * jarg1) {
  char * jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (arg1)->DumpGroupStatus();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetClientCount(void * jarg1) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (int)(arg1)->GetClientCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetP2PRecentPingMs(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID arg3 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (HostID)jarg3; 
  {
    try {
      result = (int)(arg1)->GetP2PRecentPingMs(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_IsValidHostID(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (bool)(arg1)->IsValidHostID(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetP2PGroupCount(void * jarg1) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (int)(arg1)->GetP2PGroupCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_IsConnectedClient(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (bool)(arg1)->IsConnectedClient(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_SetHostTag(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (bool)(arg1)->SetHostTag(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeNetServer_GetTimeMs(void * jarg1) {
  long long jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (int64_t)(arg1)->GetTimeMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_JoinP2PGroup__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID arg3 ;
  ByteArray arg4 ;
  ByteArray *argp4 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (HostID)jarg3; 
  argp4 = (ByteArray *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ByteArray", 0);
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (bool)(arg1)->JoinP2PGroup(arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_JoinP2PGroup__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID arg3 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (HostID)jarg3; 
  {
    try {
      result = (bool)(arg1)->JoinP2PGroup(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_LeaveP2PGroup(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID arg3 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (HostID)jarg3; 
  {
    try {
      result = (bool)(arg1)->LeaveP2PGroup(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetEventSink(void * jarg1, void * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::INetServerEvent *arg2 = (Proud::INetServerEvent *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::INetServerEvent *)jarg2; 
  {
    try {
      (arg1)->SetEventSink(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_AllowEmptyP2PGroup(void * jarg1, unsigned int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->AllowEmptyP2PGroup(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_IsEmptyP2PGroupAllowed(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (bool)((Proud::CNetServer const *)arg1)->IsEmptyP2PGroupAllowed();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetDefaultTimeoutTimeMs(void * jarg1, int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetDefaultTimeoutTimeMs(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetTimeoutTimeMs(void * jarg1, int jarg2, int jarg3) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  int arg3 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->SetTimeoutTimeMs(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetDefaultAutoConnectionRecoveryTimeoutTimeMs(void * jarg1, int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetDefaultAutoConnectionRecoveryTimeoutTimeMs(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetAutoConnectionRecoveryTimeoutTimeMs(void * jarg1, int jarg2, int jarg3) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  int arg3 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->SetAutoConnectionRecoveryTimeoutTimeMs(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetDefaultFallbackMethod(void * jarg1, int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  FallbackMethod arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (FallbackMethod)jarg2; 
  {
    try {
      (arg1)->SetDefaultFallbackMethod(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_EnableLog__SWIG_0(void * jarg1, char * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  PNTCHAR *arg2 = (PNTCHAR *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (PNTCHAR *)jarg2; 
  {
    try {
      (arg1)->EnableLog((PNTCHAR const *)arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_DisableLog(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      (arg1)->DisableLog();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetSpeedHackDetectorReckRatioPercent(void * jarg1, int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetSpeedHackDetectorReckRatioPercent(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_EnableSpeedHackDetector(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (bool)(arg1)->EnableSpeedHackDetector(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetMessageMaxLength(void * jarg1, int jarg2, int jarg3) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->SetMessageMaxLength(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_IsNagleAlgorithmEnabled(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (bool)(arg1)->IsNagleAlgorithmEnabled();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_SetMaxDirectP2PConnectionCount(void * jarg1, int jarg2, int jarg3) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  int arg3 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->SetMaxDirectP2PConnectionCount(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_SetDirectP2PStartCondition(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  DirectP2PStartCondition arg2 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (DirectP2PStartCondition)jarg2; 
  {
    try {
      result = (bool)(arg1)->SetDirectP2PStartCondition(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  Proud::CSuperPeerSelectionPolicy *arg3 = 0 ;
  HostID *arg4 = (HostID *) 0 ;
  intptr_t arg5 ;
  HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (Proud::CSuperPeerSelectionPolicy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CSuperPeerSelectionPolicy const & type is null", 0);
    return 0;
  } 
  arg4 = (HostID *)jarg4; 
  arg5 = (intptr_t)jarg5; 
  {
    try {
      result = (HostID)(arg1)->GetMostSuitableSuperPeerInGroup(arg2,(Proud::CSuperPeerSelectionPolicy const &)*arg3,(HostID const *)arg4,arg5);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  Proud::CSuperPeerSelectionPolicy *arg3 = 0 ;
  HostID *arg4 = (HostID *) 0 ;
  HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (Proud::CSuperPeerSelectionPolicy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CSuperPeerSelectionPolicy const & type is null", 0);
    return 0;
  } 
  arg4 = (HostID *)jarg4; 
  {
    try {
      result = (HostID)(arg1)->GetMostSuitableSuperPeerInGroup(arg2,(Proud::CSuperPeerSelectionPolicy const &)*arg3,(HostID const *)arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  Proud::CSuperPeerSelectionPolicy *arg3 = 0 ;
  HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (Proud::CSuperPeerSelectionPolicy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CSuperPeerSelectionPolicy const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (HostID)(arg1)->GetMostSuitableSuperPeerInGroup(arg2,(Proud::CSuperPeerSelectionPolicy const &)*arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_3(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (HostID)(arg1)->GetMostSuitableSuperPeerInGroup(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_4(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  Proud::CSuperPeerSelectionPolicy *arg3 = 0 ;
  HostID arg4 ;
  HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (Proud::CSuperPeerSelectionPolicy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CSuperPeerSelectionPolicy const & type is null", 0);
    return 0;
  } 
  arg4 = (HostID)jarg4; 
  {
    try {
      result = (HostID)(arg1)->GetMostSuitableSuperPeerInGroup(arg2,(Proud::CSuperPeerSelectionPolicy const &)*arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetInternalVersion(void * jarg1) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = (int)(arg1)->GetInternalVersion();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_SendUserMessage__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID *arg2 = (HostID *) 0 ;
  int arg3 ;
  RmiContext *arg4 = 0 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  int arg6 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (RmiContext *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RmiContext & type is null", 0);
    return 0;
  } 
  
  arg5 = (uint8_t*)(jarg5);
  
  arg6 = (int)jarg6; 
  {
    try {
      result = (bool)(arg1)->SendUserMessage((HostID const *)arg2,arg3,*arg4,arg5,arg6);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_SendUserMessage__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  RmiContext *arg3 = 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (RmiContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RmiContext & type is null", 0);
    return 0;
  } 
  
  arg4 = (uint8_t*)(jarg4);
  
  arg5 = (int)jarg5; 
  {
    try {
      result = (bool)(arg1)->SendUserMessage(arg2,*arg3,arg4,arg5);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_SetCoalesceIntervalMs(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  int arg3 ;
  ErrorType result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (ErrorType)(arg1)->SetCoalesceIntervalMs(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_SetCoalesceIntervalToAuto(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  ErrorType result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  {
    try {
      result = (ErrorType)(arg1)->SetCoalesceIntervalToAuto(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_TEST_SetOverSendSuspectingThresholdInBytes(void * jarg1, int jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->TEST_SetOverSendSuspectingThresholdInBytes(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_TEST_SetTestping(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  HostID arg2 ;
  HostID arg3 ;
  int arg4 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (HostID)jarg2; 
  arg3 = (HostID)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->TEST_SetTestping(arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_TEST_ForceDenyTcpConnection(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      (arg1)->TEST_ForceDenyTcpConnection();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_CreateP2PGroup__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostIDArray *arg2 = (Proud::HostIDArray *) 0 ;
  Proud::ByteArray *arg3 = (Proud::ByteArray *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostIDArray *)jarg2; 
  arg3 = (Proud::ByteArray *)jarg3; 
  {
    try {
      result = (Proud::HostID)Proud_CNetServer_CreateP2PGroup__SWIG_0(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_CreateP2PGroup__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::ByteArray *arg2 = (Proud::ByteArray *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::ByteArray *)jarg2; 
  {
    try {
      result = (Proud::HostID)Proud_CNetServer_CreateP2PGroup__SWIG_1(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_GetClientHostIDs(void * jarg1, void * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostIDArray *arg2 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostIDArray *)jarg2; 
  {
    try {
      Proud_CNetServer_GetClientHostIDs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_GetJoinedP2PGroups(void * jarg1, int jarg2, void * jarg3) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  Proud::HostIDArray *arg3 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::HostIDArray *)jarg3; 
  {
    try {
      Proud_CNetServer_GetJoinedP2PGroups(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_GetClientInfo(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  Proud::CNetClientInfo *arg3 = (Proud::CNetClientInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::CNetClientInfo *)jarg3; 
  {
    try {
      result = (bool)Proud_CNetServer_GetClientInfo(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_AttachStub(void * jarg1, void * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_CNetServer_AttachStub(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_AttachProxy(void * jarg1, void * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_CNetServer_AttachProxy(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_Start(void * jarg1, void * jarg2) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::CStartServerParameter *arg2 = 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::CStartServerParameter *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CStartServerParameter & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        Proud_CNetServer_Start(arg1,*arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetServer_Stop(void * jarg1) {
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      try {
        Proud_CNetServer_Stop(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetServer_GetP2PGroupInfo(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  Proud::CP2PGroup result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetServer_GetP2PGroupInfo(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CP2PGroup((const Proud::CP2PGroup &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetMemberCountOfP2PGroup(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetServer_GetMemberCountOfP2PGroup(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetServer_GetTcpListenerLocalAddrs(void * jarg1) {
  void * jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = Proud_CNetServer_GetTcpListenerLocalAddrs(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CFastArray< Proud::AddrPort,true,false,intptr_t >((const Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetServer_GetStats(void * jarg1) {
  void * jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::CNetServerStats result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  {
    try {
      result = Proud_CNetServer_GetStats(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CNetServerStats((const Proud::CNetServerStats &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetLastUnreliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetServer_GetLastUnreliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetServer_GetRecentUnreliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetServer_GetRecentUnreliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_GetP2PConnectionStats__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  Proud::CP2PConnectionStats *arg3 = (Proud::CP2PConnectionStats *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::CP2PConnectionStats *)jarg3; 
  {
    try {
      try {
        result = (bool)Proud_CNetServer_GetP2PConnectionStats__SWIG_0(arg1,arg2,arg3);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetServer_GetP2PConnectionStats__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  Proud::CNetServer *arg1 = (Proud::CNetServer *) 0 ;
  Proud::HostID arg2 ;
  Proud::HostID arg3 ;
  Proud::CP2PPairConnectionStats *arg4 = (Proud::CP2PPairConnectionStats *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetServer *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::HostID)jarg3; 
  arg4 = (Proud::CP2PPairConnectionStats *)jarg4; 
  {
    try {
      try {
        result = (bool)Proud_CNetServer_GetP2PConnectionStats__SWIG_1(arg1,arg2,arg3,arg4);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MessagePriority_Holepunch_get() {
  int jresult ;
  Proud::MessagePriority result;
  
  result = (Proud::MessagePriority)(Proud::MessagePriority)Proud::MessagePriority_Holepunch;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompareHostID(int jarg1, int jarg2) {
  int jresult ;
  Proud::HostID arg1 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::HostID)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud::CompareHostID(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ToString(int jarg1) {
  char * jresult ;
  Proud::LogCategory arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::LogCategory)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ToString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeHostIDArray_add(void * jarg1, int jarg2) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      Proud_HostIDArray_add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeHostIDArray_Clear(void * jarg1, int jarg2) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      Proud_HostIDArray_Clear(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeHostIDArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  int result;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  {
    try {
      result = (int)Proud_HostIDArray_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeHostIDArray_at(void * jarg1, int jarg2) {
  int jresult ;
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  int arg2 ;
  Proud::HostID result;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (Proud::HostID)Proud_HostIDArray_at(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeHostIDArray() {
  void * jresult ;
  Proud::HostIDArray *result = 0 ;
  
  {
    try {
      result = (Proud::HostIDArray *)new Proud::HostIDArray();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeHostIDArray(void * jarg1) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HostIDSet_GetCount(void * jarg1) {
  int jresult ;
  Proud::HostIDSet *arg1 = (Proud::HostIDSet *) 0 ;
  int result;
  
  arg1 = (Proud::HostIDSet *)jarg1; 
  {
    try {
      result = (int)Proud_HostIDSet_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HostIDSet() {
  void * jresult ;
  Proud::HostIDSet *result = 0 ;
  
  {
    try {
      result = (Proud::HostIDSet *)new Proud::HostIDSet();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HostIDSet(void * jarg1) {
  Proud::HostIDSet *arg1 = (Proud::HostIDSet *) 0 ;
  
  arg1 = (Proud::HostIDSet *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeByteArray() {
  void * jresult ;
  Proud::ByteArray *result = 0 ;
  
  {
    try {
      result = (Proud::ByteArray *)new Proud::ByteArray();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeByteArray(void * jarg1) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeByteArray_ToHexString(void * jarg1) {
  char * jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (arg1)->ToHexString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeByteArray_Hash(void * jarg1) {
  unsigned int jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (uint32_t)((Proud::ByteArray const *)arg1)->Hash();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeByteArray_Add(void * jarg1, unsigned char jarg2) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    try {
      Proud_ByteArray_Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeByteArray_Clear(void * jarg1, unsigned char jarg2) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    try {
      Proud_ByteArray_Clear(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeByteArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  int result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (int)Proud_ByteArray_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NativeByteArray_At(void * jarg1, int jarg2) {
  unsigned char jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  int arg2 ;
  uint8_t result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (uint8_t)Proud_ByteArray_At(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UserWorkerThreadCallbackContext() {
  void * jresult ;
  Proud::CUserWorkerThreadCallbackContext *result = 0 ;
  
  {
    try {
      result = (Proud::CUserWorkerThreadCallbackContext *)new Proud::CUserWorkerThreadCallbackContext();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserWorkerThreadCallbackContext(void * jarg1) {
  Proud::CUserWorkerThreadCallbackContext *arg1 = (Proud::CUserWorkerThreadCallbackContext *) 0 ;
  
  arg1 = (Proud::CUserWorkerThreadCallbackContext *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INetCoreEvent(void * jarg1) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnError(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::ErrorInfo *arg2 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::ErrorInfo *)jarg2; 
  {
    try {
      (arg1)->OnError(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnWarning(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::ErrorInfo *arg2 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::ErrorInfo *)jarg2; 
  {
    try {
      (arg1)->OnWarning(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnInformation(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::ErrorInfo *arg2 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::ErrorInfo *)jarg2; 
  {
    try {
      (arg1)->OnInformation(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnException(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Exception *arg2 = 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Exception *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Exception const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->OnException((Exception const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnNoRmiProcessed(void * jarg1, unsigned short jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::RmiID arg2 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::RmiID)jarg2; 
  {
    try {
      (arg1)->OnNoRmiProcessed(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnReceiveUserMessage(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::HostID arg2 ;
  Proud::RmiContext *arg3 = 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int arg5 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::RmiContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::RmiContext const & type is null", 0);
    return ;
  } 
  
  arg4 = (uint8_t*)(jarg4);
  
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->OnReceiveUserMessage(arg2,(Proud::RmiContext const &)*arg3,arg4,arg5);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnReceiveUserMessageSwigExplicitINetCoreEvent(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::HostID arg2 ;
  Proud::RmiContext *arg3 = 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int arg5 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::RmiContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::RmiContext const & type is null", 0);
    return ;
  } 
  
  arg4 = (uint8_t*)(jarg4);
  
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->Proud::INetCoreEvent::OnReceiveUserMessage(arg2,(Proud::RmiContext const &)*arg3,arg4,arg5);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnTick(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->OnTick(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnTickSwigExplicitINetCoreEvent(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->Proud::INetCoreEvent::OnTick(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnUserWorkerThreadCallbackBegin(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::CUserWorkerThreadCallbackContext *arg2 = (Proud::CUserWorkerThreadCallbackContext *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::CUserWorkerThreadCallbackContext *)jarg2; 
  {
    try {
      (arg1)->OnUserWorkerThreadCallbackBegin(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnUserWorkerThreadCallbackBeginSwigExplicitINetCoreEvent(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::CUserWorkerThreadCallbackContext *arg2 = (Proud::CUserWorkerThreadCallbackContext *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::CUserWorkerThreadCallbackContext *)jarg2; 
  {
    try {
      (arg1)->Proud::INetCoreEvent::OnUserWorkerThreadCallbackBegin(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnUserWorkerThreadCallbackEnd(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::CUserWorkerThreadCallbackContext *arg2 = (Proud::CUserWorkerThreadCallbackContext *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::CUserWorkerThreadCallbackContext *)jarg2; 
  {
    try {
      (arg1)->OnUserWorkerThreadCallbackEnd(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_OnUserWorkerThreadCallbackEndSwigExplicitINetCoreEvent(void * jarg1, void * jarg2) {
  Proud::INetCoreEvent *arg1 = (Proud::INetCoreEvent *) 0 ;
  Proud::CUserWorkerThreadCallbackContext *arg2 = (Proud::CUserWorkerThreadCallbackContext *) 0 ;
  
  arg1 = (Proud::INetCoreEvent *)jarg1; 
  arg2 = (Proud::CUserWorkerThreadCallbackContext *)jarg2; 
  {
    try {
      (arg1)->Proud::INetCoreEvent::OnUserWorkerThreadCallbackEnd(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INetCoreEvent() {
  void * jresult ;
  Proud::INetCoreEvent *result = 0 ;
  
  {
    try {
      result = (Proud::INetCoreEvent *)new SwigDirector_INetCoreEvent();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetCoreEvent_director_connect(void *objarg, SwigDirector_INetCoreEvent::SWIG_Callback0_t callback0, SwigDirector_INetCoreEvent::SWIG_Callback1_t callback1, SwigDirector_INetCoreEvent::SWIG_Callback2_t callback2, SwigDirector_INetCoreEvent::SWIG_Callback3_t callback3, SwigDirector_INetCoreEvent::SWIG_Callback4_t callback4, SwigDirector_INetCoreEvent::SWIG_Callback5_t callback5, SwigDirector_INetCoreEvent::SWIG_Callback6_t callback6, SwigDirector_INetCoreEvent::SWIG_Callback7_t callback7, SwigDirector_INetCoreEvent::SWIG_Callback8_t callback8) {
  Proud::INetCoreEvent *obj = (Proud::INetCoreEvent *)objarg;
  SwigDirector_INetCoreEvent *director = dynamic_cast<SwigDirector_INetCoreEvent *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnError_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *) 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)jarg2; 
  if (arg1) (arg1)->OnError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnError_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *result = 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)& ((arg1)->OnError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnException_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Exception const & > *arg2 = (LambdaBaseHolder_Param1< void,Exception const & > *) 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  arg2 = (LambdaBaseHolder_Param1< void,Exception const & > *)jarg2; 
  if (arg1) (arg1)->OnException = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnException_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Exception const & > *result = 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result = (LambdaBaseHolder_Param1< void,Exception const & > *)& ((arg1)->OnException);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnInformation_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *) 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)jarg2; 
  if (arg1) (arg1)->OnInformation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnInformation_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *result = 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)& ((arg1)->OnInformation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnNoRmiProcessed_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::RmiID > arg2 ;
  LambdaBaseHolder_Param1< void,Proud::RmiID > *argp2 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  argp2 = (LambdaBaseHolder_Param1< void,Proud::RmiID > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LambdaBaseHolder_Param1< void,Proud::RmiID >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OnNoRmiProcessed = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnNoRmiProcessed_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::RmiID > result;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result =  ((arg1)->OnNoRmiProcessed);
  jresult = new LambdaBaseHolder_Param1< void,Proud::RmiID >((const LambdaBaseHolder_Param1< void,Proud::RmiID > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnReceiveUserMessage_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int > arg2 ;
  LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int > *argp2 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  argp2 = (LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OnReceiveUserMessage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnReceiveUserMessage_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int > result;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result =  ((arg1)->OnReceiveUserMessage);
  jresult = new LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int >((const LambdaBaseHolder_Param4< void,Proud::HostID,Proud::RmiContext const &,uint8_t *,int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnWarning_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *) 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  arg2 = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)jarg2; 
  if (arg1) (arg1)->OnWarning = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnWarning_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *result = 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result = (LambdaBaseHolder_Param1< void,Proud::ErrorInfo * > *)& ((arg1)->OnWarning);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnTick_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,void * > arg2 ;
  LambdaBaseHolder_Param1< void,void * > *argp2 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  argp2 = (LambdaBaseHolder_Param1< void,void * > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LambdaBaseHolder_Param1< void,void * >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OnTick = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnTick_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param1< void,void * > result;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result =  ((arg1)->OnTick);
  jresult = new LambdaBaseHolder_Param1< void,void * >((const LambdaBaseHolder_Param1< void,void * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnUserWorkerThreadCallbackBegin_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param0< void > arg2 ;
  LambdaBaseHolder_Param0< void > *argp2 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  argp2 = (LambdaBaseHolder_Param0< void > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LambdaBaseHolder_Param0< void >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OnUserWorkerThreadCallbackBegin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnUserWorkerThreadCallbackBegin_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param0< void > result;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result =  ((arg1)->OnUserWorkerThreadCallbackBegin);
  jresult = new LambdaBaseHolder_Param0< void >((const LambdaBaseHolder_Param0< void > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnUserWorkerThreadCallbackEnd_set(void * jarg1, void * jarg2) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param0< void > arg2 ;
  LambdaBaseHolder_Param0< void > *argp2 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  argp2 = (LambdaBaseHolder_Param0< void > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LambdaBaseHolder_Param0< void >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->OnUserWorkerThreadCallbackEnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HasCoreEventFunctionObjects_OnUserWorkerThreadCallbackEnd_get(void * jarg1) {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  LambdaBaseHolder_Param0< void > result;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  result =  ((arg1)->OnUserWorkerThreadCallbackEnd);
  jresult = new LambdaBaseHolder_Param0< void >((const LambdaBaseHolder_Param0< void > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HasCoreEventFunctionObjects() {
  void * jresult ;
  Proud::HasCoreEventFunctionObjects *result = 0 ;
  
  {
    try {
      result = (Proud::HasCoreEventFunctionObjects *)new Proud::HasCoreEventFunctionObjects();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HasCoreEventFunctionObjects(void * jarg1) {
  Proud::HasCoreEventFunctionObjects *arg1 = (Proud::HasCoreEventFunctionObjects *) 0 ;
  
  arg1 = (Proud::HasCoreEventFunctionObjects *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_INetServerEvent(void * jarg1) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientJoin(void * jarg1, void * jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::CNetClientInfo *arg2 = (Proud::CNetClientInfo *) 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::CNetClientInfo *)jarg2; 
  {
    try {
      (arg1)->OnClientJoin(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientLeave(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::CNetClientInfo *arg2 = (Proud::CNetClientInfo *) 0 ;
  Proud::ErrorInfo *arg3 = (Proud::ErrorInfo *) 0 ;
  Proud::ByteArray *arg4 = 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::CNetClientInfo *)jarg2; 
  arg3 = (Proud::ErrorInfo *)jarg3; 
  arg4 = (Proud::ByteArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::ByteArray const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->OnClientLeave(arg2,arg3,(Proud::ByteArray const &)*arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientOffline(void * jarg1, void * jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  CRemoteOfflineEventArgs *arg2 = 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (CRemoteOfflineEventArgs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRemoteOfflineEventArgs & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->OnClientOffline(*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientOfflineSwigExplicitINetServerEvent(void * jarg1, void * jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  CRemoteOfflineEventArgs *arg2 = 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (CRemoteOfflineEventArgs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRemoteOfflineEventArgs & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Proud::INetServerEvent::OnClientOffline(*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientOnline(void * jarg1, void * jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  CRemoteOnlineEventArgs *arg2 = 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (CRemoteOnlineEventArgs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRemoteOnlineEventArgs & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->OnClientOnline(*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientOnlineSwigExplicitINetServerEvent(void * jarg1, void * jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  CRemoteOnlineEventArgs *arg2 = 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (CRemoteOnlineEventArgs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CRemoteOnlineEventArgs & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Proud::INetServerEvent::OnClientOnline(*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_INetServerEvent_OnConnectionRequest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  AddrPort arg2 ;
  Proud::ByteArray *arg3 = 0 ;
  Proud::ByteArray *arg4 = 0 ;
  AddrPort *argp2 ;
  bool result;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  argp2 = (AddrPort *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null AddrPort", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Proud::ByteArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::ByteArray & type is null", 0);
    return 0;
  } 
  arg4 = (Proud::ByteArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::ByteArray & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OnConnectionRequest(arg2,*arg3,*arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_INetServerEvent_OnConnectionRequestSwigExplicitINetServerEvent(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  AddrPort arg2 ;
  Proud::ByteArray *arg3 = 0 ;
  Proud::ByteArray *arg4 = 0 ;
  AddrPort *argp2 ;
  bool result;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  argp2 = (AddrPort *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null AddrPort", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Proud::ByteArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::ByteArray & type is null", 0);
    return 0;
  } 
  arg4 = (Proud::ByteArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::ByteArray & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->Proud::INetServerEvent::OnConnectionRequest(arg2,*arg3,*arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnP2PGroupJoinMemberAckComplete(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::HostID arg2 ;
  Proud::HostID arg3 ;
  Proud::ErrorType arg4 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::HostID)jarg3; 
  arg4 = (Proud::ErrorType)jarg4; 
  {
    try {
      (arg1)->OnP2PGroupJoinMemberAckComplete(arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnUserWorkerThreadBegin(void * jarg1) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  {
    try {
      (arg1)->OnUserWorkerThreadBegin();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnUserWorkerThreadEnd(void * jarg1) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  {
    try {
      (arg1)->OnUserWorkerThreadEnd();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientHackSuspected(void * jarg1, int jarg2, int jarg3) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::HostID arg2 ;
  Proud::HackType arg3 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::HackType)jarg3; 
  {
    try {
      (arg1)->OnClientHackSuspected(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnClientHackSuspectedSwigExplicitINetServerEvent(void * jarg1, int jarg2, int jarg3) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::HostID arg2 ;
  Proud::HackType arg3 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::HackType)jarg3; 
  {
    try {
      (arg1)->Proud::INetServerEvent::OnClientHackSuspected(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnP2PGroupRemoved(void * jarg1, int jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      (arg1)->OnP2PGroupRemoved(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_OnP2PGroupRemovedSwigExplicitINetServerEvent(void * jarg1, int jarg2) {
  Proud::INetServerEvent *arg1 = (Proud::INetServerEvent *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::INetServerEvent *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      (arg1)->Proud::INetServerEvent::OnP2PGroupRemoved(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_INetServerEvent() {
  void * jresult ;
  Proud::INetServerEvent *result = 0 ;
  
  {
    try {
      result = (Proud::INetServerEvent *)new SwigDirector_INetServerEvent();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_INetServerEvent_director_connect(void *objarg, SwigDirector_INetServerEvent::SWIG_Callback0_t callback0, SwigDirector_INetServerEvent::SWIG_Callback1_t callback1, SwigDirector_INetServerEvent::SWIG_Callback2_t callback2, SwigDirector_INetServerEvent::SWIG_Callback3_t callback3, SwigDirector_INetServerEvent::SWIG_Callback4_t callback4, SwigDirector_INetServerEvent::SWIG_Callback5_t callback5, SwigDirector_INetServerEvent::SWIG_Callback6_t callback6, SwigDirector_INetServerEvent::SWIG_Callback7_t callback7, SwigDirector_INetServerEvent::SWIG_Callback8_t callback8, SwigDirector_INetServerEvent::SWIG_Callback9_t callback9, SwigDirector_INetServerEvent::SWIG_Callback10_t callback10, SwigDirector_INetServerEvent::SWIG_Callback11_t callback11, SwigDirector_INetServerEvent::SWIG_Callback12_t callback12, SwigDirector_INetServerEvent::SWIG_Callback13_t callback13, SwigDirector_INetServerEvent::SWIG_Callback14_t callback14, SwigDirector_INetServerEvent::SWIG_Callback15_t callback15, SwigDirector_INetServerEvent::SWIG_Callback16_t callback16, SwigDirector_INetServerEvent::SWIG_Callback17_t callback17, SwigDirector_INetServerEvent::SWIG_Callback18_t callback18) {
  Proud::INetServerEvent *obj = (Proud::INetServerEvent *)objarg;
  SwigDirector_INetServerEvent *director = dynamic_cast<SwigDirector_INetServerEvent *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_errorType_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_errorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_errorType_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_errorType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_detailType_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_detailType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_detailType_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_detailType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_remote_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remote = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_remote_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remote);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_comment_set(void * jarg1, char * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_comment = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_comment_get(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_comment);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_source_set(void * jarg1, char * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_source = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_source_get(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_source);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorInfo() {
  void * jresult ;
  Proud::ErrorInfo *result = 0 ;
  
  {
    try {
      result = (Proud::ErrorInfo *)new Proud::ErrorInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_GetString(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = ((Proud::ErrorInfo const *)arg1)->ToString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorInfo_Clone(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorInfo *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = (Proud::ErrorInfo *)(arg1)->Clone();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToStringByLangID(int jarg1, int jarg2) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  int arg2 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToStringByLangID(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToPlainString(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToPlainString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Kor(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Kor(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Eng(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Eng(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Chn(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Chn(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Jpn(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Jpn(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_ErrorInfo_CopyFromNative(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorInfo_GetNativeReceivedMessage(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      try {
        result = (void *)Proud_ErrorInfo_GetNativeReceivedMessage(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_GetNativeReceivedMessageLength(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  int result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      try {
        result = (int)Proud_ErrorInfo_GetNativeReceivedMessageLength(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorInfo(void * jarg1) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteOfflineEventArgs() {
  void * jresult ;
  Proud::CRemoteOfflineEventArgs *result = 0 ;
  
  {
    try {
      result = (Proud::CRemoteOfflineEventArgs *)new Proud::CRemoteOfflineEventArgs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_remoteHostID_set(void * jarg1, int jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remoteHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoteOfflineEventArgs_remoteHostID_get(void * jarg1) {
  int jresult ;
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remoteHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_m_errorInfo_set(void * jarg1, void * jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::ErrorInfo *arg2 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = (Proud::ErrorInfo *)jarg2; 
  if (arg1) (arg1)->m_errorInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemoteOfflineEventArgs_m_errorInfo_get(void * jarg1) {
  void * jresult ;
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::ErrorInfo *result = 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  result = (Proud::ErrorInfo *) ((arg1)->m_errorInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      Proud_CRemoteOfflineEventArgs_CopyFromNative(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemoteOfflineEventArgs(void * jarg1) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOnlineEventArgs_remoteHostID_set(void * jarg1, int jarg2) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remoteHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoteOnlineEventArgs_remoteHostID_get(void * jarg1) {
  int jresult ;
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remoteHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOnlineEventArgs_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      Proud_CRemoteOnlineEventArgs_CopyFromNative(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteOnlineEventArgs() {
  void * jresult ;
  Proud::CRemoteOnlineEventArgs *result = 0 ;
  
  {
    try {
      result = (Proud::CRemoteOnlineEventArgs *)new Proud::CRemoteOnlineEventArgs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemoteOnlineEventArgs(void * jarg1) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PN_IPV6_ADDR_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)Proud::PN_IPV6_ADDR_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InvalidSocket_get() {
  int jresult ;
  int result;
  
  result = (int)(int)Proud::InvalidSocket;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_port_set(void * jarg1, unsigned short jarg2) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_port = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AddrPort_port_get(void * jarg1) {
  unsigned short jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  result = (uint16_t) ((arg1)->m_port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsIPv4MappedIPv6Addr(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsIPv4MappedIPv6Addr();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_SetIPv4MappedIPv6Address(void * jarg1, unsigned int jarg2) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->SetIPv4MappedIPv6Address(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_Synthesize(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  
  arg2 = (uint8_t*)(jarg2);
  
  arg3 = (size_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try {
      (arg1)->Synthesize((uint8_t const *)arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsAddressEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  Proud::AddrPort *arg2 = 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsAddressEqualTo((Proud::AddrPort const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AddrPort() {
  void * jresult ;
  Proud::AddrPort *result = 0 ;
  
  {
    try {
      result = (Proud::AddrPort *)new Proud::AddrPort();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AddrPort_IPToString(void * jarg1) {
  char * jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = ((Proud::AddrPort const *)arg1)->IPToString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPortV4(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String *arg1 = 0 ;
  uint16_t arg2 ;
  Proud::AddrPort result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromIPPortV4((Proud::String const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPortV6(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String *arg1 = 0 ;
  uint16_t arg2 ;
  Proud::AddrPort result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromIPPortV6((Proud::String const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPort(int jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  int32_t *arg1 = 0 ;
  Proud::String *arg2 = 0 ;
  uint16_t arg3 ;
  int32_t temp1 ;
  Proud::AddrPort result;
  
  temp1 = (int32_t)jarg1; 
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  arg3 = (uint16_t)jarg3; 
  {
    try {
      result = Proud::AddrPort::FromIPPort((int const &)*arg1,(Proud::String const &)*arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromAnyIPPort(int jarg1, unsigned short jarg2) {
  void * jresult ;
  int32_t *arg1 = 0 ;
  uint16_t arg2 ;
  int32_t temp1 ;
  Proud::AddrPort result;
  
  temp1 = (int32_t)jarg1; 
  arg1 = &temp1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromAnyIPPort((int const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_From(void * jarg1) {
  void * jresult ;
  Proud::NamedAddrPort *arg1 = 0 ;
  Proud::AddrPort result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::NamedAddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::AddrPort::From((Proud::NamedAddrPort const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_Unassigned_set(void * jarg1) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  Proud::AddrPort::Unassigned = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_Unassigned_get() {
  void * jresult ;
  Proud::AddrPort *result = 0 ;
  
  result = (Proud::AddrPort *)&Proud::AddrPort::Unassigned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsAnyOrUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsAnyOrUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsEqualAddress(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = 0 ;
  Proud::AddrPort *arg2 = 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  arg2 = (Proud::AddrPort *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Proud::AddrPort::IsEqualAddress((Proud::AddrPort const &)*arg1,(Proud::AddrPort const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_Hash(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (uint32_t)((Proud::AddrPort const *)arg1)->Hash();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_GetNativeIPAddr(void * jarg1) {
  void * jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (void *)Proud_AddrPort_GetNativeIPAddr(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AddrPort(void * jarg1) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_addr_set(void * jarg1, char * jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_addr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NamedAddrPort_addr_get(void * jarg1) {
  char * jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_addr);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_port_set(void * jarg1, unsigned short jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_port = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NamedAddrPort_port_get(void * jarg1) {
  unsigned short jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  result = (uint16_t) ((arg1)->m_port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_Unassigned_set(void * jarg1) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  Proud::NamedAddrPort::Unassigned = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_Unassigned_get() {
  void * jresult ;
  Proud::NamedAddrPort *result = 0 ;
  
  result = (Proud::NamedAddrPort *)&Proud::NamedAddrPort::Unassigned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_FromAddrPort(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String arg1 ;
  uint16_t arg2 ;
  Proud::NamedAddrPort result;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::NamedAddrPort::FromAddrPort(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::NamedAddrPort((const Proud::NamedAddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_From(void * jarg1) {
  void * jresult ;
  Proud::AddrPort *arg1 = 0 ;
  Proud::NamedAddrPort result;
  
  arg1 = (Proud::AddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::NamedAddrPort::From((Proud::AddrPort const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::NamedAddrPort((const Proud::NamedAddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_OverwriteHostNameIfExists(void * jarg1, char * jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  {
    try {
      (arg1)->OverwriteHostNameIfExists((Proud::String const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NamedAddrPort_IsUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  {
    try {
      result = (bool)(arg1)->IsUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NamedAddrPort() {
  void * jresult ;
  Proud::NamedAddrPort *result = 0 ;
  
  {
    try {
      result = (Proud::NamedAddrPort *)new Proud::NamedAddrPort();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NamedAddrPort(void * jarg1) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetUtil_GetIPVersionFromString(char * jarg1) {
  int jresult ;
  Proud::String *arg1 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (int)Proud::CNetUtil::GetIPVersionFromString((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressAny(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressAny((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressUnspecified(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressUnspecified((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressPhysical(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressPhysical((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressLoopback(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressLoopback((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetUtil_LocalIPAddresses_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)Proud_CNetUtil_LocalIPAddresses_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetUtil_LocalIPAddresses_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      Proud_CNetUtil_LocalIPAddresses_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetUtil_GetLocalIPAddresseCount(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  int result;
  
  arg1 = jarg1; 
  {
    try {
      try {
        result = (int)Proud_CNetUtil_GetLocalIPAddresseCount(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeNetUtil_GetLocalIPAddress(void * jarg1, int jarg2) {
  char * jresult ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  Proud::String result;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = Proud_CNetUtil_GetLocalIPAddress(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeNetUtil() {
  void * jresult ;
  Proud::CNetUtil *result = 0 ;
  
  {
    try {
      result = (Proud::CNetUtil *)new Proud::CNetUtil();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeNetUtil(void * jarg1) {
  Proud::CNetUtil *arg1 = (Proud::CNetUtil *) 0 ;
  
  arg1 = (Proud::CNetUtil *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_tcpAddrFromServer_set(void * jarg1, void * jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_TcpAddrFromServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetClientInfo_tcpAddrFromServer_get(void * jarg1) {
  void * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_TcpAddrFromServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_udpAddrFromServer_set(void * jarg1, void * jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_UdpAddrFromServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetClientInfo_udpAddrFromServer_get(void * jarg1) {
  void * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_UdpAddrFromServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_udpAddrInternal_set(void * jarg1, void * jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_UdpAddrInternal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetClientInfo_udpAddrInternal_get(void * jarg1) {
  void * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_UdpAddrInternal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_hostID_set(void * jarg1, int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_HostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientInfo_hostID_get(void * jarg1) {
  int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_HostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_relayedP2P_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_RelayedP2P = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_relayedP2P_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (bool) ((arg1)->m_RelayedP2P);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_isBehindNat_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isBehindNat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_isBehindNat_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (bool) ((arg1)->m_isBehindNat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_realUdpEnabled_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_realUdpEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_realUdpEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (bool) ((arg1)->m_realUdpEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_natDeviceName_set(void * jarg1, char * jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_natDeviceName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetClientInfo_natDeviceName_get(void * jarg1) {
  char * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_natDeviceName);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_recentPingMs_set(void * jarg1, int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_recentPingMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientInfo_recentPingMs_get(void * jarg1) {
  int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (int) ((arg1)->m_recentPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_sendQueuedAmountInBytes_set(void * jarg1, int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_sendQueuedAmountInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientInfo_sendQueuedAmountInBytes_get(void * jarg1) {
  int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (int) ((arg1)->m_sendQueuedAmountInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_recentFrameRate_set(void * jarg1, double jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_recentFrameRate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetClientInfo_recentFrameRate_get(void * jarg1) {
  double jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  double result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (double) ((arg1)->m_recentFrameRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_toServerSendUdpMessageTrialCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toServerSendUdpMessageTrialCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_toServerSendUdpMessageTrialCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (uint32_t) ((arg1)->m_toServerSendUdpMessageTrialCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_toServerSendUdpMessageSuccessCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toServerSendUdpMessageSuccessCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_toServerSendUdpMessageSuccessCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (uint32_t) ((arg1)->m_toServerSendUdpMessageSuccessCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_hostIDRecycleCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_hostIDRecycleCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientInfo_hostIDRecycleCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (uint32_t) ((arg1)->m_hostIDRecycleCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_unreliableMessageRecentReceiveSpeed_set(void * jarg1, long long jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_unreliableMessageRecentReceiveSpeed = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientInfo_unreliableMessageRecentReceiveSpeed_get(void * jarg1) {
  long long jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (int64_t) ((arg1)->m_unreliableMessageRecentReceiveSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientInfo_m_TcpLocalAddrFromServer_set(void * jarg1, void * jarg2) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_TcpLocalAddrFromServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetClientInfo_m_TcpLocalAddrFromServer_get(void * jarg1) {
  void * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_TcpLocalAddrFromServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetClientInfo() {
  void * jresult ;
  Proud::CNetClientInfo *result = 0 ;
  
  {
    try {
      result = (Proud::CNetClientInfo *)new Proud::CNetClientInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetClientInfo_ToString(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  bool arg2 ;
  Proud::String result;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (arg1)->ToString(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetClientInfo_GetHostTag(void * jarg1) {
  void * jresult ;
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  {
    try {
      result = (void *)Proud_CNetClientInfo_GetHostTag(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetClientInfo(void * jarg1) {
  Proud::CNetClientInfo *arg1 = (Proud::CNetClientInfo *) 0 ;
  
  arg1 = (Proud::CNetClientInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendFailedRemote_m_hostID_set(void * jarg1, int jarg2) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_hostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendFailedRemote_m_hostID_get(void * jarg1) {
  int jresult ;
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_hostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendFailedRemote_m_reason_set(void * jarg1, int jarg2) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_reason = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendFailedRemote_m_reason_get(void * jarg1) {
  int jresult ;
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_reason);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendFailedRemote() {
  void * jresult ;
  Proud::SendFailedRemote *result = 0 ;
  
  {
    try {
      result = (Proud::SendFailedRemote *)new Proud::SendFailedRemote();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendFailedRemote(void * jarg1) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_relayed_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_relayed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_relayed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_relayed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_sentFrom_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_sentFrom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_sentFrom_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_sentFrom);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_unreliableS2CRoutedMulticastMaxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_unreliableS2CRoutedMulticastMaxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_unreliableS2CRoutedMulticastMaxPingMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_unreliableS2CRoutedMulticastMaxPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_maxDirectP2PMulticastCount_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_maxDirectP2PMulticastCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_maxDirectP2PMulticastCount_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_maxDirectP2PMulticastCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_uniqueID_set(void * jarg1, long long jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_uniqueID = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeRmiContext_uniqueID_get(void * jarg1) {
  long long jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int64_t result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int64_t) ((arg1)->m_uniqueID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_fillSendFailedRemotes_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_fillSendFailedRemotes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_fillSendFailedRemotes_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_fillSendFailedRemotes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_priority_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessagePriority arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::MessagePriority)jarg2; 
  if (arg1) (arg1)->m_priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_priority_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessagePriority result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::MessagePriority) ((arg1)->m_priority);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_reliability_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessageReliability arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  if (arg1) (arg1)->m_reliability = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_reliability_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessageReliability result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::MessageReliability) ((arg1)->m_reliability);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_enableLoopback_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableLoopback = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_enableLoopback_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_enableLoopback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_enableP2PJitTrigger_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableP2PJitTrigger = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_enableP2PJitTrigger_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_enableP2PJitTrigger);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_allowRelaySend_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_allowRelaySend = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_allowRelaySend_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_allowRelaySend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_forceRelayThresholdRatio_set(void * jarg1, double jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_forceRelayThresholdRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NativeRmiContext_forceRelayThresholdRatio_get(void * jarg1) {
  double jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  double result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (double) ((arg1)->m_forceRelayThresholdRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_INTERNAL_USE_isProudNetSpecificRmi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_INTERNAL_USE_isProudNetSpecificRmi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_m_fragmentOnNeed_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_fragmentOnNeed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_m_fragmentOnNeed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_fragmentOnNeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_encryptMode_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  EncryptMode arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (EncryptMode)jarg2; 
  if (arg1) (arg1)->m_encryptMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_encryptMode_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  EncryptMode result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (EncryptMode) ((arg1)->m_encryptMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_compressMode_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  CompressMode arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (CompressMode)jarg2; 
  if (arg1) (arg1)->m_compressMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_compressMode_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  CompressMode result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (CompressMode) ((arg1)->m_compressMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_rmiID_set(void * jarg1, unsigned short jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::RmiID arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::RmiID)jarg2; 
  if (arg1) (arg1)->m_rmiID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NativeRmiContext_rmiID_get(void * jarg1) {
  unsigned short jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::RmiID result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::RmiID) ((arg1)->m_rmiID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_0() {
  void * jresult ;
  Proud::RmiContext *result = 0 ;
  
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Proud::MessagePriority arg1 ;
  Proud::MessageReliability arg2 ;
  int arg3 ;
  EncryptMode arg4 ;
  Proud::RmiContext *result = 0 ;
  
  arg1 = (Proud::MessagePriority)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (EncryptMode)jarg4; 
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext(arg1,arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Proud::MessagePriority arg1 ;
  Proud::MessageReliability arg2 ;
  int arg3 ;
  Proud::RmiContext *result = 0 ;
  
  arg1 = (Proud::MessagePriority)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeRmiContext(void * jarg1) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_serverAddrAtClient_set(void * jarg1, char * jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_serverAddrAtClient = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StartServerParameterBase_serverAddrAtClient_get(void * jarg1) {
  char * jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_serverAddrAtClient);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_localNicAddr_set(void * jarg1, char * jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_localNicAddr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StartServerParameterBase_localNicAddr_get(void * jarg1) {
  char * jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_localNicAddr);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_protocolVersion_set(void * jarg1, void * jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Guid *arg2 = (Guid *) 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (Guid *)jarg2; 
  if (arg1) (arg1)->m_protocolVersion = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StartServerParameterBase_protocolVersion_get(void * jarg1) {
  void * jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Guid *result = 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Guid *)& ((arg1)->m_protocolVersion);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_threadCount_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_threadCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_threadCount_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (int) ((arg1)->m_threadCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_netWorkerThreadCount_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_netWorkerThreadCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_netWorkerThreadCount_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (int) ((arg1)->m_netWorkerThreadCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_encryptedMessageKeyLength_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::EncryptLevel arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (Proud::EncryptLevel)jarg2; 
  if (arg1) (arg1)->m_encryptedMessageKeyLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_encryptedMessageKeyLength_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::EncryptLevel result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Proud::EncryptLevel) ((arg1)->m_encryptedMessageKeyLength);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_fastEncryptedMessageKeyLength_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::FastEncryptLevel arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (Proud::FastEncryptLevel)jarg2; 
  if (arg1) (arg1)->m_fastEncryptedMessageKeyLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_fastEncryptedMessageKeyLength_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::FastEncryptLevel result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Proud::FastEncryptLevel) ((arg1)->m_fastEncryptedMessageKeyLength);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_enableP2PEncryptedMessaging_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableP2PEncryptedMessaging = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_enableP2PEncryptedMessaging_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (bool) ((arg1)->m_enableP2PEncryptedMessaging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_allowServerAsP2PGroupMember_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_allowServerAsP2PGroupMember = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_allowServerAsP2PGroupMember_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (bool) ((arg1)->m_allowServerAsP2PGroupMember);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_timerCallbackIntervalMs_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_timerCallbackIntervalMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_timerCallbackIntervalMs_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (uint32_t) ((arg1)->m_timerCallbackIntervalMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_timerCallbackParallelMaxCount_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_timerCallbackParallelMaxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_timerCallbackParallelMaxCount_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int32_t result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (int32_t) ((arg1)->m_timerCallbackParallelMaxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_enableNagleAlgorithm_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableNagleAlgorithm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_enableNagleAlgorithm_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (bool) ((arg1)->m_enableNagleAlgorithm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_reservedHostIDFirstValue_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_reservedHostIDFirstValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_reservedHostIDFirstValue_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_reservedHostIDFirstValue);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_reservedHostIDCount_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_reservedHostIDCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameterBase_reservedHostIDCount_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (int) ((arg1)->m_reservedHostIDCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_allowExceptionEvent_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_allowExceptionEvent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_allowExceptionEvent_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (bool) ((arg1)->m_allowExceptionEvent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameterBase_enableEncryptedMessaging_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableEncryptedMessaging = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameterBase_enableEncryptedMessaging_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  result = (bool) ((arg1)->m_enableEncryptedMessaging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StartServerParameterBase(void * jarg1) {
  Proud::CStartServerParameterBase *arg1 = (Proud::CStartServerParameterBase *) 0 ;
  
  arg1 = (Proud::CStartServerParameterBase *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_tcpPorts_set(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *arg2 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CFastArray< int > *)jarg2; 
  if (arg1) (arg1)->m_tcpPorts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StartServerParameter_tcpPorts_get(void * jarg1) {
  void * jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (Proud::CFastArray< int > *)& ((arg1)->m_tcpPorts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_udpPorts_set(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *arg2 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CFastArray< int > *)jarg2; 
  if (arg1) (arg1)->m_udpPorts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StartServerParameter_udpPorts_get(void * jarg1) {
  void * jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (Proud::CFastArray< int > *)& ((arg1)->m_udpPorts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_udpAssignMode_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  ServerUdpAssignMode arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (ServerUdpAssignMode)jarg2; 
  if (arg1) (arg1)->m_udpAssignMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_udpAssignMode_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  ServerUdpAssignMode result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (ServerUdpAssignMode) ((arg1)->m_udpAssignMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_enableIocp_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableIocp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_enableIocp_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_enableIocp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_upnpDetectNatDevice_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_upnpDetectNatDevice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_upnpDetectNatDevice_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_upnpDetectNatDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_upnpTcpAddPortMapping_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_upnpTcpAddPortMapping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_upnpTcpAddPortMapping_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_upnpTcpAddPortMapping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_usingOverBlockIcmpEnvironment_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_usingOverBlockIcmpEnvironment = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_usingOverBlockIcmpEnvironment_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_usingOverBlockIcmpEnvironment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_clientEmergencyLogMaxLineCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_clientEmergencyLogMaxLineCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_clientEmergencyLogMaxLineCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (uint32_t) ((arg1)->m_clientEmergencyLogMaxLineCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_enablePingTest_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enablePingTest = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_enablePingTest_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_enablePingTest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_ignoreFailedBindPort_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_ignoreFailedBindPort = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_ignoreFailedBindPort_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_ignoreFailedBindPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_failedBindPorts_set(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *arg2 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CFastArray< int > *)jarg2; 
  if (arg1) (arg1)->m_failedBindPorts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StartServerParameter_failedBindPorts_get(void * jarg1) {
  void * jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CFastArray< int > *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (Proud::CFastArray< int > *)& ((arg1)->m_failedBindPorts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_tunedNetworkerSendIntervalMs_TEST_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_tunedNetworkerSendIntervalMs_TEST = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_tunedNetworkerSendIntervalMs_TEST_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (int) ((arg1)->m_tunedNetworkerSendIntervalMs_TEST);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_simplePacketMode_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_simplePacketMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_simplePacketMode_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_simplePacketMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_hostIDGenerationPolicySimplePacketMode_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::HostIDGenerationPolicy arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::HostIDGenerationPolicy)jarg2; 
  if (arg1) (arg1)->m_hostIDGenerationPolicy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_hostIDGenerationPolicySimplePacketMode_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::HostIDGenerationPolicy result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (Proud::HostIDGenerationPolicy) ((arg1)->m_hostIDGenerationPolicy);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_m_enableAutoConnectionRecoveryOnServer_set(void * jarg1, unsigned int jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableAutoConnectionRecoveryOnServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StartServerParameter_m_enableAutoConnectionRecoveryOnServer_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  bool result;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (bool) ((arg1)->m_enableAutoConnectionRecoveryOnServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_webSocketType_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::WebSocketType arg2 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  arg2 = (Proud::WebSocketType)jarg2; 
  if (arg1) (arg1)->webSocketType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_webSocketType_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::WebSocketType result;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (Proud::WebSocketType) ((arg1)->webSocketType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_endpoint_set(void * jarg1, char * jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->endpoint = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_endpoint_get(void * jarg1) {
  char * jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (Proud::String *) & ((arg1)->endpoint);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_listenPort_set(void * jarg1, unsigned short jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->listenPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_listenPort_get(void * jarg1) {
  unsigned short jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (uint16_t) ((arg1)->listenPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_threadCount_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->threadCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_threadCount_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (int) ((arg1)->threadCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_timeoutRequest_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timeoutRequest = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_timeoutRequest_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (int) ((arg1)->timeoutRequest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_timeoutIdle_set(void * jarg1, int jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timeoutIdle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_timeoutIdle_get(void * jarg1) {
  int jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  int result;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (int) ((arg1)->timeoutIdle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_certFile_set(void * jarg1, char * jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->certFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_certFile_get(void * jarg1) {
  char * jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (Proud::String *) & ((arg1)->certFile);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_privateKeyFile_set(void * jarg1, char * jarg2) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->privateKeyFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StartServerParameter_WebSocketParam_privateKeyFile_get(void * jarg1) {
  char * jresult ;
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  result = (Proud::String *) & ((arg1)->privateKeyFile);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StartServerParameter_WebSocketParam() {
  void * jresult ;
  Proud::CStartServerParameter::WebSocketParam *result = 0 ;
  
  {
    try {
      result = (Proud::CStartServerParameter::WebSocketParam *)new Proud::CStartServerParameter::WebSocketParam();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StartServerParameter_WebSocketParam(void * jarg1) {
  Proud::CStartServerParameter::WebSocketParam *arg1 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  
  arg1 = (Proud::CStartServerParameter::WebSocketParam *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_m_webSocketParam_set(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CStartServerParameter::WebSocketParam *arg2 = (Proud::CStartServerParameter::WebSocketParam *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CStartServerParameter::WebSocketParam *)jarg2; 
  if (arg1) (arg1)->m_webSocketParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StartServerParameter_m_webSocketParam_get(void * jarg1) {
  void * jresult ;
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CStartServerParameter::WebSocketParam *result = 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  result = (Proud::CStartServerParameter::WebSocketParam *)& ((arg1)->m_webSocketParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StartServerParameter() {
  void * jresult ;
  Proud::CStartServerParameter *result = 0 ;
  
  {
    try {
      result = (Proud::CStartServerParameter *)new Proud::CStartServerParameter();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_SetExternalUserWorkerThreadPool(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CThreadPool *arg2 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CThreadPool *)jarg2; 
  {
    try {
      try {
        Proud_CStartServerParameter_SetExternalUserWorkerThreadPool(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartServerParameter_SetExternalNetWorkerThreadPool(void * jarg1, void * jarg2) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  Proud::CThreadPool *arg2 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  arg2 = (Proud::CThreadPool *)jarg2; 
  {
    try {
      try {
        Proud_CStartServerParameter_SetExternalNetWorkerThreadPool(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StartServerParameter(void * jarg1) {
  Proud::CStartServerParameter *arg1 = (Proud::CStartServerParameter *) 0 ;
  
  arg1 = (Proud::CStartServerParameter *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpIssueRecvLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpIssueRecvLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpIssueRecvLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpIssueRecvLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_Client_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_Client = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_Client_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_Client;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_Server_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_Server = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_Server_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_Server;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_ServerStaticAssigned_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_ServerStaticAssigned = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpRecvBufferLength_ServerStaticAssigned_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_ServerStaticAssigned;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpIssueRecvLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpIssueRecvLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_TcpIssueRecvLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpIssueRecvLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpRecvBufferLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpRecvBufferLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_TcpRecvBufferLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpRecvBufferLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpSendBufferLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpSendBufferLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_TcpSendBufferLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpSendBufferLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_Client_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_Client = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_Client_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_Client;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_Server_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_Server = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_Server_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_Server;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_ServerStaticAssigned_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_ServerStaticAssigned = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpSendBufferLength_ServerStaticAssigned_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_ServerStaticAssigned;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableSocketTcpKeepAliveOption_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSocketTcpKeepAliveOption = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableSocketTcpKeepAliveOption_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSocketTcpKeepAliveOption;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReliableUdpHeartbeatIntervalMs_Real_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_Real = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReliableUdpHeartbeatIntervalMs_Real_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_Real;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_ForDummyTest = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_ForDummyTest;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpSocketConnectTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpSocketConnectTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_TcpSocketConnectTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpSocketConnectTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ClientConnectServerTimeoutTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ClientConnectServerTimeoutTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ClientConnectServerTimeoutTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ClientConnectServerTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DefaultConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_DefaultConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DefaultConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MinConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MinConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MinConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MinConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MaxConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MaxConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MaxConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MaxConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_WaitCompletionTimeoutMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::WaitCompletionTimeoutMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_WaitCompletionTimeoutMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::WaitCompletionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_HeartbeatIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::HeartbeatIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_HeartbeatIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::HeartbeatIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_GarbageCollectIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::GarbageCollectIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_GarbageCollectIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::GarbageCollectIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ServerHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ServerHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ServerHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ServerHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UdpHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_UdpHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UdpHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ServerUdpRepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ServerUdpRepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ServerUdpRepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ServerUdpRepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ServerUdpRepunchMaxTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpRepunchMaxTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_ServerUdpRepunchMaxTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpRepunchMaxTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ServerUdpHolepunchMaxTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpHolepunchMaxTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_ServerUdpHolepunchMaxTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpHolepunchMaxTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_P2PHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::P2PHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_P2PHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::P2PHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_P2PShotgunStartTurn_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PShotgunStartTurn = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_P2PShotgunStartTurn_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PShotgunStartTurn;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_P2PHolepunchMaxTurnCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PHolepunchMaxTurnCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_P2PHolepunchMaxTurnCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PHolepunchMaxTurnCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldUnmatureClientTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldUnmatureClientTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldUnmatureClientTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldUnmatureClientTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldAddMemberAckTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldAddMemberAckTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldAddMemberAckTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldAddMemberAckTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DisposeGarbagedHostsTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DisposeGarbagedHostsTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_DisposeGarbagedHostsTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DisposeGarbagedHostsTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RemoveTooOldUdpSendPacketQueueTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RemoveTooOldUdpSendPacketQueueTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AssembleFraggedPacketTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AssembleFraggedPacketTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_AssembleFraggedPacketTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AssembleFraggedPacketTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnablePacketDefragWarning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnablePacketDefragWarning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnablePacketDefragWarning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnablePacketDefragWarning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_GetP2PHolepunchEndTimeMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetP2PHolepunchEndTimeMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ShotgunTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ShotgunTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_ShotgunTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ShotgunTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ShotgunRange_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ShotgunRange = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_ShotgunRange_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ShotgunRange;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UnreliablePingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UnreliablePingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_UnreliablePingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UnreliablePingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReliablePingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliablePingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReliablePingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliablePingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UseReportRealUdpCount_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UseReportRealUdpCount = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_UseReportRealUdpCount_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UseReportRealUdpCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReportRealUdpCountIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportRealUdpCountIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReportRealUdpCountIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportRealUdpCountIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_LanClientHeartbeatIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::LanClientHeartbeatIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_LanClientHeartbeatIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::LanClientHeartbeatIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_LanPeerConnectPeerTimeoutTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LanPeerConnectPeerTimeoutTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_LanPeerConnectPeerTimeoutTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LanPeerConnectPeerTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldJoiningTimeOutIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldJoiningTimeOutIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_PurgeTooOldJoiningTimeOutIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldJoiningTimeOutIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_RemoveLookaheadMessageTimeoutIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RemoveLookaheadMessageTimeoutIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_RemoveLookaheadMessageTimeoutIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RemoveLookaheadMessageTimeoutIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_RecyclePairReuseTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::RecyclePairReuseTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_RecyclePairReuseTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::RecyclePairReuseTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::GarbageTooOldRecyclableUdpSocketsIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::GarbageTooOldRecyclableUdpSocketsIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ServerUdpSocketLatentCloseMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpSocketLatentCloseMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_ServerUdpSocketLatentCloseMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpSocketLatentCloseMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpInDangerThresholdMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpInDangerThresholdMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_TcpInDangerThresholdMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpInDangerThresholdMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpUnstableDetectionWaitTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpUnstableDetectionWaitTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_TcpUnstableDetectionWaitTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpUnstableDetectionWaitTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_PauseUdpSendDurationOnTcpInDangerMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PauseUdpSendDurationOnTcpInDangerMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_PauseUdpSendDurationOnTcpInDangerMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PauseUdpSendDurationOnTcpInDangerMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_RecentAssemblyingPacketIDsClearIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RecentAssemblyingPacketIDsClearIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_RecentAssemblyingPacketIDsClearIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RecentAssemblyingPacketIDsClearIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryTimeoutTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryTimeoutTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryTimeoutTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::AutoConnectionRecoveryTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryTimeoutMinTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryTimeoutMinTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryTimeoutMinTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AutoConnectionRecoveryTimeoutMinTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EveryRemoteIssueSendOnNeedIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::EveryRemoteIssueSendOnNeedIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_EveryRemoteIssueSendOnNeedIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::EveryRemoteIssueSendOnNeedIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_GetFallbackServerUdpToTcpTimeoutMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetFallbackServerUdpToTcpTimeoutMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_GetFallbackP2PUdpToTcpTimeoutMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetFallbackP2PUdpToTcpTimeoutMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultNoPingTimeoutTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultNoPingTimeoutTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_DefaultNoPingTimeoutTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultNoPingTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_LagLinearProgrammingFactorPercent_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::LagLinearProgrammingFactorPercent = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_LagLinearProgrammingFactorPercent_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::LagLinearProgrammingFactorPercent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_StreamGrowBy_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::StreamGrowBy = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_StreamGrowBy_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::StreamGrowBy;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_InternalNetVersion_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::InternalNetVersion = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_InternalNetVersion_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::InternalNetVersion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_InternalLanVersion_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::InternalLanVersion = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_InternalLanVersion_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::InternalLanVersion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetServerConfig_GetVersion() {
  char * jresult ;
  Proud::String result;
  
  {
    try {
      result = Proud::CNetConfig::GetVersion();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MtuLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MtuLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MtuLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MtuLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ElectSuperPeerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ElectSuperPeerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ElectSuperPeerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ElectSuperPeerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MessageMinLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageMinLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MessageMaxLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageMaxLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MessageMaxLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageMaxLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultGracefulDisconnectTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DefaultGracefulDisconnectTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_DefaultGracefulDisconnectTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DefaultGracefulDisconnectTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MaxS2CMulticastRouteCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MaxS2CMulticastRouteCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MaxS2CMulticastRouteCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MaxS2CMulticastRouteCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UnreliableS2CRoutedMulticastMaxPingDefaultMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UnreliableS2CRoutedMulticastMaxPingDefaultMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ForceCompressedRelayDestListOnly_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ForceCompressedRelayDestListOnly = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ForceCompressedRelayDestListOnly_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ForceCompressedRelayDestListOnly;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MaxConnectionCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MaxConnectionCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_OrdinaryHeavyS2CMulticastCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::OrdinaryHeavyS2CMulticastCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableTestSplitter_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableTestSplitter;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ClientListHashTableValue_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Proud::CNetConfig::ClientListHashTableValue;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableSpeedHackDetectorByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSpeedHackDetectorByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableSpeedHackDetectorByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSpeedHackDetectorByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableMessagePriority_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableMessagePriority = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableMessagePriority_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableMessagePriority;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_SpeedHackDetectorPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SpeedHackDetectorPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_SpeedHackDetectorPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SpeedHackDetectorPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultMaxDirectP2PMulticastCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultMaxDirectP2PMulticastCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_DefaultMaxDirectP2PMulticastCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultMaxDirectP2PMulticastCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UpnpDetectNatDeviceByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UpnpDetectNatDeviceByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_UpnpDetectNatDeviceByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UpnpDetectNatDeviceByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UpnpTcpAddPortMappingByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UpnpTcpAddPortMappingByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_UpnpTcpAddPortMappingByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UpnpTcpAddPortMappingByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MeasureClientSendSpeedIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MeasureClientSendSpeedIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MeasureClientSendSpeedIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MeasureClientSendSpeedIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MeasureSendSpeedDurationMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MeasureSendSpeedDurationMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MeasureSendSpeedDurationMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MeasureSendSpeedDurationMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultDirectP2PStartCondition_set(int jarg1) {
  Proud::DirectP2PStartCondition arg1 ;
  
  arg1 = (Proud::DirectP2PStartCondition)jarg1; 
  Proud::CNetConfig::DefaultDirectP2PStartCondition = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_DefaultDirectP2PStartCondition_get() {
  int jresult ;
  Proud::DirectP2PStartCondition result;
  
  result = (Proud::DirectP2PStartCondition)Proud::CNetConfig::DefaultDirectP2PStartCondition;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_CatchUnhandledException_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::CatchUnhandledException = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_CatchUnhandledException_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::CatchUnhandledException;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_NetworkerThreadPriorityIsHigh_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::NetworkerThreadPriorityIsHigh = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_NetworkerThreadPriorityIsHigh_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::NetworkerThreadPriorityIsHigh;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableAbortiveSocketClose_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableAbortiveSocketClose = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableAbortiveSocketClose_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableAbortiveSocketClose;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableObjectPooling_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableObjectPooling = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableObjectPooling_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableObjectPooling;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableSocketReuseAddress_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSocketReuseAddress = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableSocketReuseAddress_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSocketReuseAddress;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReportLanP2PPeerPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportLanP2PPeerPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReportLanP2PPeerPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportLanP2PPeerPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReportP2PPeerPingTestIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportP2PPeerPingTestIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReportP2PPeerPingTestIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportP2PPeerPingTestIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ReportServerTimeAndPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportServerTimeAndPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ReportServerTimeAndPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportServerTimeAndPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_LongIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LongIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_LongIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LongIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MinSendSpeed_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MinSendSpeed = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MinSendSpeed_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MinSendSpeed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefaultOverSendSuspectingThresholdInBytes_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultOverSendSuspectingThresholdInBytes = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_DefaultOverSendSuspectingThresholdInBytes_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultOverSendSuspectingThresholdInBytes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ForceUnsafeHeapToSafeHeap_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ForceUnsafeHeapToSafeHeap = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ForceUnsafeHeapToSafeHeap_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ForceUnsafeHeapToSafeHeap;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableSendBrake_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSendBrake = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableSendBrake_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSendBrake;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UdpCongestionControl_MinPacketLossPercent_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpCongestionControl_MinPacketLossPercent = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_UdpCongestionControl_MinPacketLossPercent_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpCongestionControl_MinPacketLossPercent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_VizReconnectTryIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::VizReconnectTryIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_VizReconnectTryIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::VizReconnectTryIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_SuperPeerSelectionPremiumMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SuperPeerSelectionPremiumMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_SuperPeerSelectionPremiumMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SuperPeerSelectionPremiumMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_HostIDRecycleAllowTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::HostIDRecycleAllowTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_HostIDRecycleAllowTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::HostIDRecycleAllowTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningCapacity_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningCapacity = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningCapacity_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::SendQueueHeavyWarningCapacity;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SendQueueHeavyWarningTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningCheckCoolTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningCheckCoolTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_SendQueueHeavyWarningCheckCoolTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SendQueueHeavyWarningCheckCoolTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UpdateNetClientStatCloneCoolTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UpdateNetClientStatCloneCoolTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_UpdateNetClientStatCloneCoolTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UpdateNetClientStatCloneCoolTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableErrorReportToNettention_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableErrorReportToNettention = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableErrorReportToNettention_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableErrorReportToNettention;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ManagerGarbageFreeTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ManagerGarbageFreeTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_ManagerGarbageFreeTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ManagerGarbageFreeTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ManagerAverageElapsedTimeCollectCount_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Proud::CNetConfig::ManagerAverageElapsedTimeCollectCount = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ManagerAverageElapsedTimeCollectCount_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Proud::CNetConfig::ManagerAverageElapsedTimeCollectCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableStarvationWarning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableStarvationWarning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableStarvationWarning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableStarvationWarning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_FraggingOnNeedByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::FraggingOnNeedByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_FraggingOnNeedByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::FraggingOnNeedByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_CheckDeadLock_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::CheckDeadLock = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_CheckDeadLock_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::CheckDeadLock;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UseIsSameLanToLocalForMaxDirectP2PMulticast = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UseIsSameLanToLocalForMaxDirectP2PMulticast;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_TcpSendMaxAmount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpSendMaxAmount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_TcpSendMaxAmount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpSendMaxAmount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ConcealDeadlockOnDisconnect_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ConcealDeadlockOnDisconnect = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ConcealDeadlockOnDisconnect_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ConcealDeadlockOnDisconnect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadWarningLimit_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageOverloadWarningLimit = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadWarningLimit_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageOverloadWarningLimit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadWarningLimitTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageOverloadWarningLimitTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadWarningLimitTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageOverloadWarningLimitTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadTimerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MessageOverloadTimerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_MessageOverloadTimerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MessageOverloadTimerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_LanRemotePeerHeartBeatTimerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LanRemotePeerHeartBeatTimerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_LanRemotePeerHeartBeatTimerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LanRemotePeerHeartBeatTimerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AssertTimeoutTimeAppropriate(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  {
    try {
      Proud::CNetConfig::AssertTimeoutTimeAppropriate(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_P2PFallbackTcpRelayResendTimeIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PFallbackTcpRelayResendTimeIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_P2PFallbackTcpRelayResendTimeIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PFallbackTcpRelayResendTimeIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_CleanUpOldPacketIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::CleanUpOldPacketIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_CleanUpOldPacketIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::CleanUpOldPacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_NormalizePacketIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::NormalizePacketIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_NormalizePacketIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::NormalizePacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ThrowExceptionIfMessageLengthOutOfRange(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      Proud::CNetConfig::ThrowExceptionIfMessageLengthOutOfRange(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_MessageRecovery_MessageIDAckIntervalMs_set(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  Proud::CNetConfig::MessageRecovery_MessageIDAckIntervalMs = arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetServerConfig_MessageRecovery_MessageIDAckIntervalMs_get() {
  double jresult ;
  double result;
  
  result = (double)Proud::CNetConfig::MessageRecovery_MessageIDAckIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_ListenSocket_RetryOnInvalidArgError_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ListenSocket_RetryOnInvalidArgError = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_ListenSocket_RetryOnInvalidArgError_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ListenSocket_RetryOnInvalidArgError;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_AllowOutputDebugString_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::AllowOutputDebugString = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_AllowOutputDebugString_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::AllowOutputDebugString;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefensiveSendReadyListAdd_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::DefensiveSendReadyListAdd = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_DefensiveSendReadyListAdd_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::DefensiveSendReadyListAdd;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_DefensiveCustomValueEvent_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::DefensiveCustomValueEvent = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_DefensiveCustomValueEvent_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::DefensiveCustomValueEvent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnablePeriodicDetectingTransitionNetwork_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnablePeriodicDetectingTransitionNetwork = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnablePeriodicDetectingTransitionNetwork_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnablePeriodicDetectingTransitionNetwork;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetServerConfig_WaitForSendingDummyPacketIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)(int64_t)Proud::CNetConfig::WaitForSendingDummyPacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerConfig_EnableAutoConnectionRecoveryOnServer_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableAutoConnectionRecoveryOnServer = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerConfig_EnableAutoConnectionRecoveryOnServer_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableAutoConnectionRecoveryOnServer;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerConfig_RountTripLatencyTestMaxCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::RountTripLatencyTestMaxCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetServerConfig() {
  void * jresult ;
  Proud::CNetConfig *result = 0 ;
  
  {
    try {
      result = (Proud::CNetConfig *)new Proud::CNetConfig();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetServerConfig(void * jarg1) {
  Proud::CNetConfig *arg1 = (Proud::CNetConfig *) 0 ;
  
  arg1 = (Proud::CNetConfig *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Guid() {
  void * jresult ;
  Proud::Guid *result = 0 ;
  
  {
    try {
      result = (Proud::Guid *)new Proud::Guid();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Guid_ConvertStringToUUID(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::String arg1 ;
  Proud::Guid *arg2 = 0 ;
  bool result;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (Proud::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Proud::Guid::ConvertStringToUUID(arg1,*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Guid_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  Proud::Guid *arg1 = 0 ;
  Proud::String result;
  
  arg1 = (Proud::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::Guid::GetString((Proud::Guid const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Guid_GetBracketString(void * jarg1) {
  char * jresult ;
  Proud::Guid *arg1 = 0 ;
  Proud::String result;
  
  arg1 = (Proud::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::Guid::GetBracketString((Proud::Guid const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Guid_CopyManagedByteArrayToNativeGuid(void * jarg1, void * jarg2, int jarg3) {
  Proud::Guid *arg1 = (Proud::Guid *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  arg1 = (Proud::Guid *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      Proud_Guid_CopyManagedByteArrayToNativeGuid(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Guid(void * jarg1) {
  Proud::Guid *arg1 = (Proud::Guid *) 0 ;
  
  arg1 = (Proud::Guid *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_remote_set(void * jarg1, int jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remote = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeException_m_remote_get(void * jarg1) {
  int jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remote);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_exceptionType_set(void * jarg1, int jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::ExceptionType arg2 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  arg2 = (Proud::ExceptionType)jarg2; 
  if (arg1) (arg1)->m_exceptionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeException_m_exceptionType_get(void * jarg1) {
  int jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::ExceptionType result;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::ExceptionType) ((arg1)->m_exceptionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_userCallbackName_set(void * jarg1, char * jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_userCallbackName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeException_m_userCallbackName_get(void * jarg1) {
  char * jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_userCallbackName);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_0() {
  void * jresult ;
  Proud::Exception *result = 0 ;
  
  {
    try {
      result = (Proud::Exception *)new Proud::Exception();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception((char const *)arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_2(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_3(void * jarg1) {
  void * jresult ;
  Proud::Exception *arg1 = 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Exception const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception((Proud::Exception const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeException(void * jarg1) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeException_what(void * jarg1) {
  char * jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  char *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  {
    try {
      result = (char *)((Proud::Exception const *)arg1)->what();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalReceiveBytes(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalReceiveBytes();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalSendCount(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalSendCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalReceiveCount(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalReceiveCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalSendBytes(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalSendBytes();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetCoreStats(void * jarg1) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerStats_p2pConnectionPairCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_p2pConnectionPairCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerStats_p2pConnectionPairCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_p2pConnectionPairCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerStats_p2pDirectConnectionPairCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_p2pDirectConnectionPairCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerStats_p2pDirectConnectionPairCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_p2pDirectConnectionPairCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerStats_clientCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_clientCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerStats_clientCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_clientCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerStats_realUdpEnabledClientCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_realUdpEnabledClientCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetServerStats_realUdpEnabledClientCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_realUdpEnabledClientCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetServerStats_occupiedUdpPortCount_set(void * jarg1, int jarg2) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_occupiedUdpPortCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetServerStats_occupiedUdpPortCount_get(void * jarg1) {
  int jresult ;
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  int result;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  result = (int) ((arg1)->m_occupiedUdpPortCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetServerStats() {
  void * jresult ;
  Proud::CNetServerStats *result = 0 ;
  
  {
    try {
      result = (Proud::CNetServerStats *)new Proud::CNetServerStats();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetServerStats(void * jarg1) {
  Proud::CNetServerStats *arg1 = (Proud::CNetServerStats *) 0 ;
  
  arg1 = (Proud::CNetServerStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PGroup_groupHostID_set(void * jarg1, int jarg2) {
  Proud::CP2PGroup *arg1 = (Proud::CP2PGroup *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CP2PGroup *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_groupHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_P2PGroup_groupHostID_get(void * jarg1) {
  int jresult ;
  Proud::CP2PGroup *arg1 = (Proud::CP2PGroup *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CP2PGroup *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_groupHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PGroup_members_set(void * jarg1, void * jarg2) {
  Proud::CP2PGroup *arg1 = (Proud::CP2PGroup *) 0 ;
  Proud::HostIDArray *arg2 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::CP2PGroup *)jarg1; 
  arg2 = (Proud::HostIDArray *)jarg2; 
  if (arg1) (arg1)->m_members = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_P2PGroup_members_get(void * jarg1) {
  void * jresult ;
  Proud::CP2PGroup *arg1 = (Proud::CP2PGroup *) 0 ;
  Proud::HostIDArray *result = 0 ;
  
  arg1 = (Proud::CP2PGroup *)jarg1; 
  result = (Proud::HostIDArray *)& ((arg1)->m_members);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_P2PGroup() {
  void * jresult ;
  Proud::CP2PGroup *result = 0 ;
  
  {
    try {
      result = (Proud::CP2PGroup *)new Proud::CP2PGroup();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_P2PGroup(void * jarg1) {
  Proud::CP2PGroup *arg1 = (Proud::CP2PGroup *) 0 ;
  
  arg1 = (Proud::CP2PGroup *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PGroupOption_m_enableDirectP2P_set(void * jarg1, unsigned int jarg2) {
  Proud::CP2PGroupOption *arg1 = (Proud::CP2PGroupOption *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CP2PGroupOption *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableDirectP2P = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_P2PGroupOption_m_enableDirectP2P_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CP2PGroupOption *arg1 = (Proud::CP2PGroupOption *) 0 ;
  bool result;
  
  arg1 = (Proud::CP2PGroupOption *)jarg1; 
  result = (bool) ((arg1)->m_enableDirectP2P);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_P2PGroupOption() {
  void * jresult ;
  Proud::CP2PGroupOption *result = 0 ;
  
  {
    try {
      result = (Proud::CP2PGroupOption *)new Proud::CP2PGroupOption();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_P2PGroupOption_Default_set(void * jarg1) {
  Proud::CP2PGroupOption *arg1 = (Proud::CP2PGroupOption *) 0 ;
  
  arg1 = (Proud::CP2PGroupOption *)jarg1; 
  Proud::CP2PGroupOption::Default = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_P2PGroupOption_Default_get() {
  void * jresult ;
  Proud::CP2PGroupOption *result = 0 ;
  
  result = (Proud::CP2PGroupOption *)&Proud::CP2PGroupOption::Default;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_P2PGroupOption(void * jarg1) {
  Proud::CP2PGroupOption *arg1 = (Proud::CP2PGroupOption *) 0 ;
  
  arg1 = (Proud::CP2PGroupOption *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IThreadPoolEvent_OnThreadBegin(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      (arg1)->OnThreadBegin();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IThreadPoolEvent_OnThreadEnd(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      (arg1)->OnThreadEnd();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IThreadPoolEvent(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeThreadPool(void * jarg1) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeThreadPool_SetDesiredThreadCount(void * jarg1, int jarg2) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetDesiredThreadCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeThreadPool_Create(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  int arg2 ;
  Proud::CThreadPool *result = 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (Proud::CThreadPool *)Proud::CThreadPool::Create(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeThreadPool_Process(void * jarg1, int jarg2) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->Process(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeThreadPool_RunAsync(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  Proud::RunAsyncType arg2 ;
  Proud::RunAsyncFunction arg3 = (Proud::RunAsyncFunction) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  arg2 = (Proud::RunAsyncType)jarg2; 
  arg3 = (Proud::RunAsyncFunction)jarg3; 
  arg4 = jarg4; 
  {
    try {
      (arg1)->RunAsync(arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CopyNativeDataToManageByteArray(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)CopyNativeDataToManageByteArray(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CopyNativeByteArrayToManageByteArray(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  Proud::ByteArray *arg2 = (Proud::ByteArray *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = (Proud::ByteArray *)jarg2; 
  {
    try {
      result = (bool)CopyNativeByteArrayToManageByteArray(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ManageByteArrayToCopyNativeByteArray(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  
  arg2 = (uint8_t*)(jarg2);
  
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)ManageByteArrayToCopyNativeByteArray(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartUpDump(char * jarg1, int jarg2) {
  int jresult ;
  Proud::String arg1 ;
  int arg2 ;
  Proud::MiniDumpAction result;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (int)jarg2; 
  {
    try {
      result = (Proud::MiniDumpAction)StartUpDump(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ManualFullDump() {
  {
    try {
      ManualFullDump();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ManualMiniDump() {
  {
    try {
      ManualMiniDump();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteDumpFromHere(char * jarg1, unsigned int jarg2) {
  Proud::String arg1 ;
  bool arg2 ;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = jarg2 ? true : false; 
  {
    try {
      WriteDumpFromHere(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogWriter_Create(char * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  Proud::String arg1 ;
  int arg2 ;
  bool arg3 ;
  void *result = 0 ;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (void *)LogWriter_Create(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_Destory(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      LogWriter_Destory(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_SetFileName(void * jarg1, char * jarg2) {
  void *arg1 = (void *) 0 ;
  Proud::String arg2 ;
  
  arg1 = jarg1; 
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg2 = StringA2T(jarg2, GetUTF8toUTF16());
  
  {
    try {
      LogWriter_SetFileName(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLine__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5, char * jarg6, int jarg7) {
  void *arg1 = (void *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Proud::String arg5 ;
  Proud::String arg6 ;
  int arg7 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg5 = StringA2T(jarg5, GetUTF8toUTF16());
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg6 = StringA2T(jarg6, GetUTF8toUTF16());
  
  arg7 = (int)jarg7; 
  {
    try {
      LogWriter_WriteLine(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLine__SWIG_1(void * jarg1, char * jarg2) {
  void *arg1 = (void *) 0 ;
  Proud::String arg2 ;
  
  arg1 = jarg1; 
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg2 = StringA2T(jarg2, GetUTF8toUTF16());
  
  {
    try {
      LogWriter_WriteLine(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_SetIgnorePendedWriteOnExit(void * jarg1, unsigned int jarg2) {
  void *arg1 = (void *) 0 ;
  bool arg2 ;
  
  arg1 = jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      LogWriter_SetIgnorePendedWriteOnExit(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT Proud::INetCoreEvent * SWIGSTDCALL CSharp_INetServerEvent_SWIGUpcast(Proud::INetServerEvent *jarg1) {
    return (Proud::INetCoreEvent *)jarg1;
}

SWIGEXPORT Proud::CStartServerParameterBase * SWIGSTDCALL CSharp_StartServerParameter_SWIGUpcast(Proud::CStartServerParameter *jarg1) {
    return (Proud::CStartServerParameterBase *)jarg1;
}

SWIGEXPORT Proud::CNetCoreStats * SWIGSTDCALL CSharp_NetServerStats_SWIGUpcast(Proud::CNetServerStats *jarg1) {
    return (Proud::CNetCoreStats *)jarg1;
}

#ifdef __cplusplus
}
#endif

