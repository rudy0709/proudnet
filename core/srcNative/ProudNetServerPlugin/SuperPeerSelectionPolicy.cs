//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class SuperPeerSelectionPolicy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SuperPeerSelectionPolicy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SuperPeerSelectionPolicy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SuperPeerSelectionPolicy() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_SuperPeerSelectionPolicy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public double m_realUdpWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_realUdpWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_realUdpWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double m_noNatDeviceWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_noNatDeviceWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_noNatDeviceWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double m_serverLagWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_serverLagWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_serverLagWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double m_peerLagWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_peerLagWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_peerLagWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double m_sendSpeedWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_sendSpeedWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_sendSpeedWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double m_frameRateWeight {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_frameRateWeight_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_frameRateWeight_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public long m_excludeNewJoineeDurationTimeMs {
    set {
      ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_excludeNewJoineeDurationTimeMs_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_m_excludeNewJoineeDurationTimeMs_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SuperPeerSelectionPolicy() : this(ProudNetServerPluginPINVOKE.new_SuperPeerSelectionPolicy(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SuperPeerSelectionPolicy GetOrdinary() {
    SuperPeerSelectionPolicy ret = new SuperPeerSelectionPolicy(ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_GetOrdinary(), true);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SuperPeerSelectionPolicy GetNull() {
    SuperPeerSelectionPolicy ret = new SuperPeerSelectionPolicy(ProudNetServerPluginPINVOKE.SuperPeerSelectionPolicy_GetNull(), true);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
