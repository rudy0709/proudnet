//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NamedAddrPort : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NamedAddrPort(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NamedAddrPort obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NamedAddrPort() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NamedAddrPort(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string addr {
    set {
      ProudNetClientPluginPINVOKE.NamedAddrPort_addr_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    // 주의 : 어쩌면 ProudCatchAllException.i에 넣은 %exception으로 인해서 이 throws typemap이 가려질 수도 있을 거 같다.
    get {
      string ret = ProudNetClientPluginPINVOKE.NamedAddrPort_addr_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort port {
    set {
      ProudNetClientPluginPINVOKE.NamedAddrPort_port_set(swigCPtr, value);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = ProudNetClientPluginPINVOKE.NamedAddrPort_port_get(swigCPtr);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static NamedAddrPort Unassigned {
    set {
      ProudNetClientPluginPINVOKE.NamedAddrPort_Unassigned_set(NamedAddrPort.getCPtr(value));
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ProudNetClientPluginPINVOKE.NamedAddrPort_Unassigned_get();
      NamedAddrPort ret = (cPtr == global::System.IntPtr.Zero) ? null : new NamedAddrPort(cPtr, false);
      if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static NamedAddrPort FromAddrPort(string addr, ushort port) {
    NamedAddrPort ret = new NamedAddrPort(ProudNetClientPluginPINVOKE.NamedAddrPort_FromAddrPort(addr, port), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static NamedAddrPort From(AddrPort src) {
    NamedAddrPort ret = new NamedAddrPort(ProudNetClientPluginPINVOKE.NamedAddrPort_From(AddrPort.getCPtr(src)), true);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void OverwriteHostNameIfExists(string hostName) {
    ProudNetClientPluginPINVOKE.NamedAddrPort_OverwriteHostNameIfExists(swigCPtr, hostName);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsUnicastEndpoint() {
    bool ret = ProudNetClientPluginPINVOKE.NamedAddrPort_IsUnicastEndpoint(swigCPtr);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NamedAddrPort() : this(ProudNetClientPluginPINVOKE.new_NamedAddrPort(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
