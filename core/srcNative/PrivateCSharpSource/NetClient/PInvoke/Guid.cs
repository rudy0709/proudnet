//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {


public class Guid : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Guid(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Guid obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Guid() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_Guid(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public Guid(string str) : this()
	{
		global::System.Guid managedGuid = new global::System.Guid(str);
		Nettention.Proud.Guid.MangedGuidToNativeGuid(this, managedGuid);
	}

	public Guid(global::System.Guid managedGuid) : this()
	{
		Nettention.Proud.Guid.MangedGuidToNativeGuid(this, managedGuid);
	}

	public void Set(global::System.Guid managedGuid)
	{
		Nettention.Proud.Guid.MangedGuidToNativeGuid(this, managedGuid);
	}

	internal static unsafe void MangedGuidToNativeGuid(Nettention.Proud.Guid proudGuid, global::System.Guid managedGuid)
	{
		byte[] inByteArray = managedGuid.ToByteArray();

		fixed (byte* ret = inByteArray)
		{
			proudGuid.CopyManagedByteArrayToNativeGuid(new global::System.IntPtr((void*)ret), inByteArray.Length);
		}
	}


  public Guid() : this(ProudNetClientPluginPINVOKE.new_Guid(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool ConvertStringToUUID(string uuidStr, Guid uuid) {
    bool ret = ProudNetClientPluginPINVOKE.Guid_ConvertStringToUUID(uuidStr, Guid.getCPtr(uuid));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetString(Guid uuid) {
    string ret = ProudNetClientPluginPINVOKE.Guid_GetString__SWIG_0(Guid.getCPtr(uuid));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetBracketString(Guid uuid) {
    string ret = ProudNetClientPluginPINVOKE.Guid_GetBracketString(Guid.getCPtr(uuid));
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void CopyManagedByteArrayToNativeGuid(global::System.IntPtr inByteArray, int length) {
    ProudNetClientPluginPINVOKE.Guid_CopyManagedByteArrayToNativeGuid(swigCPtr, inByteArray, length);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
