//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NativeNetUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NativeNetUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeNetUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeNetUtil() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetClientPluginPINVOKE.delete_NativeNetUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  internal static int GetIPVersionFromString(string rhs) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetUtil_GetIPVersionFromString(rhs);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static bool IsAddressAny(string address) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetUtil_IsAddressAny(address);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static bool IsAddressUnspecified(string address) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetUtil_IsAddressUnspecified(address);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static bool IsAddressPhysical(string address) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetUtil_IsAddressPhysical(address);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static bool IsAddressLoopback(string address) {
    bool ret = ProudNetClientPluginPINVOKE.NativeNetUtil_IsAddressLoopback(address);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static global::System.IntPtr LocalIPAddresses_New() { return ProudNetClientPluginPINVOKE.NativeNetUtil_LocalIPAddresses_New(); }

  internal static void LocalIPAddresses_Delete(global::System.IntPtr ipAddresses) {
    ProudNetClientPluginPINVOKE.NativeNetUtil_LocalIPAddresses_Delete(ipAddresses);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int GetLocalIPAddresseCount(global::System.IntPtr p) {
    int ret = ProudNetClientPluginPINVOKE.NativeNetUtil_GetLocalIPAddresseCount(p);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static string GetLocalIPAddress(global::System.IntPtr p, int index) {
    string ret = ProudNetClientPluginPINVOKE.NativeNetUtil_GetLocalIPAddress(p, index);
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NativeNetUtil() : this(ProudNetClientPluginPINVOKE.new_NativeNetUtil(), true) {
    if (ProudNetClientPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetClientPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
