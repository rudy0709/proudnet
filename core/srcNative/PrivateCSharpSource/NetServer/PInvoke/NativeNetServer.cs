//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NativeNetServer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NativeNetServer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeNetServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeNetServer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_NativeNetServer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	internal static NativeNetServer Create(bool cMemoryOwn)
	{
		global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NativeNetServer_Create();
		NativeNetServer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeNetServer(cPtr, cMemoryOwn);
		return ret;
	}

  internal static NativeNetServer Create() {
    global::System.IntPtr cPtr = ProudNetServerPluginPINVOKE.NativeNetServer_Create();
    NativeNetServer ret = (cPtr == global::System.IntPtr.Zero) ? null : new NativeNetServer(cPtr, false);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CloseConnection(HostID clientHostID) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_CloseConnection(swigCPtr, (int)clientHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CloseEveryConnection() {
    ProudNetServerPluginPINVOKE.NativeNetServer_CloseEveryConnection(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool DestroyP2PGroup(HostID groupHostID) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_DestroyP2PGroup(swigCPtr, (int)groupHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void DestroyEmptyP2PGroups() {
    ProudNetServerPluginPINVOKE.NativeNetServer_DestroyEmptyP2PGroups(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string DumpGroupStatus() {
    string ret = ProudNetServerPluginPINVOKE.NativeNetServer_DumpGroupStatus(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetClientCount() {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetClientCount(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetP2PRecentPingMs(HostID HostA, HostID HostB) {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetP2PRecentPingMs(swigCPtr, (int)HostA, (int)HostB);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsValidHostID(HostID id) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_IsValidHostID(swigCPtr, (int)id);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetP2PGroupCount() {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetP2PGroupCount(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsConnectedClient(HostID clientHostID) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_IsConnectedClient(swigCPtr, (int)clientHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool SetHostTag(HostID hostID, global::System.IntPtr hostTag) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_SetHostTag(swigCPtr, (int)hostID, hostTag);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual long GetTimeMs() {
    long ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetTimeMs(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool JoinP2PGroup(HostID memberHostID, HostID groupHostID, NativeByteArray message) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_JoinP2PGroup__SWIG_0(swigCPtr, (int)memberHostID, (int)groupHostID, NativeByteArray.getCPtr(message));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool JoinP2PGroup(HostID memberHostID, HostID groupHostID) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_JoinP2PGroup__SWIG_1(swigCPtr, (int)memberHostID, (int)groupHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool LeaveP2PGroup(HostID memberHostID, HostID groupHostID) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_LeaveP2PGroup(swigCPtr, (int)memberHostID, (int)groupHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetEventSink(INetServerEvent eventSink) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetEventSink(swigCPtr, INetServerEvent.getCPtr(eventSink));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void AllowEmptyP2PGroup(bool enable) {
    ProudNetServerPluginPINVOKE.NativeNetServer_AllowEmptyP2PGroup(swigCPtr, enable);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal bool IsEmptyP2PGroupAllowed() {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_IsEmptyP2PGroupAllowed(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void SetDefaultTimeoutTimeMs(int newValInMs) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetDefaultTimeoutTimeMs(swigCPtr, newValInMs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void SetTimeoutTimeMs(HostID host, int newValInMs) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetTimeoutTimeMs(swigCPtr, (int)host, newValInMs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void SetDefaultAutoConnectionRecoveryTimeoutTimeMs(int newValInMs) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetDefaultAutoConnectionRecoveryTimeoutTimeMs(swigCPtr, newValInMs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void SetAutoConnectionRecoveryTimeoutTimeMs(HostID host, int newValInMs) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetAutoConnectionRecoveryTimeoutTimeMs(swigCPtr, (int)host, newValInMs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void SetDefaultFallbackMethod(FallbackMethod newValue) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetDefaultFallbackMethod(swigCPtr, (int)newValue);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void EnableLog(string logFileName) {
    ProudNetServerPluginPINVOKE.NativeNetServer_EnableLog__SWIG_0(swigCPtr, logFileName);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void DisableLog() {
    ProudNetServerPluginPINVOKE.NativeNetServer_DisableLog(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSpeedHackDetectorReckRatioPercent(int newValue) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetSpeedHackDetectorReckRatioPercent(swigCPtr, newValue);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool EnableSpeedHackDetector(HostID clientID, bool enable) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_EnableSpeedHackDetector(swigCPtr, (int)clientID, enable);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void SetMessageMaxLength(int value_s, int value_c) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetMessageMaxLength(swigCPtr, value_s, value_c);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool IsNagleAlgorithmEnabled() {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_IsNagleAlgorithmEnabled(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetMaxDirectP2PConnectionCount(HostID clientID, int newVal) {
    ProudNetServerPluginPINVOKE.NativeNetServer_SetMaxDirectP2PConnectionCount(swigCPtr, (int)clientID, newVal);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool SetDirectP2PStartCondition(DirectP2PStartCondition newVal) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_SetDirectP2PStartCondition(swigCPtr, (int)newVal);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID GetMostSuitableSuperPeerInGroup(HostID groupID, SuperPeerSelectionPolicy policy, SWIGTYPE_p_Proud__HostID excludees, int excludeesLength) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_0(swigCPtr, (int)groupID, SuperPeerSelectionPolicy.getCPtr(policy), SWIGTYPE_p_Proud__HostID.getCPtr(excludees), excludeesLength);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID GetMostSuitableSuperPeerInGroup(HostID groupID, SuperPeerSelectionPolicy policy, SWIGTYPE_p_Proud__HostID excludees) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_1(swigCPtr, (int)groupID, SuperPeerSelectionPolicy.getCPtr(policy), SWIGTYPE_p_Proud__HostID.getCPtr(excludees));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID GetMostSuitableSuperPeerInGroup(HostID groupID, SuperPeerSelectionPolicy policy) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_2(swigCPtr, (int)groupID, SuperPeerSelectionPolicy.getCPtr(policy));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID GetMostSuitableSuperPeerInGroup(HostID groupID) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_3(swigCPtr, (int)groupID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID GetMostSuitableSuperPeerInGroup(HostID groupID, SuperPeerSelectionPolicy policy, HostID excludee) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_GetMostSuitableSuperPeerInGroup__SWIG_4(swigCPtr, (int)groupID, SuperPeerSelectionPolicy.getCPtr(policy), (int)excludee);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetInternalVersion() {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetInternalVersion(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool SendUserMessage(SWIGTYPE_p_Proud__HostID remotes, int remoteCount, NativeRmiContext rmiContext, global::System.IntPtr payload, int payloadLength) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_SendUserMessage__SWIG_0(swigCPtr, SWIGTYPE_p_Proud__HostID.getCPtr(remotes), remoteCount, NativeRmiContext.getCPtr(rmiContext), payload, payloadLength);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool SendUserMessage(HostID remote, NativeRmiContext rmiContext, global::System.IntPtr payload, int payloadLength) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_SendUserMessage__SWIG_1(swigCPtr, (int)remote, NativeRmiContext.getCPtr(rmiContext), payload, payloadLength);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType SetCoalesceIntervalMs(HostID remote, int intervalMs) {
    ErrorType ret = (ErrorType)ProudNetServerPluginPINVOKE.NativeNetServer_SetCoalesceIntervalMs(swigCPtr, (int)remote, intervalMs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ErrorType SetCoalesceIntervalToAuto(HostID remote) {
    ErrorType ret = (ErrorType)ProudNetServerPluginPINVOKE.NativeNetServer_SetCoalesceIntervalToAuto(swigCPtr, (int)remote);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void TEST_SetOverSendSuspectingThresholdInBytes(int newVal) {
    ProudNetServerPluginPINVOKE.NativeNetServer_TEST_SetOverSendSuspectingThresholdInBytes(swigCPtr, newVal);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TEST_SetTestping(HostID hostID0, HostID hostID1, int ping) {
    ProudNetServerPluginPINVOKE.NativeNetServer_TEST_SetTestping(swigCPtr, (int)hostID0, (int)hostID1, ping);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void TEST_ForceDenyTcpConnection() {
    ProudNetServerPluginPINVOKE.NativeNetServer_TEST_ForceDenyTcpConnection(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal HostID CreateP2PGroup(NativeHostIDArray clientHostIDs, NativeByteArray message) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_CreateP2PGroup__SWIG_0(swigCPtr, NativeHostIDArray.getCPtr(clientHostIDs), NativeByteArray.getCPtr(message));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal HostID CreateP2PGroup(NativeByteArray message) {
    HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeNetServer_CreateP2PGroup__SWIG_1(swigCPtr, NativeByteArray.getCPtr(message));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void GetClientHostIDs(NativeHostIDArray clientHostIDs) {
    ProudNetServerPluginPINVOKE.NativeNetServer_GetClientHostIDs(swigCPtr, NativeHostIDArray.getCPtr(clientHostIDs));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void GetJoinedP2PGroups(HostID clientHostID, NativeHostIDArray output) {
    ProudNetServerPluginPINVOKE.NativeNetServer_GetJoinedP2PGroups(swigCPtr, (int)clientHostID, NativeHostIDArray.getCPtr(output));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal bool GetClientInfo(HostID clientHostID, NetClientInfo output) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetClientInfo(swigCPtr, (int)clientHostID, NetClientInfo.getCPtr(output));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal void AttachStub(global::System.IntPtr nativeRmiStub) {
    ProudNetServerPluginPINVOKE.NativeNetServer_AttachStub(swigCPtr, nativeRmiStub);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void AttachProxy(global::System.IntPtr nativeRmiProxy) {
    ProudNetServerPluginPINVOKE.NativeNetServer_AttachProxy(swigCPtr, nativeRmiProxy);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal void Start(StartServerParameter param) {
    ProudNetServerPluginPINVOKE.NativeNetServer_Start(swigCPtr, StartServerParameter.getCPtr(param));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Stop() {
    ProudNetServerPluginPINVOKE.NativeNetServer_Stop(swigCPtr);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  internal P2PGroup GetP2PGroupInfo(HostID groupHostID) {
    P2PGroup ret = new P2PGroup(ProudNetServerPluginPINVOKE.NativeNetServer_GetP2PGroupInfo(swigCPtr, (int)groupHostID), true);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetMemberCountOfP2PGroup(HostID groupHostID) {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetMemberCountOfP2PGroup(swigCPtr, (int)groupHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal AddrPortArray GetTcpListenerLocalAddrs() {
 AddrPortArray ret = new AddrPortArray(ProudNetServerPluginPINVOKE.NativeNetServer_GetTcpListenerLocalAddrs(swigCPtr), true);
 return ret;
}

  internal NetServerStats GetStats() {
    NetServerStats ret = new NetServerStats(ProudNetServerPluginPINVOKE.NativeNetServer_GetStats(swigCPtr), true);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetLastUnreliablePingMs(HostID peerHostID) {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetLastUnreliablePingMs(swigCPtr, (int)peerHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal int GetRecentUnreliablePingMs(HostID peerHostID) {
    int ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetRecentUnreliablePingMs(swigCPtr, (int)peerHostID);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool GetP2PConnectionStats(HostID remoteHostID, P2PConnectionStats status) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetP2PConnectionStats__SWIG_0(swigCPtr, (int)remoteHostID, P2PConnectionStats.getCPtr(status));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal bool GetP2PConnectionStats(HostID remoteA, HostID remoteB, P2PPairConnectionStats status) {
    bool ret = ProudNetServerPluginPINVOKE.NativeNetServer_GetP2PConnectionStats__SWIG_1(swigCPtr, (int)remoteA, (int)remoteB, P2PPairConnectionStats.getCPtr(status));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
