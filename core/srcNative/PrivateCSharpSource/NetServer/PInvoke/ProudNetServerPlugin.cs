//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class ProudNetServerPlugin {
  public static MessagePriority MessagePriority_Holepunch {
    get {
      MessagePriority ret = (MessagePriority)ProudNetServerPluginPINVOKE.MessagePriority_Holepunch_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int CompareHostID(HostID lhs, HostID rhs) {
    int ret = ProudNetServerPluginPINVOKE.CompareHostID((int)lhs, (int)rhs);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ToString(LogCategory logCategory) {
    string ret = ProudNetServerPluginPINVOKE.ToString((int)logCategory);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int PN_IPV6_ADDR_LENGTH {
    get {
      int ret = ProudNetServerPluginPINVOKE.PN_IPV6_ADDR_LENGTH_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int InvalidSocket {
    get {
      int ret = ProudNetServerPluginPINVOKE.InvalidSocket_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool CopyNativeDataToManageByteArray(global::System.IntPtr dst, global::System.IntPtr src, int length) {
    bool ret = ProudNetServerPluginPINVOKE.CopyNativeDataToManageByteArray(dst, src, length);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CopyNativeByteArrayToManageByteArray(global::System.IntPtr dst, NativeByteArray src) {
    bool ret = ProudNetServerPluginPINVOKE.CopyNativeByteArrayToManageByteArray(dst, NativeByteArray.getCPtr(src));
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ManageByteArrayToCopyNativeByteArray(NativeByteArray dst, global::System.IntPtr src, int length) {
    bool ret = ProudNetServerPluginPINVOKE.ManageByteArrayToCopyNativeByteArray(NativeByteArray.getCPtr(dst), src, length);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MiniDumpAction StartUpDump(string dumpFileName, int miniDumpType) {
    MiniDumpAction ret = (MiniDumpAction)ProudNetServerPluginPINVOKE.StartUpDump(dumpFileName, miniDumpType);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ManualFullDump() {
    ProudNetServerPluginPINVOKE.ManualFullDump();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ManualMiniDump() {
    ProudNetServerPluginPINVOKE.ManualMiniDump();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteDumpFromHere(string fileName, bool fullDump) {
    ProudNetServerPluginPINVOKE.WriteDumpFromHere(fileName, fullDump);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static global::System.IntPtr LogWriter_Create(string logFileName, int newFileForLineLimit, bool putFileTimeString) { return ProudNetServerPluginPINVOKE.LogWriter_Create(logFileName, newFileForLineLimit, putFileTimeString); }

  public static void LogWriter_Destory(global::System.IntPtr obj) {
    ProudNetServerPluginPINVOKE.LogWriter_Destory(obj);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LogWriter_SetFileName(global::System.IntPtr obj, string logFileName) {
    ProudNetServerPluginPINVOKE.LogWriter_SetFileName(obj, logFileName);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LogWriter_WriteLine(global::System.IntPtr obj, int logLevel, int logCategory, int logHostID, string logMessage, string logFunction, int logLine) {
    ProudNetServerPluginPINVOKE.LogWriter_WriteLine__SWIG_0(obj, logLevel, logCategory, logHostID, logMessage, logFunction, logLine);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LogWriter_WriteLine(global::System.IntPtr obj, string logMessage) {
    ProudNetServerPluginPINVOKE.LogWriter_WriteLine__SWIG_1(obj, logMessage);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LogWriter_SetIgnorePendedWriteOnExit(global::System.IntPtr obj, bool flag) {
    ProudNetServerPluginPINVOKE.LogWriter_SetIgnorePendedWriteOnExit(obj, flag);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
