//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NativeRmiContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NativeRmiContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NativeRmiContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeRmiContext() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_NativeRmiContext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool relayed {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_relayed_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_relayed_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public HostID sentFrom {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_sentFrom_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      HostID ret = (HostID)ProudNetServerPluginPINVOKE.NativeRmiContext_sentFrom_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int unreliableS2CRoutedMulticastMaxCount {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int unreliableS2CRoutedMulticastMaxPingMs {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int maxDirectP2PMulticastCount {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_maxDirectP2PMulticastCount_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NativeRmiContext_maxDirectP2PMulticastCount_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public long uniqueID {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_uniqueID_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NativeRmiContext_uniqueID_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool fillSendFailedRemotes {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_fillSendFailedRemotes_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_fillSendFailedRemotes_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MessagePriority priority {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_priority_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      MessagePriority ret = (MessagePriority)ProudNetServerPluginPINVOKE.NativeRmiContext_priority_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MessageReliability reliability {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_reliability_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      MessageReliability ret = (MessageReliability)ProudNetServerPluginPINVOKE.NativeRmiContext_reliability_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enableLoopback {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_enableLoopback_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_enableLoopback_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool enableP2PJitTrigger {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_enableP2PJitTrigger_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_enableP2PJitTrigger_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool allowRelaySend {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_allowRelaySend_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_allowRelaySend_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double forceRelayThresholdRatio {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_forceRelayThresholdRatio_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.NativeRmiContext_forceRelayThresholdRatio_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool INTERNAL_USE_isProudNetSpecificRmi {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool m_fragmentOnNeed {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_m_fragmentOnNeed_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NativeRmiContext_m_fragmentOnNeed_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EncryptMode encryptMode {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_encryptMode_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      EncryptMode ret = (EncryptMode)ProudNetServerPluginPINVOKE.NativeRmiContext_encryptMode_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CompressMode compressMode {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_compressMode_set(swigCPtr, (int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      CompressMode ret = (CompressMode)ProudNetServerPluginPINVOKE.NativeRmiContext_compressMode_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ushort rmiID {
    set {
      ProudNetServerPluginPINVOKE.NativeRmiContext_rmiID_set(swigCPtr, value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = ProudNetServerPluginPINVOKE.NativeRmiContext_rmiID_get(swigCPtr);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NativeRmiContext() : this(ProudNetServerPluginPINVOKE.new_NativeRmiContext__SWIG_0(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public NativeRmiContext(MessagePriority priority, MessageReliability reliability, int unreliableS2CRoutedMulticastMaxCount, EncryptMode encryptMode) : this(ProudNetServerPluginPINVOKE.new_NativeRmiContext__SWIG_1((int)priority, (int)reliability, unreliableS2CRoutedMulticastMaxCount, (int)encryptMode), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public NativeRmiContext(MessagePriority priority, MessageReliability reliability, int unreliableS2CRoutedMulticastMaxCount) : this(ProudNetServerPluginPINVOKE.new_NativeRmiContext__SWIG_2((int)priority, (int)reliability, unreliableS2CRoutedMulticastMaxCount), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
