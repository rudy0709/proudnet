//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Nettention.Proud {

public class NetServerConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NetServerConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NetServerConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NetServerConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ProudNetServerPluginPINVOKE.delete_NetServerConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static int UdpIssueRecvLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpIssueRecvLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpIssueRecvLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_Client {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_Client_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_Client_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_Server {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_Server_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_Server_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpRecvBufferLength_ServerStaticAssigned {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_ServerStaticAssigned_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpRecvBufferLength_ServerStaticAssigned_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpIssueRecvLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpIssueRecvLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpIssueRecvLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpRecvBufferLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpRecvBufferLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpRecvBufferLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpSendBufferLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpSendBufferLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpSendBufferLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_Client {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_Client_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_Client_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_Server {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_Server_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_Server_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpSendBufferLength_ServerStaticAssigned {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_ServerStaticAssigned_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpSendBufferLength_ServerStaticAssigned_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSocketTcpKeepAliveOption {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableSocketTcpKeepAliveOption_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableSocketTcpKeepAliveOption_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliableUdpHeartbeatIntervalMs_Real {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReliableUdpHeartbeatIntervalMs_Real_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReliableUdpHeartbeatIntervalMs_Real_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliableUdpHeartbeatIntervalMs_ForDummyTest {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpSocketConnectTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpSocketConnectTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpSocketConnectTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ClientConnectServerTimeoutTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ClientConnectServerTimeoutTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ClientConnectServerTimeoutTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DefaultConnectionTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultConnectionTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefaultConnectionTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MinConnectionTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MinConnectionTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MinConnectionTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MaxConnectionTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MaxConnectionTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MaxConnectionTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint WaitCompletionTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_WaitCompletionTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetServerConfig_WaitCompletionTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint HeartbeatIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_HeartbeatIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetServerConfig_HeartbeatIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint GarbageCollectIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_GarbageCollectIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetServerConfig_GarbageCollectIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ServerHolepunchIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ServerHolepunchIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ServerHolepunchIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UdpHolepunchIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpHolepunchIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpHolepunchIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ServerUdpRepunchIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpRepunchIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpRepunchIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpRepunchMaxTrialCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpRepunchMaxTrialCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpRepunchMaxTrialCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpHolepunchMaxTrialCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpHolepunchMaxTrialCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpHolepunchMaxTrialCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long P2PHolepunchIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_P2PHolepunchIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_P2PHolepunchIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int P2PShotgunStartTurn {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_P2PShotgunStartTurn_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_P2PShotgunStartTurn_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int P2PHolepunchMaxTurnCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_P2PHolepunchMaxTurnCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_P2PHolepunchMaxTurnCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldUnmatureClientTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldUnmatureClientTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldUnmatureClientTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldAddMemberAckTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldAddMemberAckTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldAddMemberAckTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DisposeGarbagedHostsTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DisposeGarbagedHostsTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_DisposeGarbagedHostsTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RemoveTooOldUdpSendPacketQueueTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AssembleFraggedPacketTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_AssembleFraggedPacketTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_AssembleFraggedPacketTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnablePacketDefragWarning {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnablePacketDefragWarning_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnablePacketDefragWarning_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GetP2PHolepunchEndTimeMs() {
    long ret = ProudNetServerPluginPINVOKE.NetServerConfig_GetP2PHolepunchEndTimeMs();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ShotgunTrialCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ShotgunTrialCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_ShotgunTrialCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ShotgunRange {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ShotgunRange_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_ShotgunRange_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UnreliablePingIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UnreliablePingIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_UnreliablePingIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReliablePingIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReliablePingIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReliablePingIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UseReportRealUdpCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UseReportRealUdpCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_UseReportRealUdpCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportRealUdpCountIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReportRealUdpCountIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReportRealUdpCountIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint LanClientHeartbeatIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_LanClientHeartbeatIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetServerConfig_LanClientHeartbeatIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LanPeerConnectPeerTimeoutTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_LanPeerConnectPeerTimeoutTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_LanPeerConnectPeerTimeoutTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PurgeTooOldJoiningTimeOutIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldJoiningTimeOutIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_PurgeTooOldJoiningTimeOutIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RemoveLookaheadMessageTimeoutIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_RemoveLookaheadMessageTimeoutIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_RemoveLookaheadMessageTimeoutIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int RecyclePairReuseTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_RecyclePairReuseTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_RecyclePairReuseTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GarbageTooOldRecyclableUdpSocketsIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int ServerUdpSocketLatentCloseMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpSocketLatentCloseMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_ServerUdpSocketLatentCloseMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpInDangerThresholdMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpInDangerThresholdMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpInDangerThresholdMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long TcpUnstableDetectionWaitTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpUnstableDetectionWaitTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpUnstableDetectionWaitTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long PauseUdpSendDurationOnTcpInDangerMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_PauseUdpSendDurationOnTcpInDangerMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_PauseUdpSendDurationOnTcpInDangerMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long RecentAssemblyingPacketIDsClearIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_RecentAssemblyingPacketIDsClearIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_RecentAssemblyingPacketIDsClearIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int AutoConnectionRecoveryTimeoutTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryTimeoutTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryTimeoutTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AutoConnectionRecoveryTimeoutMinTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryTimeoutMinTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryTimeoutMinTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int EveryRemoteIssueSendOnNeedIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EveryRemoteIssueSendOnNeedIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_EveryRemoteIssueSendOnNeedIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long GetFallbackServerUdpToTcpTimeoutMs() {
    long ret = ProudNetServerPluginPINVOKE.NetServerConfig_GetFallbackServerUdpToTcpTimeoutMs();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long GetFallbackP2PUdpToTcpTimeoutMs() {
    long ret = ProudNetServerPluginPINVOKE.NetServerConfig_GetFallbackP2PUdpToTcpTimeoutMs();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int DefaultNoPingTimeoutTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultNoPingTimeoutTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefaultNoPingTimeoutTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int LagLinearProgrammingFactorPercent {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_LagLinearProgrammingFactorPercent_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_LagLinearProgrammingFactorPercent_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int StreamGrowBy {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_StreamGrowBy_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_StreamGrowBy_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int InternalNetVersion {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_InternalNetVersion_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_InternalNetVersion_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int InternalLanVersion {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_InternalLanVersion_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_InternalLanVersion_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string GetVersion() {
    string ret = ProudNetServerPluginPINVOKE.NetServerConfig_GetVersion();
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int MtuLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MtuLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_MtuLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ElectSuperPeerIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ElectSuperPeerIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ElectSuperPeerIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageMaxLength {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MessageMaxLength_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_MessageMaxLength_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long DefaultGracefulDisconnectTimeoutMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultGracefulDisconnectTimeoutMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefaultGracefulDisconnectTimeoutMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MaxS2CMulticastRouteCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MaxS2CMulticastRouteCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_MaxS2CMulticastRouteCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UnreliableS2CRoutedMulticastMaxPingDefaultMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ForceCompressedRelayDestListOnly {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ForceCompressedRelayDestListOnly_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_ForceCompressedRelayDestListOnly_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSpeedHackDetectorByDefault {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableSpeedHackDetectorByDefault_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableSpeedHackDetectorByDefault_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableMessagePriority {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableMessagePriority_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableMessagePriority_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SpeedHackDetectorPingIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_SpeedHackDetectorPingIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_SpeedHackDetectorPingIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int DefaultMaxDirectP2PMulticastCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultMaxDirectP2PMulticastCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefaultMaxDirectP2PMulticastCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UpnpDetectNatDeviceByDefault {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UpnpDetectNatDeviceByDefault_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_UpnpDetectNatDeviceByDefault_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UpnpTcpAddPortMappingByDefault {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UpnpTcpAddPortMappingByDefault_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_UpnpTcpAddPortMappingByDefault_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MeasureClientSendSpeedIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MeasureClientSendSpeedIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MeasureClientSendSpeedIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MeasureSendSpeedDurationMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MeasureSendSpeedDurationMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MeasureSendSpeedDurationMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static DirectP2PStartCondition DefaultDirectP2PStartCondition {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultDirectP2PStartCondition_set((int)value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      DirectP2PStartCondition ret = (DirectP2PStartCondition)ProudNetServerPluginPINVOKE.NetServerConfig_DefaultDirectP2PStartCondition_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool CatchUnhandledException {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_CatchUnhandledException_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_CatchUnhandledException_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool NetworkerThreadPriorityIsHigh {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_NetworkerThreadPriorityIsHigh_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_NetworkerThreadPriorityIsHigh_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableAbortiveSocketClose {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableAbortiveSocketClose_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableAbortiveSocketClose_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableObjectPooling {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableObjectPooling_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableObjectPooling_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSocketReuseAddress {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableSocketReuseAddress_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableSocketReuseAddress_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportLanP2PPeerPingIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReportLanP2PPeerPingIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReportLanP2PPeerPingIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportP2PPeerPingTestIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReportP2PPeerPingTestIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReportP2PPeerPingTestIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ReportServerTimeAndPingIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ReportServerTimeAndPingIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ReportServerTimeAndPingIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LongIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_LongIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_LongIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MinSendSpeed {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MinSendSpeed_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MinSendSpeed_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int DefaultOverSendSuspectingThresholdInBytes {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefaultOverSendSuspectingThresholdInBytes_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefaultOverSendSuspectingThresholdInBytes_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ForceUnsafeHeapToSafeHeap {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ForceUnsafeHeapToSafeHeap_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_ForceUnsafeHeapToSafeHeap_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableSendBrake {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableSendBrake_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableSendBrake_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int UdpCongestionControl_MinPacketLossPercent {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UdpCongestionControl_MinPacketLossPercent_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_UdpCongestionControl_MinPacketLossPercent_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long VizReconnectTryIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_VizReconnectTryIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_VizReconnectTryIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SuperPeerSelectionPremiumMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_SuperPeerSelectionPremiumMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_SuperPeerSelectionPremiumMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long HostIDRecycleAllowTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_HostIDRecycleAllowTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_HostIDRecycleAllowTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int SendQueueHeavyWarningCapacity {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningCapacity_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningCapacity_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SendQueueHeavyWarningTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long SendQueueHeavyWarningCheckCoolTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningCheckCoolTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_SendQueueHeavyWarningCheckCoolTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long UpdateNetClientStatCloneCoolTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UpdateNetClientStatCloneCoolTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_UpdateNetClientStatCloneCoolTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableErrorReportToNettention {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableErrorReportToNettention_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableErrorReportToNettention_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long ManagerGarbageFreeTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ManagerGarbageFreeTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_ManagerGarbageFreeTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static uint ManagerAverageElapsedTimeCollectCount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ManagerAverageElapsedTimeCollectCount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = ProudNetServerPluginPINVOKE.NetServerConfig_ManagerAverageElapsedTimeCollectCount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableStarvationWarning {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableStarvationWarning_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableStarvationWarning_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool FraggingOnNeedByDefault {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_FraggingOnNeedByDefault_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_FraggingOnNeedByDefault_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool CheckDeadLock {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_CheckDeadLock_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_CheckDeadLock_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool UseIsSameLanToLocalForMaxDirectP2PMulticast {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int TcpSendMaxAmount {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_TcpSendMaxAmount_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_TcpSendMaxAmount_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ConcealDeadlockOnDisconnect {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ConcealDeadlockOnDisconnect_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_ConcealDeadlockOnDisconnect_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageOverloadWarningLimit {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadWarningLimit_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadWarningLimit_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int MessageOverloadWarningLimitTimeMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadWarningLimitTimeMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadWarningLimitTimeMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long MessageOverloadTimerIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadTimerIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_MessageOverloadTimerIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long LanRemotePeerHeartBeatTimerIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_LanRemotePeerHeartBeatTimerIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_LanRemotePeerHeartBeatTimerIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void AssertTimeoutTimeAppropriate(long ms) {
    ProudNetServerPluginPINVOKE.NetServerConfig_AssertTimeoutTimeAppropriate(ms);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int P2PFallbackTcpRelayResendTimeIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_P2PFallbackTcpRelayResendTimeIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_P2PFallbackTcpRelayResendTimeIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int CleanUpOldPacketIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_CleanUpOldPacketIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_CleanUpOldPacketIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int NormalizePacketIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_NormalizePacketIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = ProudNetServerPluginPINVOKE.NetServerConfig_NormalizePacketIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void ThrowExceptionIfMessageLengthOutOfRange(int length) {
    ProudNetServerPluginPINVOKE.NetServerConfig_ThrowExceptionIfMessageLengthOutOfRange(length);
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double MessageRecovery_MessageIDAckIntervalMs {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_MessageRecovery_MessageIDAckIntervalMs_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ProudNetServerPluginPINVOKE.NetServerConfig_MessageRecovery_MessageIDAckIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool ListenSocket_RetryOnInvalidArgError {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_ListenSocket_RetryOnInvalidArgError_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_ListenSocket_RetryOnInvalidArgError_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool AllowOutputDebugString {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_AllowOutputDebugString_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_AllowOutputDebugString_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool DefensiveSendReadyListAdd {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefensiveSendReadyListAdd_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefensiveSendReadyListAdd_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool DefensiveCustomValueEvent {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_DefensiveCustomValueEvent_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_DefensiveCustomValueEvent_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnablePeriodicDetectingTransitionNetwork {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnablePeriodicDetectingTransitionNetwork_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnablePeriodicDetectingTransitionNetwork_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static long WaitForSendingDummyPacketIntervalMs {
    get {
      long ret = ProudNetServerPluginPINVOKE.NetServerConfig_WaitForSendingDummyPacketIntervalMs_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool EnableAutoConnectionRecoveryOnServer {
    set {
      ProudNetServerPluginPINVOKE.NetServerConfig_EnableAutoConnectionRecoveryOnServer_set(value);
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ProudNetServerPluginPINVOKE.NetServerConfig_EnableAutoConnectionRecoveryOnServer_get();
      if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NetServerConfig() : this(ProudNetServerPluginPINVOKE.new_NetServerConfig(), true) {
    if (ProudNetServerPluginPINVOKE.SWIGPendingException.Pending) throw ProudNetServerPluginPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int MessageMinLength = ProudNetServerPluginPINVOKE.NetServerConfig_MessageMinLength_get();
  public static readonly int MaxConnectionCount = ProudNetServerPluginPINVOKE.NetServerConfig_MaxConnectionCount_get();
  public static readonly int OrdinaryHeavyS2CMulticastCount = ProudNetServerPluginPINVOKE.NetServerConfig_OrdinaryHeavyS2CMulticastCount_get();
  public static readonly bool EnableTestSplitter = ProudNetServerPluginPINVOKE.NetServerConfig_EnableTestSplitter_get();
  public static readonly uint ClientListHashTableValue = ProudNetServerPluginPINVOKE.NetServerConfig_ClientListHashTableValue_get();
  public static readonly int RountTripLatencyTestMaxCount = ProudNetServerPluginPINVOKE.NetServerConfig_RountTripLatencyTestMaxCount_get();
}

}
