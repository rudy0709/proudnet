




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#include "CompactFieldMap.h"

#include "NetS2C_proxy.h"

namespace ProudS2C {


        
	bool Proxy::P2PGroup_MemberJoin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & groupHostID, const HostID & memberHostID, const ByteArray & message, const int & eventID, const ByteArray & p2pAESSessionKey, const ByteArray & p2pFastSessionKey, const int & p2pFirstFrameNumber, const Proud::Guid & connectionMagicNumber, const bool & allowDirectP2P, const bool & pairRecycled, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberJoin;
__msg.Write(__msgid); 
	
__msg << groupHostID;
__msg << memberHostID;
__msg << message;
__msg << eventID;
__msg << p2pAESSessionKey;
__msg << p2pFastSessionKey;
__msg << p2pFirstFrameNumber;
__msg << connectionMagicNumber;
__msg << allowDirectP2P;
__msg << pairRecycled;
__msg << reliableRTT;
__msg << unreliableRTT;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2PGroup_MemberJoin, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin);
	}

	bool Proxy::P2PGroup_MemberJoin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & groupHostID, const HostID & memberHostID, const ByteArray & message, const int & eventID, const ByteArray & p2pAESSessionKey, const ByteArray & p2pFastSessionKey, const int & p2pFirstFrameNumber, const Proud::Guid & connectionMagicNumber, const bool & allowDirectP2P, const bool & pairRecycled, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberJoin;
__msg.Write(__msgid); 
	
__msg << groupHostID;
__msg << memberHostID;
__msg << message;
__msg << eventID;
__msg << p2pAESSessionKey;
__msg << p2pFastSessionKey;
__msg << p2pFirstFrameNumber;
__msg << connectionMagicNumber;
__msg << allowDirectP2P;
__msg << pairRecycled;
__msg << reliableRTT;
__msg << unreliableRTT;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2PGroup_MemberJoin, (::Proud::RmiID)Rmi_P2PGroup_MemberJoin);
	}
        
	bool Proxy::RequestP2PHolepunch ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerID, const AddrPort & internalAddr, const AddrPort & externalAddr, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestP2PHolepunch;
__msg.Write(__msgid); 
	
__msg << remotePeerID;
__msg << internalAddr;
__msg << externalAddr;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestP2PHolepunch, (::Proud::RmiID)Rmi_RequestP2PHolepunch);
	}

	bool Proxy::RequestP2PHolepunch ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerID, const AddrPort & internalAddr, const AddrPort & externalAddr, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestP2PHolepunch;
__msg.Write(__msgid); 
	
__msg << remotePeerID;
__msg << internalAddr;
__msg << externalAddr;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestP2PHolepunch, (::Proud::RmiID)Rmi_RequestP2PHolepunch);
	}
        
	bool Proxy::P2P_NotifyDirectP2PDisconnected2 ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected2;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << reason;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_NotifyDirectP2PDisconnected2, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected2);
	}

	bool Proxy::P2P_NotifyDirectP2PDisconnected2 ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const ErrorType & reason, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected2;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << reason;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_NotifyDirectP2PDisconnected2, (::Proud::RmiID)Rmi_P2P_NotifyDirectP2PDisconnected2);
	}
        
	bool Proxy::P2P_NotifyP2PMemberOffline ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOffline;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_NotifyP2PMemberOffline, (::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOffline);
	}

	bool Proxy::P2P_NotifyP2PMemberOffline ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOffline;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_NotifyP2PMemberOffline, (::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOffline);
	}
        
	bool Proxy::P2P_NotifyP2PMemberOnline ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerHostID, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOnline;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2P_NotifyP2PMemberOnline, (::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOnline);
	}

	bool Proxy::P2P_NotifyP2PMemberOnline ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerHostID, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOnline;
__msg.Write(__msgid); 
	
__msg << remotePeerHostID;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2P_NotifyP2PMemberOnline, (::Proud::RmiID)Rmi_P2P_NotifyP2PMemberOnline);
	}
        
	bool Proxy::P2PGroup_MemberLeave ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & memberHostID, const HostID & groupHostID, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberLeave;
__msg.Write(__msgid); 
	
__msg << memberHostID;
__msg << groupHostID;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2PGroup_MemberLeave, (::Proud::RmiID)Rmi_P2PGroup_MemberLeave);
	}

	bool Proxy::P2PGroup_MemberLeave ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & memberHostID, const HostID & groupHostID, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PGroup_MemberLeave;
__msg.Write(__msgid); 
	
__msg << memberHostID;
__msg << groupHostID;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2PGroup_MemberLeave, (::Proud::RmiID)Rmi_P2PGroup_MemberLeave);
	}
        
	bool Proxy::NotifyDirectP2PEstablish ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & aPeer, const HostID & bPeer, const AddrPort & X0, const AddrPort & Y0, const AddrPort & Z0, const AddrPort & W0, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDirectP2PEstablish;
__msg.Write(__msgid); 
	
__msg << aPeer;
__msg << bPeer;
__msg << X0;
__msg << Y0;
__msg << Z0;
__msg << W0;
__msg << reliableRTT;
__msg << unreliableRTT;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDirectP2PEstablish, (::Proud::RmiID)Rmi_NotifyDirectP2PEstablish);
	}

	bool Proxy::NotifyDirectP2PEstablish ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & aPeer, const HostID & bPeer, const AddrPort & X0, const AddrPort & Y0, const AddrPort & Z0, const AddrPort & W0, const int & reliableRTT, const int & unreliableRTT, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDirectP2PEstablish;
__msg.Write(__msgid); 
	
__msg << aPeer;
__msg << bPeer;
__msg << X0;
__msg << Y0;
__msg << Z0;
__msg << W0;
__msg << reliableRTT;
__msg << unreliableRTT;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDirectP2PEstablish, (::Proud::RmiID)Rmi_NotifyDirectP2PEstablish);
	}
        
	bool Proxy::ReliablePong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & localTimeMs, const int & messageID, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReliablePong;
__msg.Write(__msgid); 
	
__msg << localTimeMs;
__msg << messageID;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReliablePong, (::Proud::RmiID)Rmi_ReliablePong);
	}

	bool Proxy::ReliablePong ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & localTimeMs, const int & messageID, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReliablePong;
__msg.Write(__msgid); 
	
__msg << localTimeMs;
__msg << messageID;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReliablePong, (::Proud::RmiID)Rmi_ReliablePong);
	}
        
	bool Proxy::EnableLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_EnableLog;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_EnableLog, (::Proud::RmiID)Rmi_EnableLog);
	}

	bool Proxy::EnableLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_EnableLog;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_EnableLog, (::Proud::RmiID)Rmi_EnableLog);
	}
        
	bool Proxy::DisableLog ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DisableLog;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_DisableLog, (::Proud::RmiID)Rmi_DisableLog);
	}

	bool Proxy::DisableLog ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DisableLog;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_DisableLog, (::Proud::RmiID)Rmi_DisableLog);
	}
        
	bool Proxy::NotifyUdpToTcpFallbackByServer ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByServer;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUdpToTcpFallbackByServer, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByServer);
	}

	bool Proxy::NotifyUdpToTcpFallbackByServer ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByServer;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUdpToTcpFallbackByServer, (::Proud::RmiID)Rmi_NotifyUdpToTcpFallbackByServer);
	}
        
	bool Proxy::NotifySpeedHackDetectorEnabled ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & enable)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySpeedHackDetectorEnabled;
__msg.Write(__msgid); 
	
__msg << enable;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySpeedHackDetectorEnabled, (::Proud::RmiID)Rmi_NotifySpeedHackDetectorEnabled);
	}

	bool Proxy::NotifySpeedHackDetectorEnabled ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & enable)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySpeedHackDetectorEnabled;
__msg.Write(__msgid); 
	
__msg << enable;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySpeedHackDetectorEnabled, (::Proud::RmiID)Rmi_NotifySpeedHackDetectorEnabled);
	}
        
	bool Proxy::ShutdownTcpAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShutdownTcpAck;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ShutdownTcpAck, (::Proud::RmiID)Rmi_ShutdownTcpAck);
	}

	bool Proxy::ShutdownTcpAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ShutdownTcpAck;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ShutdownTcpAck, (::Proud::RmiID)Rmi_ShutdownTcpAck);
	}
        
	bool Proxy::RequestAutoPrune ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAutoPrune;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestAutoPrune, (::Proud::RmiID)Rmi_RequestAutoPrune);
	}

	bool Proxy::RequestAutoPrune ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAutoPrune;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestAutoPrune, (::Proud::RmiID)Rmi_RequestAutoPrune);
	}
        
	bool Proxy::NewDirectP2PConnection ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const HostID & remotePeerID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NewDirectP2PConnection;
__msg.Write(__msgid); 
	
__msg << remotePeerID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NewDirectP2PConnection, (::Proud::RmiID)Rmi_NewDirectP2PConnection);
	}

	bool Proxy::NewDirectP2PConnection ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const HostID & remotePeerID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NewDirectP2PConnection;
__msg.Write(__msgid); 
	
__msg << remotePeerID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NewDirectP2PConnection, (::Proud::RmiID)Rmi_NewDirectP2PConnection);
	}
        
	bool Proxy::RequestMeasureSendSpeed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & enable)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestMeasureSendSpeed;
__msg.Write(__msgid); 
	
__msg << enable;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestMeasureSendSpeed, (::Proud::RmiID)Rmi_RequestMeasureSendSpeed);
	}

	bool Proxy::RequestMeasureSendSpeed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & enable)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestMeasureSendSpeed;
__msg.Write(__msgid); 
	
__msg << enable;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestMeasureSendSpeed, (::Proud::RmiID)Rmi_RequestMeasureSendSpeed);
	}
        
	bool Proxy::S2C_RequestCreateUdpSocket ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const NamedAddrPort & serverUdpAddr)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_S2C_RequestCreateUdpSocket;
__msg.Write(__msgid); 
	
__msg << serverUdpAddr;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_S2C_RequestCreateUdpSocket, (::Proud::RmiID)Rmi_S2C_RequestCreateUdpSocket);
	}

	bool Proxy::S2C_RequestCreateUdpSocket ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const NamedAddrPort & serverUdpAddr)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_S2C_RequestCreateUdpSocket;
__msg.Write(__msgid); 
	
__msg << serverUdpAddr;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_S2C_RequestCreateUdpSocket, (::Proud::RmiID)Rmi_S2C_RequestCreateUdpSocket);
	}
        
	bool Proxy::S2C_CreateUdpSocketAck ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & succeed, const NamedAddrPort & serverudpaddr)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_S2C_CreateUdpSocketAck;
__msg.Write(__msgid); 
	
__msg << succeed;
__msg << serverudpaddr;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_S2C_CreateUdpSocketAck, (::Proud::RmiID)Rmi_S2C_CreateUdpSocketAck);
	}

	bool Proxy::S2C_CreateUdpSocketAck ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & succeed, const NamedAddrPort & serverudpaddr)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_S2C_CreateUdpSocketAck;
__msg.Write(__msgid); 
	
__msg << succeed;
__msg << serverudpaddr;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_S2C_CreateUdpSocketAck, (::Proud::RmiID)Rmi_S2C_CreateUdpSocketAck);
	}
        
	bool Proxy::NotifyChangedTimeoutTime ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & val)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChangedTimeoutTime;
__msg.Write(__msgid); 
	
__msg << val;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyChangedTimeoutTime, (::Proud::RmiID)Rmi_NotifyChangedTimeoutTime);
	}

	bool Proxy::NotifyChangedTimeoutTime ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & val)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChangedTimeoutTime;
__msg.Write(__msgid); 
	
__msg << val;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyChangedTimeoutTime, (::Proud::RmiID)Rmi_NotifyChangedTimeoutTime);
	}
        
	bool Proxy::NotifyChangedAutoConnectionRecoveryTimeoutTimeMs ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & val)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs;
__msg.Write(__msgid); 
	
__msg << val;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs, (::Proud::RmiID)Rmi_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs);
	}

	bool Proxy::NotifyChangedAutoConnectionRecoveryTimeoutTimeMs ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & val)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs;
__msg.Write(__msgid); 
	
__msg << val;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs, (::Proud::RmiID)Rmi_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs);
	}
        
	bool Proxy::RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPong;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RoundTripLatencyPong, (::Proud::RmiID)Rmi_RoundTripLatencyPong);
	}

	bool Proxy::RoundTripLatencyPong ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPong;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RoundTripLatencyPong, (::Proud::RmiID)Rmi_RoundTripLatencyPong);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberJoin =_PNT("P2PGroup_MemberJoin");
#else
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberJoin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestP2PHolepunch =_PNT("RequestP2PHolepunch");
#else
const PNTCHAR* Proxy::RmiName_RequestP2PHolepunch =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_NotifyDirectP2PDisconnected2 =_PNT("P2P_NotifyDirectP2PDisconnected2");
#else
const PNTCHAR* Proxy::RmiName_P2P_NotifyDirectP2PDisconnected2 =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_NotifyP2PMemberOffline =_PNT("P2P_NotifyP2PMemberOffline");
#else
const PNTCHAR* Proxy::RmiName_P2P_NotifyP2PMemberOffline =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2P_NotifyP2PMemberOnline =_PNT("P2P_NotifyP2PMemberOnline");
#else
const PNTCHAR* Proxy::RmiName_P2P_NotifyP2PMemberOnline =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberLeave =_PNT("P2PGroup_MemberLeave");
#else
const PNTCHAR* Proxy::RmiName_P2PGroup_MemberLeave =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDirectP2PEstablish =_PNT("NotifyDirectP2PEstablish");
#else
const PNTCHAR* Proxy::RmiName_NotifyDirectP2PEstablish =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReliablePong =_PNT("ReliablePong");
#else
const PNTCHAR* Proxy::RmiName_ReliablePong =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_EnableLog =_PNT("EnableLog");
#else
const PNTCHAR* Proxy::RmiName_EnableLog =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_DisableLog =_PNT("DisableLog");
#else
const PNTCHAR* Proxy::RmiName_DisableLog =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUdpToTcpFallbackByServer =_PNT("NotifyUdpToTcpFallbackByServer");
#else
const PNTCHAR* Proxy::RmiName_NotifyUdpToTcpFallbackByServer =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySpeedHackDetectorEnabled =_PNT("NotifySpeedHackDetectorEnabled");
#else
const PNTCHAR* Proxy::RmiName_NotifySpeedHackDetectorEnabled =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ShutdownTcpAck =_PNT("ShutdownTcpAck");
#else
const PNTCHAR* Proxy::RmiName_ShutdownTcpAck =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestAutoPrune =_PNT("RequestAutoPrune");
#else
const PNTCHAR* Proxy::RmiName_RequestAutoPrune =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NewDirectP2PConnection =_PNT("NewDirectP2PConnection");
#else
const PNTCHAR* Proxy::RmiName_NewDirectP2PConnection =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestMeasureSendSpeed =_PNT("RequestMeasureSendSpeed");
#else
const PNTCHAR* Proxy::RmiName_RequestMeasureSendSpeed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_S2C_RequestCreateUdpSocket =_PNT("S2C_RequestCreateUdpSocket");
#else
const PNTCHAR* Proxy::RmiName_S2C_RequestCreateUdpSocket =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_S2C_CreateUdpSocketAck =_PNT("S2C_CreateUdpSocketAck");
#else
const PNTCHAR* Proxy::RmiName_S2C_CreateUdpSocketAck =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyChangedTimeoutTime =_PNT("NotifyChangedTimeoutTime");
#else
const PNTCHAR* Proxy::RmiName_NotifyChangedTimeoutTime =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs =_PNT("NotifyChangedAutoConnectionRecoveryTimeoutTimeMs");
#else
const PNTCHAR* Proxy::RmiName_NotifyChangedAutoConnectionRecoveryTimeoutTimeMs =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPong =_PNT("RoundTripLatencyPong");
#else
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPong =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_P2PGroup_MemberJoin;

}



