  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once

#include "CompactFieldMap.h"

#include "NetC2C_common.h"

     
namespace ProudC2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool HolsterP2PHolepunchTrial ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & )		{ 
			return false;
		} 

#define DECRMI_ProudC2C_HolsterP2PHolepunchTrial bool HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2C_HolsterP2PHolepunchTrial(DerivedClass) bool DerivedClass::HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define CALL_ProudC2C_HolsterP2PHolepunchTrial HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
#define PARAM_ProudC2C_HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)
               
		virtual bool ReportUdpMessageCount ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const CompactFieldMap & )		{ 
			return false;
		} 

#define DECRMI_ProudC2C_ReportUdpMessageCount bool ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap) PN_OVERRIDE

#define DEFRMI_ProudC2C_ReportUdpMessageCount(DerivedClass) bool DerivedClass::ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap)
#define CALL_ProudC2C_ReportUdpMessageCount ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap)
#define PARAM_ProudC2C_ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap)
               
		virtual bool RoundTripLatencyPing ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & )		{ 
			return false;
		} 

#define DECRMI_ProudC2C_RoundTripLatencyPing bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_OVERRIDE

#define DEFRMI_ProudC2C_RoundTripLatencyPing(DerivedClass) bool DerivedClass::RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define CALL_ProudC2C_RoundTripLatencyPing RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define PARAM_ProudC2C_RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
               
		virtual bool RoundTripLatencyPong ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & )		{ 
			return false;
		} 

#define DECRMI_ProudC2C_RoundTripLatencyPong bool RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) PN_OVERRIDE

#define DEFRMI_ProudC2C_RoundTripLatencyPong(DerivedClass) bool DerivedClass::RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define CALL_ProudC2C_RoundTripLatencyPong RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
#define PARAM_ProudC2C_RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_HolsterP2PHolepunchTrial;
		static const PNTCHAR* RmiName_ReportUdpMessageCount;
		static const PNTCHAR* RmiName_RoundTripLatencyPing;
		static const PNTCHAR* RmiName_RoundTripLatencyPong;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const CompactFieldMap & ) > HolsterP2PHolepunchTrial_Function;
		virtual bool HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap) 
		{ 
			if (HolsterP2PHolepunchTrial_Function==nullptr) 
				return true; 
			return HolsterP2PHolepunchTrial_Function(remote,rmiContext, fieldMap); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const CompactFieldMap & ) > ReportUdpMessageCount_Function;
		virtual bool ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap) 
		{ 
			if (ReportUdpMessageCount_Function==nullptr) 
				return true; 
			return ReportUdpMessageCount_Function(remote,rmiContext, udpSuccessCount, fieldMap); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & ) > RoundTripLatencyPing_Function;
		virtual bool RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) 
		{ 
			if (RoundTripLatencyPing_Function==nullptr) 
				return true; 
			return RoundTripLatencyPing_Function(remote,rmiContext, pingTime); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & ) > RoundTripLatencyPong_Function;
		virtual bool RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime) 
		{ 
			if (RoundTripLatencyPong_Function==nullptr) 
				return true; 
			return RoundTripLatencyPong_Function(remote,rmiContext, pingTime); 
		}

	};
#endif

}


