




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "AgentS2C_proxy.h"

namespace AgentS2C {


        
	bool Proxy::NotifyCredential ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & authentication)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCredential;
__msg.Write(__msgid); 
	
__msg << authentication;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyCredential, (::Proud::RmiID)Rmi_NotifyCredential);
	}

	bool Proxy::NotifyCredential ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & authentication)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyCredential;
__msg.Write(__msgid); 
	
__msg << authentication;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyCredential, (::Proud::RmiID)Rmi_NotifyCredential);
	}
        
	bool Proxy::RequestServerAppStop ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerAppStop;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestServerAppStop, (::Proud::RmiID)Rmi_RequestServerAppStop);
	}

	bool Proxy::RequestServerAppStop ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerAppStop;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestServerAppStop, (::Proud::RmiID)Rmi_RequestServerAppStop);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyCredential =_PNT("NotifyCredential");
#else
const PNTCHAR* Proxy::RmiName_NotifyCredential =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestServerAppStop =_PNT("RequestServerAppStop");
#else
const PNTCHAR* Proxy::RmiName_RequestServerAppStop =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyCredential;

}



