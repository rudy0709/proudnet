




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#include "CompactFieldMap.h"

#include "NetC2C_proxy.h"

namespace ProudC2C {


        
	bool Proxy::HolsterP2PHolepunchTrial ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_HolsterP2PHolepunchTrial, (::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial);
	}

	bool Proxy::HolsterP2PHolepunchTrial ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial;
__msg.Write(__msgid); 
	
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_HolsterP2PHolepunchTrial, (::Proud::RmiID)Rmi_HolsterP2PHolepunchTrial);
	}
        
	bool Proxy::ReportUdpMessageCount ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & udpSuccessCount, const CompactFieldMap & fieldMap)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportUdpMessageCount;
__msg.Write(__msgid); 
	
__msg << udpSuccessCount;
__msg << fieldMap;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReportUdpMessageCount, (::Proud::RmiID)Rmi_ReportUdpMessageCount);
	}

	bool Proxy::ReportUdpMessageCount ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & udpSuccessCount, const CompactFieldMap & fieldMap)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReportUdpMessageCount;
__msg.Write(__msgid); 
	
__msg << udpSuccessCount;
__msg << fieldMap;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReportUdpMessageCount, (::Proud::RmiID)Rmi_ReportUdpMessageCount);
	}
        
	bool Proxy::RoundTripLatencyPing ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPing;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RoundTripLatencyPing, (::Proud::RmiID)Rmi_RoundTripLatencyPing);
	}

	bool Proxy::RoundTripLatencyPing ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPing;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RoundTripLatencyPing, (::Proud::RmiID)Rmi_RoundTripLatencyPing);
	}
        
	bool Proxy::RoundTripLatencyPong ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & pingTime)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPong;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RoundTripLatencyPong, (::Proud::RmiID)Rmi_RoundTripLatencyPong);
	}

	bool Proxy::RoundTripLatencyPong ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & pingTime)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RoundTripLatencyPong;
__msg.Write(__msgid); 
	
__msg << pingTime;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RoundTripLatencyPong, (::Proud::RmiID)Rmi_RoundTripLatencyPong);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_HolsterP2PHolepunchTrial =_PNT("HolsterP2PHolepunchTrial");
#else
const PNTCHAR* Proxy::RmiName_HolsterP2PHolepunchTrial =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReportUdpMessageCount =_PNT("ReportUdpMessageCount");
#else
const PNTCHAR* Proxy::RmiName_ReportUdpMessageCount =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPing =_PNT("RoundTripLatencyPing");
#else
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPing =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPong =_PNT("RoundTripLatencyPong");
#else
const PNTCHAR* Proxy::RmiName_RoundTripLatencyPong =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_HolsterP2PHolepunchTrial;

}



