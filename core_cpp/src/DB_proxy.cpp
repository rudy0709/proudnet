




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "DB_proxy.h"

namespace DB2C2S {


        
	bool Proxy::RequestDbCacheClientLogon ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & authenticationKey)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDbCacheClientLogon;
__msg.Write(__msgid); 
	
__msg << authenticationKey;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestDbCacheClientLogon, (::Proud::RmiID)Rmi_RequestDbCacheClientLogon);
	}

	bool Proxy::RequestDbCacheClientLogon ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & authenticationKey)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDbCacheClientLogon;
__msg.Write(__msgid); 
	
__msg << authenticationKey;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestDbCacheClientLogon, (::Proud::RmiID)Rmi_RequestDbCacheClientLogon);
	}
        
	bool Proxy::RequestExclusiveLoadDataByFieldNameAndValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::String & fieldName, const Proud::CVariant & cmpValue, const int64_t & tag, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << fieldName;
__msg << cmpValue;
__msg << tag;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByFieldNameAndValue, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue);
	}

	bool Proxy::RequestExclusiveLoadDataByFieldNameAndValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::String & fieldName, const Proud::CVariant & cmpValue, const int64_t & tag, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << fieldName;
__msg << cmpValue;
__msg << tag;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByFieldNameAndValue, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByFieldNameAndValue);
	}
        
	bool Proxy::RequestExclusiveLoadDataByGuid ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const int64_t & tag, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << tag;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByGuid, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid);
	}

	bool Proxy::RequestExclusiveLoadDataByGuid ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const int64_t & tag, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << tag;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByGuid, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByGuid);
	}
        
	bool Proxy::RequestExclusiveLoadDataByQuery ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::String & queryString, const int64_t & tag, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << queryString;
__msg << tag;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByQuery, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery);
	}

	bool Proxy::RequestExclusiveLoadDataByQuery ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::String & queryString, const int64_t & tag, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << queryString;
__msg << tag;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestExclusiveLoadDataByQuery, (::Proud::RmiID)Rmi_RequestExclusiveLoadDataByQuery);
	}
        
	bool Proxy::RequestExclusiveLoadNewData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::ByteArray & addDataBlock, const int64_t & tag, const bool & transaction)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadNewData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << addDataBlock;
__msg << tag;
__msg << transaction;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestExclusiveLoadNewData, (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData);
	}

	bool Proxy::RequestExclusiveLoadNewData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::ByteArray & addDataBlock, const int64_t & tag, const bool & transaction)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestExclusiveLoadNewData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << addDataBlock;
__msg << tag;
__msg << transaction;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestExclusiveLoadNewData, (::Proud::RmiID)Rmi_RequestExclusiveLoadNewData);
	}
        
	bool Proxy::RequestUnloadDataBySessionGuid ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::ByteArray & messageToNextLoader)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << messageToNextLoader;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUnloadDataBySessionGuid, (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid);
	}

	bool Proxy::RequestUnloadDataBySessionGuid ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::ByteArray & messageToNextLoader)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << messageToNextLoader;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUnloadDataBySessionGuid, (::Proud::RmiID)Rmi_RequestUnloadDataBySessionGuid);
	}
        
	bool Proxy::DenyUnloadData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::ByteArray & messageToRequester)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DenyUnloadData;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << messageToRequester;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_DenyUnloadData, (::Proud::RmiID)Rmi_DenyUnloadData);
	}

	bool Proxy::DenyUnloadData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::ByteArray & messageToRequester)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_DenyUnloadData;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << messageToRequester;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_DenyUnloadData, (::Proud::RmiID)Rmi_DenyUnloadData);
	}
        
	bool Proxy::RequestForceCompleteUnload ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestForceCompleteUnload;
__msg.Write(__msgid); 
	
__msg << rootUUID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestForceCompleteUnload, (::Proud::RmiID)Rmi_RequestForceCompleteUnload);
	}

	bool Proxy::RequestForceCompleteUnload ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestForceCompleteUnload;
__msg.Write(__msgid); 
	
__msg << rootUUID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestForceCompleteUnload, (::Proud::RmiID)Rmi_RequestForceCompleteUnload);
	}
        
	bool Proxy::RequestAddData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const int64_t & tag, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << tag;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestAddData, (::Proud::RmiID)Rmi_RequestAddData);
	}

	bool Proxy::RequestAddData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const int64_t & tag, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << tag;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestAddData, (::Proud::RmiID)Rmi_RequestAddData);
	}
        
	bool Proxy::RequestUpdateData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const int64_t & tag, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUpdateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << tag;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUpdateData, (::Proud::RmiID)Rmi_RequestUpdateData);
	}

	bool Proxy::RequestUpdateData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const int64_t & tag, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUpdateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << tag;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUpdateData, (::Proud::RmiID)Rmi_RequestUpdateData);
	}
        
	bool Proxy::RequestRemoveData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const int64_t & tag, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << tag;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestRemoveData, (::Proud::RmiID)Rmi_RequestRemoveData);
	}

	bool Proxy::RequestRemoveData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const int64_t & tag, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << tag;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestRemoveData, (::Proud::RmiID)Rmi_RequestRemoveData);
	}
        
	bool Proxy::RequestUpdateDataList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & changeBlock, const int64_t & tag, const bool & transaction, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUpdateDataList;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << changeBlock;
__msg << tag;
__msg << transaction;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestUpdateDataList, (::Proud::RmiID)Rmi_RequestUpdateDataList);
	}

	bool Proxy::RequestUpdateDataList ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & changeBlock, const int64_t & tag, const bool & transaction, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestUpdateDataList;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << changeBlock;
__msg << tag;
__msg << transaction;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestUpdateDataList, (::Proud::RmiID)Rmi_RequestUpdateDataList);
	}
        
	bool Proxy::AddData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const bool & writeDbmsImmediately)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_AddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << writeDbmsImmediately;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_AddData, (::Proud::RmiID)Rmi_AddData);
	}

	bool Proxy::AddData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const bool & writeDbmsImmediately)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_AddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << writeDbmsImmediately;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_AddData, (::Proud::RmiID)Rmi_AddData);
	}
        
	bool Proxy::UpdateData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & writeDbmsImmediately)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UpdateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << writeDbmsImmediately;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_UpdateData, (::Proud::RmiID)Rmi_UpdateData);
	}

	bool Proxy::UpdateData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & writeDbmsImmediately)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UpdateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << writeDbmsImmediately;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_UpdateData, (::Proud::RmiID)Rmi_UpdateData);
	}
        
	bool Proxy::RemoveData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const bool & writeDbmsImmediately)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << writeDbmsImmediately;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RemoveData, (::Proud::RmiID)Rmi_RemoveData);
	}

	bool Proxy::RemoveData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const bool & writeDbmsImmediately)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << writeDbmsImmediately;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RemoveData, (::Proud::RmiID)Rmi_RemoveData);
	}
        
	bool Proxy::UpdateDataList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & transactional, const bool & writeDbmsImmediately)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UpdateDataList;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << transactional;
__msg << writeDbmsImmediately;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_UpdateDataList, (::Proud::RmiID)Rmi_UpdateDataList);
	}

	bool Proxy::UpdateDataList ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & transactional, const bool & writeDbmsImmediately)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_UpdateDataList;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << transactional;
__msg << writeDbmsImmediately;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_UpdateDataList, (::Proud::RmiID)Rmi_UpdateDataList);
	}
        
	bool Proxy::MoveData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::Guid & destRootUUID, const Proud::Guid & destNodeUUID, const bool & writeDbmsImmediately)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MoveData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << destRootUUID;
__msg << destNodeUUID;
__msg << writeDbmsImmediately;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_MoveData, (::Proud::RmiID)Rmi_MoveData);
	}

	bool Proxy::MoveData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::Guid & destRootUUID, const Proud::Guid & destNodeUUID, const bool & writeDbmsImmediately)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_MoveData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << destRootUUID;
__msg << destNodeUUID;
__msg << writeDbmsImmediately;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_MoveData, (::Proud::RmiID)Rmi_MoveData);
	}
        
	bool Proxy::RequestNonExclusiveSnapshotDataByFieldNameAndValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::String & fieldName, const Proud::CVariant & cmpValue, const int64_t & tag)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << fieldName;
__msg << cmpValue;
__msg << tag;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue);
	}

	bool Proxy::RequestNonExclusiveSnapshotDataByFieldNameAndValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::String & fieldName, const Proud::CVariant & cmpValue, const int64_t & tag)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << fieldName;
__msg << cmpValue;
__msg << tag;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByFieldNameAndValue);
	}
        
	bool Proxy::RequestNonExclusiveSnapshotDataByGuid ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const int64_t & tag)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << tag;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByGuid, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid);
	}

	bool Proxy::RequestNonExclusiveSnapshotDataByGuid ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const int64_t & tag)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << tag;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByGuid, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByGuid);
	}
        
	bool Proxy::RequestNonExclusiveSnapshotDataByQuery ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::String & queryString, const int64_t & tag)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << queryString;
__msg << tag;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByQuery, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery);
	}

	bool Proxy::RequestNonExclusiveSnapshotDataByQuery ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::String & queryString, const int64_t & tag)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << queryString;
__msg << tag;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveSnapshotDataByQuery, (::Proud::RmiID)Rmi_RequestNonExclusiveSnapshotDataByQuery);
	}
        
	bool Proxy::RequestNonExclusiveAddData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const int64_t & tag, const Proud::ByteArray & messageToLoader)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveAddData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveAddData, (::Proud::RmiID)Rmi_RequestNonExclusiveAddData);
	}

	bool Proxy::RequestNonExclusiveAddData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & ownerUUID, const Proud::ByteArray & addDataBlock, const int64_t & tag, const Proud::ByteArray & messageToLoader)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveAddData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << ownerUUID;
__msg << addDataBlock;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveAddData, (::Proud::RmiID)Rmi_RequestNonExclusiveAddData);
	}
        
	bool Proxy::RequestNonExclusiveRemoveData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const int64_t & tag, const Proud::ByteArray & messageToLoader)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << removeUUID;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveRemoveData, (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData);
	}

	bool Proxy::RequestNonExclusiveRemoveData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const int64_t & tag, const Proud::ByteArray & messageToLoader)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << removeUUID;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveRemoveData, (::Proud::RmiID)Rmi_RequestNonExclusiveRemoveData);
	}
        
	bool Proxy::RequestNonExclusiveSetValueIf ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::String & propertyName, const Proud::CVariant & newValue, const int & compareType, const Proud::CVariant & compareValue, const int64_t & tag, const Proud::ByteArray & messageToLoader)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << propertyName;
__msg << newValue;
__msg << compareType;
__msg << compareValue;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveSetValueIf, (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf);
	}

	bool Proxy::RequestNonExclusiveSetValueIf ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::String & propertyName, const Proud::CVariant & newValue, const int & compareType, const Proud::CVariant & compareValue, const int64_t & tag, const Proud::ByteArray & messageToLoader)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << propertyName;
__msg << newValue;
__msg << compareType;
__msg << compareValue;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveSetValueIf, (::Proud::RmiID)Rmi_RequestNonExclusiveSetValueIf);
	}
        
	bool Proxy::RequestNonExclusiveModifyValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::String & propertyName, const int & operType, const Proud::CVariant & value, const int64_t & tag, const Proud::ByteArray & messageToLoader)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << propertyName;
__msg << operType;
__msg << value;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestNonExclusiveModifyValue, (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue);
	}

	bool Proxy::RequestNonExclusiveModifyValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & rootTableName, const Proud::Guid & rootUUID, const Proud::Guid & nodeUUID, const Proud::String & propertyName, const int & operType, const Proud::CVariant & value, const int64_t & tag, const Proud::ByteArray & messageToLoader)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue;
__msg.Write(__msgid); 
	
__msg << rootTableName;
__msg << rootUUID;
__msg << nodeUUID;
__msg << propertyName;
__msg << operType;
__msg << value;
__msg << tag;
__msg << messageToLoader;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestNonExclusiveModifyValue, (::Proud::RmiID)Rmi_RequestNonExclusiveModifyValue);
	}
        
	bool Proxy::RequestIsolateData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::String & rootTableName, const Proud::Guid & sessionGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestIsolateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << rootTableName;
__msg << sessionGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestIsolateData, (::Proud::RmiID)Rmi_RequestIsolateData);
	}

	bool Proxy::RequestIsolateData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::String & rootTableName, const Proud::Guid & sessionGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestIsolateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << rootTableName;
__msg << sessionGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestIsolateData, (::Proud::RmiID)Rmi_RequestIsolateData);
	}
        
	bool Proxy::RequestDeisolateData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::String & filterText, const Proud::Guid & sessionGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDeisolateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << filterText;
__msg << sessionGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestDeisolateData, (::Proud::RmiID)Rmi_RequestDeisolateData);
	}

	bool Proxy::RequestDeisolateData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::String & filterText, const Proud::Guid & sessionGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestDeisolateData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << filterText;
__msg << sessionGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestDeisolateData, (::Proud::RmiID)Rmi_RequestDeisolateData);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestDbCacheClientLogon =_PNT("RequestDbCacheClientLogon");
#else
const PNTCHAR* Proxy::RmiName_RequestDbCacheClientLogon =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByFieldNameAndValue =_PNT("RequestExclusiveLoadDataByFieldNameAndValue");
#else
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByFieldNameAndValue =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByGuid =_PNT("RequestExclusiveLoadDataByGuid");
#else
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByGuid =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByQuery =_PNT("RequestExclusiveLoadDataByQuery");
#else
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadDataByQuery =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadNewData =_PNT("RequestExclusiveLoadNewData");
#else
const PNTCHAR* Proxy::RmiName_RequestExclusiveLoadNewData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUnloadDataBySessionGuid =_PNT("RequestUnloadDataBySessionGuid");
#else
const PNTCHAR* Proxy::RmiName_RequestUnloadDataBySessionGuid =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_DenyUnloadData =_PNT("DenyUnloadData");
#else
const PNTCHAR* Proxy::RmiName_DenyUnloadData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestForceCompleteUnload =_PNT("RequestForceCompleteUnload");
#else
const PNTCHAR* Proxy::RmiName_RequestForceCompleteUnload =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestAddData =_PNT("RequestAddData");
#else
const PNTCHAR* Proxy::RmiName_RequestAddData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUpdateData =_PNT("RequestUpdateData");
#else
const PNTCHAR* Proxy::RmiName_RequestUpdateData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestRemoveData =_PNT("RequestRemoveData");
#else
const PNTCHAR* Proxy::RmiName_RequestRemoveData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestUpdateDataList =_PNT("RequestUpdateDataList");
#else
const PNTCHAR* Proxy::RmiName_RequestUpdateDataList =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_AddData =_PNT("AddData");
#else
const PNTCHAR* Proxy::RmiName_AddData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_UpdateData =_PNT("UpdateData");
#else
const PNTCHAR* Proxy::RmiName_UpdateData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RemoveData =_PNT("RemoveData");
#else
const PNTCHAR* Proxy::RmiName_RemoveData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_UpdateDataList =_PNT("UpdateDataList");
#else
const PNTCHAR* Proxy::RmiName_UpdateDataList =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_MoveData =_PNT("MoveData");
#else
const PNTCHAR* Proxy::RmiName_MoveData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue =_PNT("RequestNonExclusiveSnapshotDataByFieldNameAndValue");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByFieldNameAndValue =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByGuid =_PNT("RequestNonExclusiveSnapshotDataByGuid");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByGuid =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByQuery =_PNT("RequestNonExclusiveSnapshotDataByQuery");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSnapshotDataByQuery =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveAddData =_PNT("RequestNonExclusiveAddData");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveAddData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveRemoveData =_PNT("RequestNonExclusiveRemoveData");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveRemoveData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSetValueIf =_PNT("RequestNonExclusiveSetValueIf");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveSetValueIf =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveModifyValue =_PNT("RequestNonExclusiveModifyValue");
#else
const PNTCHAR* Proxy::RmiName_RequestNonExclusiveModifyValue =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestIsolateData =_PNT("RequestIsolateData");
#else
const PNTCHAR* Proxy::RmiName_RequestIsolateData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestDeisolateData =_PNT("RequestDeisolateData");
#else
const PNTCHAR* Proxy::RmiName_RequestDeisolateData =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestDbCacheClientLogon;

}


namespace DB2S2C {


        
	bool Proxy::NotifyDbCacheClientLogonFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDbCacheClientLogonFailed, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed);
	}

	bool Proxy::NotifyDbCacheClientLogonFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDbCacheClientLogonFailed, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonFailed);
	}
        
	bool Proxy::NotifyDbCacheClientLogonSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDbCacheClientLogonSuccess, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess);
	}

	bool Proxy::NotifyDbCacheClientLogonSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDbCacheClientLogonSuccess, (::Proud::RmiID)Rmi_NotifyDbCacheClientLogonSuccess);
	}
        
	bool Proxy::NotifyLoadDataComplete ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExclusive, const int64_t & tag, const Proud::CFastArray<Proud::ByteArray> & successList_loadedData, const Proud::CFastArray<Proud::Guid> & successList_sessionGuid, const Proud::CFastArray<Proud::ByteArray> & successList_message, const Proud::CFastArray<Proud::Guid> & failList_uuid, const Proud::CFastArray<Proud::ErrorType> & failList_reason, const Proud::CFastArray<Proud::String> & failList_comment, const Proud::CFastArray<int32_t> & failList_hresult, const Proud::CFastArray<Proud::ByteArray> & failList_message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoadDataComplete;
__msg.Write(__msgid); 
	
__msg << isExclusive;
__msg << tag;
__msg << successList_loadedData;
__msg << successList_sessionGuid;
__msg << successList_message;
__msg << failList_uuid;
__msg << failList_reason;
__msg << failList_comment;
__msg << failList_hresult;
__msg << failList_message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoadDataComplete, (::Proud::RmiID)Rmi_NotifyLoadDataComplete);
	}

	bool Proxy::NotifyLoadDataComplete ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & isExclusive, const int64_t & tag, const Proud::CFastArray<Proud::ByteArray> & successList_loadedData, const Proud::CFastArray<Proud::Guid> & successList_sessionGuid, const Proud::CFastArray<Proud::ByteArray> & successList_message, const Proud::CFastArray<Proud::Guid> & failList_uuid, const Proud::CFastArray<Proud::ErrorType> & failList_reason, const Proud::CFastArray<Proud::String> & failList_comment, const Proud::CFastArray<int32_t> & failList_hresult, const Proud::CFastArray<Proud::ByteArray> & failList_message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoadDataComplete;
__msg.Write(__msgid); 
	
__msg << isExclusive;
__msg << tag;
__msg << successList_loadedData;
__msg << successList_sessionGuid;
__msg << successList_message;
__msg << failList_uuid;
__msg << failList_reason;
__msg << failList_comment;
__msg << failList_hresult;
__msg << failList_message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoadDataComplete, (::Proud::RmiID)Rmi_NotifyLoadDataComplete);
	}
        
	bool Proxy::NotifyDataUnloadRequested ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::CFastArray<Proud::Guid> & sessionList, const Proud::CFastArray<Proud::ByteArray> & messageList, const bool & commonMessage, const int64_t & unloadRequestTimeoutTimeMs)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDataUnloadRequested;
__msg.Write(__msgid); 
	
__msg << sessionList;
__msg << messageList;
__msg << commonMessage;
__msg << unloadRequestTimeoutTimeMs;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDataUnloadRequested, (::Proud::RmiID)Rmi_NotifyDataUnloadRequested);
	}

	bool Proxy::NotifyDataUnloadRequested ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::CFastArray<Proud::Guid> & sessionList, const Proud::CFastArray<Proud::ByteArray> & messageList, const bool & commonMessage, const int64_t & unloadRequestTimeoutTimeMs)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDataUnloadRequested;
__msg.Write(__msgid); 
	
__msg << sessionList;
__msg << messageList;
__msg << commonMessage;
__msg << unloadRequestTimeoutTimeMs;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDataUnloadRequested, (::Proud::RmiID)Rmi_NotifyDataUnloadRequested);
	}
        
	bool Proxy::NotifyUnloadRequestTimeoutTimeMs ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & unloadRequestTimeoutTimeMs)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs;
__msg.Write(__msgid); 
	
__msg << unloadRequestTimeoutTimeMs;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUnloadRequestTimeoutTimeMs, (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs);
	}

	bool Proxy::NotifyUnloadRequestTimeoutTimeMs ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & unloadRequestTimeoutTimeMs)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs;
__msg.Write(__msgid); 
	
__msg << unloadRequestTimeoutTimeMs;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUnloadRequestTimeoutTimeMs, (::Proud::RmiID)Rmi_NotifyUnloadRequestTimeoutTimeMs);
	}
        
	bool Proxy::NotifyAddDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAddDataFailed, (::Proud::RmiID)Rmi_NotifyAddDataFailed);
	}

	bool Proxy::NotifyAddDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAddDataFailed, (::Proud::RmiID)Rmi_NotifyAddDataFailed);
	}
        
	bool Proxy::NotifyAddDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << addDataBlock;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAddDataSuccess, (::Proud::RmiID)Rmi_NotifyAddDataSuccess);
	}

	bool Proxy::NotifyAddDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << addDataBlock;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAddDataSuccess, (::Proud::RmiID)Rmi_NotifyAddDataSuccess);
	}
        
	bool Proxy::NotifyUpdateDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUpdateDataFailed, (::Proud::RmiID)Rmi_NotifyUpdateDataFailed);
	}

	bool Proxy::NotifyUpdateDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUpdateDataFailed, (::Proud::RmiID)Rmi_NotifyUpdateDataFailed);
	}
        
	bool Proxy::NotifyUpdateDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updataDataBlock, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updataDataBlock;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUpdateDataSuccess, (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess);
	}

	bool Proxy::NotifyUpdateDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updataDataBlock, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updataDataBlock;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUpdateDataSuccess, (::Proud::RmiID)Rmi_NotifyUpdateDataSuccess);
	}
        
	bool Proxy::NotifyUpdateDataListFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataListFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUpdateDataListFailed, (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed);
	}

	bool Proxy::NotifyUpdateDataListFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataListFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUpdateDataListFailed, (::Proud::RmiID)Rmi_NotifyUpdateDataListFailed);
	}
        
	bool Proxy::NotifyUpdateDataListSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyUpdateDataListSuccess, (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess);
	}

	bool Proxy::NotifyUpdateDataListSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyUpdateDataListSuccess, (::Proud::RmiID)Rmi_NotifyUpdateDataListSuccess);
	}
        
	bool Proxy::NotifyRemoveDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyRemoveDataFailed, (::Proud::RmiID)Rmi_NotifyRemoveDataFailed);
	}

	bool Proxy::NotifyRemoveDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyRemoveDataFailed, (::Proud::RmiID)Rmi_NotifyRemoveDataFailed);
	}
        
	bool Proxy::NotifyRemoveDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::Guid & removedUUID, const bool & blocked)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << removedUUID;
__msg << blocked;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyRemoveDataSuccess, (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess);
	}

	bool Proxy::NotifyRemoveDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::Guid & removedUUID, const bool & blocked)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << removedUUID;
__msg << blocked;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyRemoveDataSuccess, (::Proud::RmiID)Rmi_NotifyRemoveDataSuccess);
	}
        
	bool Proxy::NotifyNonExclusiveAddDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveAddDataFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed);
	}

	bool Proxy::NotifyNonExclusiveAddDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveAddDataFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataFailed);
	}
        
	bool Proxy::NotifyNonExclusiveAddDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << addDataBlock;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveAddDataSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess);
	}

	bool Proxy::NotifyNonExclusiveAddDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << addDataBlock;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveAddDataSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveAddDataSuccess);
	}
        
	bool Proxy::NotifySomeoneAddData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock, const Proud::ByteArray & message, const Proud::Guid & destParentUUID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneAddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << addDataBlock;
__msg << message;
__msg << destParentUUID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySomeoneAddData, (::Proud::RmiID)Rmi_NotifySomeoneAddData);
	}

	bool Proxy::NotifySomeoneAddData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & addDataBlock, const Proud::ByteArray & message, const Proud::Guid & destParentUUID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneAddData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << addDataBlock;
__msg << message;
__msg << destParentUUID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySomeoneAddData, (::Proud::RmiID)Rmi_NotifySomeoneAddData);
	}
        
	bool Proxy::NotifyNonExclusiveRemoveDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveRemoveDataFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed);
	}

	bool Proxy::NotifyNonExclusiveRemoveDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveRemoveDataFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataFailed);
	}
        
	bool Proxy::NotifyNonExclusiveRemoveDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << removeUUID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveRemoveDataSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess);
	}

	bool Proxy::NotifyNonExclusiveRemoveDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << removeUUID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveRemoveDataSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveRemoveDataSuccess);
	}
        
	bool Proxy::NotifySomeoneRemoveData ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneRemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySomeoneRemoveData, (::Proud::RmiID)Rmi_NotifySomeoneRemoveData);
	}

	bool Proxy::NotifySomeoneRemoveData ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::Guid & removeUUID, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneRemoveData;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << removeUUID;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySomeoneRemoveData, (::Proud::RmiID)Rmi_NotifySomeoneRemoveData);
	}
        
	bool Proxy::NotifyNonExclusiveSetValueFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveSetValueFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed);
	}

	bool Proxy::NotifyNonExclusiveSetValueFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveSetValueFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueFailed);
	}
        
	bool Proxy::NotifyNonExclusiveSetValueSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveSetValueSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess);
	}

	bool Proxy::NotifyNonExclusiveSetValueSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveSetValueSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveSetValueSuccess);
	}
        
	bool Proxy::NotifySomeoneSetValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneSetValue;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySomeoneSetValue, (::Proud::RmiID)Rmi_NotifySomeoneSetValue);
	}

	bool Proxy::NotifySomeoneSetValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneSetValue;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySomeoneSetValue, (::Proud::RmiID)Rmi_NotifySomeoneSetValue);
	}
        
	bool Proxy::NotifyNonExclusiveModifyValueFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveModifyValueFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed);
	}

	bool Proxy::NotifyNonExclusiveModifyValueFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ErrorType & reason, const Proud::String & comment, const int32_t & hresult, const Proud::String & source)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << reason;
__msg << comment;
__msg << hresult;
__msg << source;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveModifyValueFailed, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueFailed);
	}
        
	bool Proxy::NotifyNonExclusiveModifyValueSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyNonExclusiveModifyValueSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess);
	}

	bool Proxy::NotifyNonExclusiveModifyValueSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << rootUUID;
__msg << updateDataBlock;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyNonExclusiveModifyValueSuccess, (::Proud::RmiID)Rmi_NotifyNonExclusiveModifyValueSuccess);
	}
        
	bool Proxy::NotifySomeoneModifyValue ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const Proud::ByteArray & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneModifyValue;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifySomeoneModifyValue, (::Proud::RmiID)Rmi_NotifySomeoneModifyValue);
	}

	bool Proxy::NotifySomeoneModifyValue ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & rootUUID, const Proud::ByteArray & updateDataBlock, const Proud::ByteArray & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifySomeoneModifyValue;
__msg.Write(__msgid); 
	
__msg << rootUUID;
__msg << updateDataBlock;
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifySomeoneModifyValue, (::Proud::RmiID)Rmi_NotifySomeoneModifyValue);
	}
        
	bool Proxy::NotifyWarning ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::ErrorType & errorType, const Proud::ErrorType & detailtype, const Proud::String & comment)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyWarning;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << detailtype;
__msg << comment;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyWarning, (::Proud::RmiID)Rmi_NotifyWarning);
	}

	bool Proxy::NotifyWarning ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::ErrorType & errorType, const Proud::ErrorType & detailtype, const Proud::String & comment)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyWarning;
__msg.Write(__msgid); 
	
__msg << errorType;
__msg << detailtype;
__msg << comment;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyWarning, (::Proud::RmiID)Rmi_NotifyWarning);
	}
        
	bool Proxy::NotifyDbmsWriteDone ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::DbmsWritePropNodePendType & type, const Proud::Guid & loadeeGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbmsWriteDone;
__msg.Write(__msgid); 
	
__msg << type;
__msg << loadeeGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDbmsWriteDone, (::Proud::RmiID)Rmi_NotifyDbmsWriteDone);
	}

	bool Proxy::NotifyDbmsWriteDone ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::DbmsWritePropNodePendType & type, const Proud::Guid & loadeeGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbmsWriteDone;
__msg.Write(__msgid); 
	
__msg << type;
__msg << loadeeGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDbmsWriteDone, (::Proud::RmiID)Rmi_NotifyDbmsWriteDone);
	}
        
	bool Proxy::NotifyDbmsAccessError ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & tag, const Proud::ByteArray & message, const Proud::String & comment)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbmsAccessError;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << message;
__msg << comment;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDbmsAccessError, (::Proud::RmiID)Rmi_NotifyDbmsAccessError);
	}

	bool Proxy::NotifyDbmsAccessError ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & tag, const Proud::ByteArray & message, const Proud::String & comment)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDbmsAccessError;
__msg.Write(__msgid); 
	
__msg << tag;
__msg << message;
__msg << comment;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDbmsAccessError, (::Proud::RmiID)Rmi_NotifyDbmsAccessError);
	}
        
	bool Proxy::NotifyIsolateDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::Guid & rootUUID, const Proud::ByteArray & dataBlock)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyIsolateDataSuccess;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootUUID;
__msg << dataBlock;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyIsolateDataSuccess, (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess);
	}

	bool Proxy::NotifyIsolateDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::Guid & rootUUID, const Proud::ByteArray & dataBlock)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyIsolateDataSuccess;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootUUID;
__msg << dataBlock;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyIsolateDataSuccess, (::Proud::RmiID)Rmi_NotifyIsolateDataSuccess);
	}
        
	bool Proxy::NotifyIsolateDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::ErrorType & reason, const Proud::String & comment)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyIsolateDataFailed;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << reason;
__msg << comment;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyIsolateDataFailed, (::Proud::RmiID)Rmi_NotifyIsolateDataFailed);
	}

	bool Proxy::NotifyIsolateDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::ErrorType & reason, const Proud::String & comment)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyIsolateDataFailed;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << reason;
__msg << comment;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyIsolateDataFailed, (::Proud::RmiID)Rmi_NotifyIsolateDataFailed);
	}
        
	bool Proxy::NotifyDeisolateDataSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::Guid & rootUUID, const Proud::ByteArray & dataBlock)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootUUID;
__msg << dataBlock;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeisolateDataSuccess, (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess);
	}

	bool Proxy::NotifyDeisolateDataSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::Guid & rootUUID, const Proud::ByteArray & dataBlock)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootUUID;
__msg << dataBlock;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeisolateDataSuccess, (::Proud::RmiID)Rmi_NotifyDeisolateDataSuccess);
	}
        
	bool Proxy::NotifyDeisolateDataFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::ErrorType & reason, const Proud::String & comment)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeisolateDataFailed;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << reason;
__msg << comment;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDeisolateDataFailed, (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed);
	}

	bool Proxy::NotifyDeisolateDataFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::ErrorType & reason, const Proud::String & comment)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDeisolateDataFailed;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << reason;
__msg << comment;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDeisolateDataFailed, (::Proud::RmiID)Rmi_NotifyDeisolateDataFailed);
	}
        
	bool Proxy::NotifyDataForceUnloaded ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::Guid & sessionGuid, const Proud::Guid & rootGuid)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDataForceUnloaded;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootGuid;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyDataForceUnloaded, (::Proud::RmiID)Rmi_NotifyDataForceUnloaded);
	}

	bool Proxy::NotifyDataForceUnloaded ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::Guid & sessionGuid, const Proud::Guid & rootGuid)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyDataForceUnloaded;
__msg.Write(__msgid); 
	
__msg << sessionGuid;
__msg << rootGuid;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyDataForceUnloaded, (::Proud::RmiID)Rmi_NotifyDataForceUnloaded);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDbCacheClientLogonFailed =_PNT("NotifyDbCacheClientLogonFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyDbCacheClientLogonFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDbCacheClientLogonSuccess =_PNT("NotifyDbCacheClientLogonSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyDbCacheClientLogonSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoadDataComplete =_PNT("NotifyLoadDataComplete");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoadDataComplete =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDataUnloadRequested =_PNT("NotifyDataUnloadRequested");
#else
const PNTCHAR* Proxy::RmiName_NotifyDataUnloadRequested =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUnloadRequestTimeoutTimeMs =_PNT("NotifyUnloadRequestTimeoutTimeMs");
#else
const PNTCHAR* Proxy::RmiName_NotifyUnloadRequestTimeoutTimeMs =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAddDataFailed =_PNT("NotifyAddDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyAddDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAddDataSuccess =_PNT("NotifyAddDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyAddDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataFailed =_PNT("NotifyUpdateDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataSuccess =_PNT("NotifyUpdateDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataListFailed =_PNT("NotifyUpdateDataListFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataListFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataListSuccess =_PNT("NotifyUpdateDataListSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyUpdateDataListSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyRemoveDataFailed =_PNT("NotifyRemoveDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyRemoveDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyRemoveDataSuccess =_PNT("NotifyRemoveDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyRemoveDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveAddDataFailed =_PNT("NotifyNonExclusiveAddDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveAddDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveAddDataSuccess =_PNT("NotifyNonExclusiveAddDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveAddDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySomeoneAddData =_PNT("NotifySomeoneAddData");
#else
const PNTCHAR* Proxy::RmiName_NotifySomeoneAddData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveRemoveDataFailed =_PNT("NotifyNonExclusiveRemoveDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveRemoveDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveRemoveDataSuccess =_PNT("NotifyNonExclusiveRemoveDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveRemoveDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySomeoneRemoveData =_PNT("NotifySomeoneRemoveData");
#else
const PNTCHAR* Proxy::RmiName_NotifySomeoneRemoveData =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveSetValueFailed =_PNT("NotifyNonExclusiveSetValueFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveSetValueFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveSetValueSuccess =_PNT("NotifyNonExclusiveSetValueSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveSetValueSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySomeoneSetValue =_PNT("NotifySomeoneSetValue");
#else
const PNTCHAR* Proxy::RmiName_NotifySomeoneSetValue =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveModifyValueFailed =_PNT("NotifyNonExclusiveModifyValueFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveModifyValueFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveModifyValueSuccess =_PNT("NotifyNonExclusiveModifyValueSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyNonExclusiveModifyValueSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifySomeoneModifyValue =_PNT("NotifySomeoneModifyValue");
#else
const PNTCHAR* Proxy::RmiName_NotifySomeoneModifyValue =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyWarning =_PNT("NotifyWarning");
#else
const PNTCHAR* Proxy::RmiName_NotifyWarning =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDbmsWriteDone =_PNT("NotifyDbmsWriteDone");
#else
const PNTCHAR* Proxy::RmiName_NotifyDbmsWriteDone =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDbmsAccessError =_PNT("NotifyDbmsAccessError");
#else
const PNTCHAR* Proxy::RmiName_NotifyDbmsAccessError =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyIsolateDataSuccess =_PNT("NotifyIsolateDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyIsolateDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyIsolateDataFailed =_PNT("NotifyIsolateDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyIsolateDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeisolateDataSuccess =_PNT("NotifyDeisolateDataSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeisolateDataSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDeisolateDataFailed =_PNT("NotifyDeisolateDataFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyDeisolateDataFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyDataForceUnloaded =_PNT("NotifyDataForceUnloaded");
#else
const PNTCHAR* Proxy::RmiName_NotifyDataForceUnloaded =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_NotifyDbCacheClientLogonFailed;

}



