// DbCache2 용 RMI
global DB2C2S 400
{
	//[encrypted] 
	RequestDbCacheClientLogon([in] Proud::String authenticationKey);	
	
	/////////////////////
    // 로딩 메서드

	//독점 로딩. 필드=값 
	RequestExclusiveLoadDataByFieldNameAndValue(
		[in] Proud::String rootTableName,
		[in] Proud::String fieldName,
		[in] Proud::CVariant cmpValue,
		[in] int64_t tag, 
		[in] Proud::ByteArray message);

    //독점 로딩. RootUUID를 이미 알 경우.
	RequestExclusiveLoadDataByGuid(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] int64_t tag, 
		[in] Proud::ByteArray message);

    //독점 로딩. 자유 쿼리 구문.
	RequestExclusiveLoadDataByQuery(
		[in] Proud::String rootTableName,
		[in] Proud::String queryString,
		[in] int64_t tag,
		[in] Proud::ByteArray message);

	RequestExclusiveLoadNewData(
		[in] Proud::String rootTableName,
		[in] Proud::ByteArray addDataBlock,
		[in] int64_t tag,
		[in] bool transaction );
	
	RequestUnloadDataBySessionGuid(
		[in] Proud::Guid sessionGuid,
		[in] Proud::ByteArray messageToNextLoader );

	DenyUnloadData(
		[in] Proud::Guid sessionGuid, 
		[in] Proud::ByteArray messageToRequester );
	
	RequestForceCompleteUnload([in] Proud::Guid rootUUID);		
	
	/////////////////////
	//요청 응답형 메서드
	// blocked 파라메터는 Blocked계열 함수 내부에서 사용될 때만 true로 셋팅합니다.

	RequestAddData(
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid ownerUUID,
		[in] Proud::ByteArray addDataBlock,
		[in] int64_t tag,
		[in] bool blocked);

	RequestUpdateData(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] int64_t tag,
		[in] bool blocked);

	RequestRemoveData(
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removeUUID,
		[in] int64_t tag,
		[in] bool blocked);
	
	RequestUpdateDataList(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray changeBlock,
		[in] int64_t tag,
		[in] bool transaction,
		[in] bool blocked);
	
	/////////////////////
	// 일방적 메서드

	AddData(
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid ownerUUID,
		[in] Proud::ByteArray addDataBlock,
		[in] bool writeDbmsImmediately);

	UpdateData(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] bool writeDbmsImmediately);

	RemoveData(
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removeUUID,
		[in] bool writeDbmsImmediately);
	
	UpdateDataList(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] bool transactional,
		[in] bool writeDbmsImmediately);

	MoveData(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID, 
		[in] Proud::Guid nodeUUID, 
		[in] Proud::Guid destRootUUID,
		[in] Proud::Guid destNodeUUID, 
		[in] bool writeDbmsImmediately );

    /////////////////////
    // 비독점 메서드

    //스냅샷 가져오기. 필드=값 
	RequestNonExclusiveSnapshotDataByFieldNameAndValue(
		[in] Proud::String rootTableName,
		[in] Proud::String fieldName,
		[in] Proud::CVariant cmpValue, 
		[in] int64_t tag);

    //스냅샷 가져오기. RootUUID를 이미 알 경우.
	RequestNonExclusiveSnapshotDataByGuid(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] int64_t tag);

    //스냅샷 가져오기. 자유 쿼리 구문.
	RequestNonExclusiveSnapshotDataByQuery(
		[in] Proud::String rootTableName,
		[in] Proud::String queryString,
		[in] int64_t tag);

	RequestNonExclusiveAddData(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid ownerUUID,
		[in] Proud::ByteArray addDataBlock,
		[in] int64_t tag,
		[in] Proud::ByteArray messageToLoader);

	RequestNonExclusiveRemoveData(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removeUUID,
		[in] int64_t tag,
		[in] Proud::ByteArray messageToLoader);

	RequestNonExclusiveSetValueIf(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid nodeUUID,
		[in] Proud::String propertyName,
		[in] Proud::CVariant newValue,
		[in] int compareType,
		[in] Proud::CVariant compareValue,
		[in] int64_t tag,
		[in] Proud::ByteArray messageToLoader);

	RequestNonExclusiveModifyValue(
		[in] Proud::String rootTableName,
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid nodeUUID,
		[in] Proud::String propertyName,
		[in] int operType,
		[in] Proud::CVariant value,
		[in] int64_t tag,
		[in] Proud::ByteArray messageToLoader);

	// 데이터 격리 기능(디비를 직접 접근하기 위해 디비캐시가 로딩 및 억세스를 놔주고 금지하는 기능)
	RequestIsolateData(
		[in] Proud::Guid rootUUID,
		[in] Proud::String rootTableName,
		[in] Proud::Guid sessionGuid);

	// 격리 해제
	RequestDeisolateData(
		[in] Proud::Guid rootUUID,
		[in] Proud::String filterText,
		[in] Proud::Guid sessionGuid);

}

global DB2S2C 500
{
	NotifyDbCacheClientLogonFailed([in] Proud::ErrorType reason);
	NotifyDbCacheClientLogonSuccess();

	// 독점 로딩 혹은 비독점 스냅샷의 결과를 클라에게 알려준다.
	NotifyLoadDataComplete(
		[in] bool isExclusive,
		[in] int64_t tag,
		[in] Proud::CFastArray<Proud::ByteArray>	successList_loadedData,
		[in] Proud::CFastArray<Proud::Guid>			successList_sessionGuid,
		[in] Proud::CFastArray<Proud::ByteArray>	successList_message,
		[in] Proud::CFastArray<Proud::Guid>			failList_uuid,
		[in] Proud::CFastArray<Proud::ErrorType>	failList_reason,
		[in] Proud::CFastArray<Proud::String>		failList_comment,
		[in] Proud::CFastArray<int32_t>				failList_hresult,
		[in] Proud::CFastArray<Proud::ByteArray>	failList_message
		);

	// "너가 갖고 있는 data tree들을 언로딩하시지? 다른 새로운 디비클라가 로딩하려고 하신다."
	// commonMessage: 평소에는 false지만, messageList에 들어간 것들이 모두 동일하다면 true가 된다. 이때 messageList는 실제로 1개만 들어간다. 네트웍 최적화의 일환.
	NotifyDataUnloadRequested(
		[in] Proud::CFastArray<Proud::Guid> sessionList,		// 언로드 요청할 세션 목록
		[in] Proud::CFastArray<Proud::ByteArray> messageList,	// 독점로드를 요청한 클라이언트가 보내온 메시지
		[in] bool commonMessage,								// 평소에는 false지만, messageList에 들어간 것들이 모두 동일하다면 true가 된다. 이때 messageList는 실제로 1개만 들어간다. 네트웍 최적화의 일환.
		[in] int64_t unloadRequestTimeoutTimeMs);				// 서버측에 설정된 언로드요청의 타임아웃 제한

	// 서버의 m_unloadRequestTimeoutTimeMs값이 변경될 경우 
	// 클라이언트들에게 이를 통보하기 위한 RMI
	NotifyUnloadRequestTimeoutTimeMs(
		[in] int64_t unloadRequestTimeoutTimeMs);	// 서버측에 설정된 언로드요청의 타임아웃 제한

	NotifyAddDataFailed(
		[in] int64_t tag, 
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source,
		[in] bool blocked);

	NotifyAddDataSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray addDataBlock,
		[in] bool blocked);
	
	NotifyUpdateDataFailed(
		[in] int64_t tag,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source,
		[in] bool blocked);

	NotifyUpdateDataSuccess(
		[in] int64_t tag,
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updataDataBlock,
		[in] bool blocked);
	
	NotifyUpdateDataListFailed(
		[in] int64_t tag, 
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source,
		[in] bool blocked);

	NotifyUpdateDataListSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] bool blocked);
	
	NotifyRemoveDataFailed(
		[in] int64_t tag, 
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source,
		[in] bool blocked);

	NotifyRemoveDataSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removedUUID,
		[in] bool blocked);
	
	NotifyNonExclusiveAddDataFailed(
		[in] int64_t tag,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source);

	NotifyNonExclusiveAddDataSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray addDataBlock);
	
	//Proud::ByteArray addDataBlock -> UUID
	// added again. Proud::ByteArray message
	NotifySomeoneAddData(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray addDataBlock,
		[in] Proud::ByteArray message,
		[in] Proud::Guid destParentUUID);
	
	NotifyNonExclusiveRemoveDataFailed(
		[in] int64_t tag,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source);

	NotifyNonExclusiveRemoveDataSuccess(
		[in] int64_t tag,
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removeUUID);
	
	NotifySomeoneRemoveData(
		[in] Proud::Guid rootUUID,
		[in] Proud::Guid removeUUID,
		[in] Proud::ByteArray message);
	
	NotifyNonExclusiveSetValueFailed(
		[in] int64_t tag,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source);

	NotifyNonExclusiveSetValueSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock);	
	
	NotifySomeoneSetValue(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] Proud::ByteArray message);
	
	NotifyNonExclusiveModifyValueFailed(
		[in] int64_t tag, 
		[in] Proud::ErrorType reason,
		[in] Proud::String comment,
		[in] int32_t hresult,
		[in] Proud::String source);

	NotifyNonExclusiveModifyValueSuccess(
		[in] int64_t tag, 
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock);	
	
	NotifySomeoneModifyValue(
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray updateDataBlock,
		[in] Proud::ByteArray message);
	
	NotifyWarning(
		[in] Proud::ErrorType errorType,
		[in] Proud::ErrorType detailtype,
		[in] Proud::String comment);
	
	NotifyDbmsWriteDone(
		[in] Proud::DbmsWritePropNodePendType type,
		[in] Proud::Guid loadeeGuid);
	
	NotifyDbmsAccessError(
		[in] int64_t tag, 
		[in] Proud::ByteArray message,
		[in] Proud::String comment);

	// 격리 성공,실패 & 격리해제 성공,실패
	NotifyIsolateDataSuccess(
		[in] Proud::Guid sessionGuid,
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray dataBlock);

	NotifyIsolateDataFailed(
		[in] Proud::Guid sessionGuid,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment);

	NotifyDeisolateDataSuccess(
		[in] Proud::Guid sessionGuid,
		[in] Proud::Guid rootUUID,
		[in] Proud::ByteArray dataBlock);

	NotifyDeisolateDataFailed(
		[in] Proud::Guid sessionGuid,
		[in] Proud::ErrorType reason,
		[in] Proud::String comment);

	// "isolate 등으로 인해, 기 로딩된 데이터가 강제로 언로드되어야 한다."
	NotifyDataForceUnloaded(
		[in] Proud::Guid sessionGuid, 
		[in] Proud::Guid rootGuid);
}
