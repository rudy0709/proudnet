<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="JavaHelper.ttinclude"#>

// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

<#
    PackageDecl();
#>
import com.nettention.proud.*;
<#
    ImportDecl("import");

    foreach(var gi in App.g_parsed.m_globalInterfaces)
    {
        StubClassDef(gi);
    }
#>

<#+
    void StubClassDef(Parsed_GlobalInterface gi)
    {
#>
public class <#=App.m_StubJavaFileNameWithoutExtension#> extends com.nettention.proud.RmiStub
{
<#+
        foreach(var mt in gi.m_methods)
        {
#>
    public boolean <#+ MethodDecl(mt); #>
    {
        return false;
    }
<#+
        }
        ProcessReceivedMessage(gi);
        DefRmiNames_all("final String", gi, true);
#>
    public int[] getRmiIDList() { return <#=App.m_StubJavaFileNameWithoutExtension#>.RmiIDList; }
    public int getRmiIDListCount() { return <#=App.m_StubJavaFileNameWithoutExtension#>.RmiIDList.length; }
}
<#+
    }
#>

<#+
    void ProcessReceivedMessage(Parsed_GlobalInterface gi)
    {
#>
    public boolean processReceivedMessage(com.nettention.proud.ReceivedMessage pa, Object hostTag)
        throws Exception
    {
        int remote=pa.getRemoteHostID();
        if(remote==com.nettention.proud.HostID.None)
        {
            showUnknownHostIDWarning(remote);
        }

        com.nettention.proud.Message __msg=pa.getReadOnlyMessage();
        int orgReadOffset = __msg.getReadOffset();
        int __rmiID = com.nettention.proud.RmiID.None;
        try
        {
            __rmiID = __msg.readRmiID();
        }
        catch(Exception e)
        {
            __msg.setReadOffset(orgReadOffset);
            return false;
        }

        switch(__rmiID)
        {
<#+
        foreach(var mt in gi.m_methods)
        {
            DoCasePerMethod("__msg",gi,mt);
        }
#>
        default:
             __msg.setReadOffset(orgReadOffset);
             return false;
        }
        return true;
    }

<#+
    }
#>

<#+
    void DoCasePerMethod(string msg, Parsed_GlobalInterface gi,Parsed_Method mt)
    {
#>
    case <#=App.m_StubJavaFileNameWithoutExtension#>.<#=mt.m_name#>:
        {
            com.nettention.proud.RmiContext ctx=new com.nettention.proud.RmiContext();
            ctx.sentFromHostID=pa.getRemoteHostID();
            ctx.relayed=pa.isRelayed();
            ctx.hostTag=hostTag;
            ctx.encryptMode = pa.getEncryptMode();
            ctx.compressMode = pa.getCompressMode();

            <#+ DeserializeParams(msg,gi,mt); #>
            if(enableNotifyCallFromStub==true)
            {
                String parameterString="";
                <#+ MakeParameterText("parameterString", gi, mt); #>
                notifyCallFromStub(<#=App.m_StubJavaFileNameWithoutExtension#>.<#=mt.m_name#>, RmiName_<#=mt.m_name#>,parameterString);
            }

            if(enableStubProfiling)
            {
                com.nettention.proud.BeforeRmiSummary summary = new com.nettention.proud.BeforeRmiSummary();
                summary.rmiID = <#=App.m_StubJavaFileNameWithoutExtension#>.<#=mt.m_name#>;
                summary.rmiName = RmiName_<#=mt.m_name#>;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                beforeRmiInvocation(summary);
            }

            long t0 = com.nettention.proud.PreciseCurrentTime.getTimeMs();


            boolean __ret=<#=mt.m_name#> (remote,ctx <#+Paramcalls(mt,true);#> );

            if(__ret==false)
            {

                core.showNotImplementedRmiWarning(RmiName_<#=mt.m_name#>);
            }

            if(enableStubProfiling)
            {
                com.nettention.proud.AfterRmiSummary summary = new com.nettention.proud.AfterRmiSummary();
                summary.rmiID = <#=App.m_StubJavaFileNameWithoutExtension#>.<#=mt.m_name#>;
                summary.rmiName = RmiName_<#=mt.m_name#>;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTimeMs = com.nettention.proud.PreciseCurrentTime.getTimeMs()-t0;
                afterRmiInvocation(summary);
            }
        }
        break;
<#+
    }
#>

<#+
    void MakeParameterText(string parameterString, Parsed_GlobalInterface gi, Parsed_Method mt)
    {
        foreach(var p in mt.m_params)
        {
#>
    parameterString+=<#=gi.m_marshaler#>.toString(<#=p.m_name#>)+",";
<#+
        }
    }
#>

<#+
    void DeserializeParams(string msg, Parsed_GlobalInterface gi, Parsed_Method mt)
    {
        foreach(var p in mt.m_params)
        {
#>
    <#= p.m_type #> <#=p.m_name#> = <#=gi.m_marshaler#>.read<#=p.m_type #>(<#=msg#>);
<#+
        }
#>
    core.postCheckReadMessage(<#=msg#>, RmiName_<#=mt.m_name#>);
<#+
    }
#>
