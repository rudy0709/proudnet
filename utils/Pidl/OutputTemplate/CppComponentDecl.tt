<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once

<#foreach(var c in App.g_parsed.m_components) { #>

<#=c.GetNamespaceStartStatement()#>

	PN_ATTR(Persist)
	class <#=c.GetClassNameOnly()#>: public Proud::Retained::Component
	{
		<#=App.g_parsed.m_dllExportMacroName#> virtual void SerializeMembers(Proud::CMessage& data) override;
		<#=App.g_parsed.m_dllExportMacroName#> virtual bool DeserializeMembers(Proud::CMessage& data) override;
		<#=App.g_parsed.m_dllExportMacroName#> virtual void AppendChanged_FieldOnly(ComponentAsStringMap& change_component, ComponentAsStringMap& lastState_component) override;

	public:
		<#=App.g_parsed.m_dllExportMacroName#> static const Guid TypeID;

		virtual Guid GetTypeID() const override 
		{
			return TypeID;
		}

		<#=App.g_parsed.m_dllExportMacroName#> <#=c.GetClassNameOnly()#>();
		<#=App.g_parsed.m_dllExportMacroName#> ~<#=c.GetClassNameOnly()#>();

<#
		foreach(var f in c.m_fields){
#>
		<#=f.m_type#> <#=f.m_name#> <#=f.GetOptionalDefaultValueAssignStatement()#> ;  
<#
		}
#>
	}; // <#=c.GetClassNameOnly()#>

<#=c.GetNamespaceEndStatement()#>

<# } #>


// Automatically generated macros. You can use these as duck-typing.
<#foreach(var c in App.g_parsed.m_components) { #>
<#foreach(var f in c.m_fields){#>
#define PNComp_<#=f.m_name#> AddComponent< <#=c.GetClassNameOnly()#> >()-><#=f.m_name#>
<# } #>
<# } #>
