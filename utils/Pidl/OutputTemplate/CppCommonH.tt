<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma once

<#
foreach(var inc in App.g_parsed.m_includes)
{
#>
#include <#=inc.m_name#>
<#
}

foreach(var gi in App.g_parsed.m_globalInterfaces)
{
#>
<#=gi.GetCppNestedNamespaceDefinition()#>

    //Message ID that replies to each RMI method.
<#
    foreach(var method in gi.m_methods)
    {
#>
    static const ::Proud::RmiID Rmi_<#=method.m_name#> = (::Proud::RmiID)(<#=method.m_mode.m_messageID#>);
<#
    }
#>

    // List that has RMI ID.
    extern ::Proud::RmiID g_RmiIDList[];
    // RmiID List Count
    extern int g_RmiIDListCount;

<#=gi.GetCppNestedNamespaceDefinitionEnd()#>

<#
} // for each 'globalInterface'
#>

// Forward declarations

<#
// #PIDL_enum_and_class PIDL 파일에 class,enum 정의해놓은 것은 common file에 생성된다.
foreach(var enumObj in App.g_parsed.m_enums)
{
    Write(App.GetCppNestedNamespaceDefinition(enumObj.m_name, true));
#>
    enum class <#=App.GetLeafName(enumObj.m_name)#>;
<#
    Write(App.GetCppNestedNamespaceDefinitionEnd(enumObj.m_name, true));
}

foreach(var classObj in App.g_parsed.m_classes)
{
    Write(App.GetCppNestedNamespaceDefinition(classObj.m_name, true));
#>
    class <#=App.GetLeafName(classObj.m_name)#>;
<#
    Write(App.GetCppNestedNamespaceDefinitionEnd(classObj.m_name, true));
}
#>

// Declarations

<#
foreach(var enumObj in App.g_parsed.m_enums)
{
    Write(App.GetCppNestedNamespaceDefinition(enumObj.m_name, true));
#>
    enum class <#=App.GetLeafName(enumObj.m_name)#>
    {
<#
        foreach (var item in enumObj.m_items)
        {
#>
            <#=item.GetDefinitionStatement()#>,
<#
        }
#>
    };
<#
    Write(App.GetCppNestedNamespaceDefinitionEnd(enumObj.m_name, true));
}
#>

<#
foreach(var classObj in App.g_parsed.m_classes)
{
    Write(App.GetCppNestedNamespaceDefinition(classObj.m_name, true));
#>
    class <#=App.GetLeafName(classObj.m_name)#>
    {
<#
        foreach (var item in classObj.m_variables)
        {
#>
            <#=item.GetCppDeclarationStatement()#>
<#
        }
#>
    };
<#
    Write(App.GetCppNestedNamespaceDefinitionEnd(classObj.m_name, true));
}
#>
