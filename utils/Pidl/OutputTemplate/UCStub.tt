<#@ template language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="UCHelper.ttinclude" #>

// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

<#
	ImportDecl("dependson");

    foreach(var gi in App.g_parsed.m_globalInterfaces)
    {
        StubClassDef(gi);
    }
#>

<#+
    void StubClassDef(Parsed_GlobalInterface gi)
    {
#>
class <#=App.m_StubUCFileNameWithoutExtension#> extends IRmiStub
<#+ 
        foreach(var ii in App.g_parsed.m_imports)
        {
#>
    dependson(<#=ii.m_name#>)
<#+
        }
        DefRmiNames(App.m_StubUCFileNameWithoutExtension,gi);
        DefRmiIDList(App.m_StubUCFileNameWithoutExtension,gi);

        foreach(var mt in gi.m_methods)
        {
#>
	function bool <#+ MethodDecl(mt); #>
	{ 
		return false;
	} 

	final function CallEventBeforeRmiInvocation(int remote, int hostTag, int rmiID, string rmiName)
	{
		local BeforeRmiSummary summary;
		summary.RmiID = rmiID;
		summary.RmiName = rmiName;
		summary.HostID = remote;
		summary.HostTag = hostTag;
		BeforeRmiInvocation(summary);
	}

	final function CallEventAfterRmiInvocation(int remote, int hostTag, int rmiID, string rmiName)
	{
		local AfterRmiSummary summary;
		summary.RmiID = rmiID;
		summary.RmiName = rmiName;
		summary.HostID = remote;
		summary.HostTag = hostTag;
		AfterRmiInvocation(summary);
	}

foreach(var mt in gi.m_methods)
	final function <#+ MethodDecl2(mt); #>
	{ 
		local string parameterString;
		local bool ret;

		<#+ DeserializeLocalVariable(gi,mt); #>

		<#+ ReadMessageLocalVariable(gi,mt); #>

		PostCheckReadMessage(__msg, RmiName_<#=App.m_StubUCFileNameWithoutExtension#>_<#=mt.m_name#>);
		if(EnableNotifyCallFromStub==true)
		{
			<#+ MakeParameterText("parameterString",gi,mt); #>
			NotifyCallFromStub(remote, Rmi_<#= App.m_StubUCFileNameWithoutExtension #>_<#=mt.m_name#>, RmiName_<#=App.m_StubUCFileNameWithoutExtension#>_<#=mt.m_name#>,parameterString);
		}

		if(EnableStubProfiling)
		{
			CallEventBeforeRmiInvocation(remote, hostTag, rmiID, rmiName);
		}
			
		ret = <#=mt.m_name#> (remote,ctx <#+Paramcalls(mt,true);#> );

		if(ret==false)
		{
			ShowNotImplementedRmiWarning(RmiName_<#=App.m_StubUCFileNameWithoutExtension#>_<#=mt.m_name#>);
		}
			
		if(EnableStubProfiling)
		{
			CallEventAfterRmiInvocation(remote, hostTag, rmiID, rmiName);
		}
	} 

<#+
        } // for each method
        ProcessReceivedMessage(gi);
        DefInitEvent(App.m_StubUCFileNameWithoutExtension, gi);
#>

defaultproperties
{
	// defaultproperties
}

<#+
    }
#>


<#+ 
    // method declaration statement을 생성하는 subprogram.
    void MethodDecl(Parsed_Method mt)
	{
#>
<#=mt.m_name#>( int remote, RmiContext context<#+ParamDefs(mt,true);#>)
<#+
    }
#>

<#+ 
    // case 문에서 사용할 함수 정의
    void MethodDecl2(Parsed_Method mt)   
    {
#>
	ProcessReceivedMessage_<#=mt.m_name#>( int remote, RmiContext ctx, Message __msg, int hostTag, int rmiID, string rmiName)

<#+
    }
#>


<#+
    void DeserializeLocalVariable(Parsed_GlobalInterface gi,Parsed_Method mt)
    {
        foreach(var p in mt.m_params)
        {
#>
	local <#=p.m_type #> <#=p.m_name#>;
<#+
        }
    }
#>

<#+ 
    void ReadMessageLocalVariable(Parsed_GlobalInterface gi, Parsed_Method mt)
    {
        foreach(var p in mt.m_params)
        {
#>
	class'<#=gi.m_marshaler#>'.static.Read_<#=p.m_type#>(__msg,<#=p.m_name#>);
<#+
        }
    }
#>

<#+
    void MakeParameterText(string parameterString,Parsed_GlobalInterface gi, Parsed_Method mt)
    {
	    foreach(var p in mt.m_params)
        {
#>
	class'<#=gi.m_marshaler#>'.static.AppendTextOut_<#=p.m_type#>(parameterString,<#=p.m_name#>);
<#+
        }
    }
#>


<#+
    void ProcessReceivedMessage(Parsed_GlobalInterface gi)
    {
#>

	event bool ProcessReceivedMessage(ReceivedMessage pa, int hostTag) 
	{
		local RmiContext ctx;
		local Message __msg;
		local int rmiID;

		ctx.SentFrom = pa.RemoteHostID;

		if(ctx.SentFrom==0)
		{
			ShowUnknownHostIDWarning(ctx.SentFrom);
		}

		ctx.Relayed = pa.Relayed;
		ctx.Encrypt = pa.Encrypt;
		ctx.Compress = pa.Compress;

		__msg = pa.UnsafeMessage;
		__msg.Read_RmiID(rmiID);
        
        if (rmiID ==0)
			return false;

		switch(rmiID)
		{
<#+
        foreach(var mt in gi.m_methods)
        {
            DoCasePerMethod("__msg",gi,mt);
        }
#>
		default:
			 return false;
		}
		return true;
	}
<#+
    }
#>


<#+
    void DoCasePerMethod(string __msg, Parsed_GlobalInterface gi, Parsed_Method mt)
    {
#>
	case Rmi_<#=App.m_StubUCFileNameWithoutExtension #>_<#=mt.m_name#>:
		ProcessReceivedMessage_<#=mt.m_name#>(ctx.SentFrom, ctx, __msg, hostTag, rmiID, RmiName_<#=App.m_StubUCFileNameWithoutExtension#>_<#=mt.m_name#>);
		break;
<#+
    }
#>